{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Loop\n\u2301\n\n\n\n\n\n\nIntroduction\n\u2301\n\n\nLoop\n is an app template for building an automated insulin delivery system. It is a stone resting on the boulders of work done by many others.  \n\n\nThe app is built on top of \nLoopKit\n. LoopKit is a set of frameworks that provide data storage, retrieval, and calculation, as well as boilerplate view controllers used in Loop.\n\n\n\n\nImportant\n\n\nPlease understand that this project:\n\n\n\n\nIs highly experimental\n\n\nIs not approved for therapy\n\n\n\n\nYou take full responsibility for building and running this system and do so at your own risk.\n\n\n\n\nUsing the open source Loop app template, you can build an insulin delivery system that uses specific commercial and open source hardware and software technologies to bring together the insulin pump, continuous glucose monitor (CGM), and insulin dosing algorithm to create a continuous insulin basal dosing \u201cLoop\u201d.  This Loop predicts future glucose based on basal-rate schedules, carbohydrate intake, insulin on board, and current CGM readings.  These glucose forecasts provide Loop with the information needed to recommend a temporary basal rate to attain a targeted glucose range in the future.  The system can either operate as an \u201copen loop\u201d by making recommendations to the user for their approval before enacting or as a \u201cclosed loop\u201d by automatically setting the recommended temporary basal rate. \n\n\nYou should undertake this project in stages. For example, first \u201copen loop\u201d to familiarize yourself with Loop\u2019s operation. Also, investigate the code to ensure you understand what it is recommending and why. Then when you progress to \u201cclosed loop\u201d, do so safely by starting with appropriate safety limits and only progress to higher limits after several days of no lows. Please ask questions at this point about why Loop is making the recommendations it does.  It should be similar to the therapy decisions you would make yourself.  If the recommendations it makes are different than you would make, try to figure out why.\n\n\nDevelopment History\n\u2301\n\n\nLoop has been developed as an open-source, shared project.  For a really interesting read about the history of Loop development, check out this \nHistory of Loop and LoopKit\n post, written by Loop developer Nate Racklyeft.  The project continues to be a labor-of-love by a community of users; maintained and improved by volunteers.\n\n\nHow to Use These Docs\n\u2301\n\n\n\n\nUse the navigation menu at the top of the screen to find the info you are looking for.\n\n\nA Table of Contents for the current page is always displayed on the left side of the screen.\n\n\n\n\nYou can search the Loop Docs site by clicking the \n icon.\n\n\n\n\n\n\n\n\nStay in the Loop!\n\u2301\n\n\nSign up for the Loop Users announcement list\n to stay informed of critical issues that may arise.\n\n\nJoin the gitter chat at \nhttps://gitter.im/LoopKit/Loop\n\n\nThere is also a \nLooped Facebook Group\n that you might wish to join for support.  When you request to join the group, please remember to check your messages box on facebook and respond to the message.\n\n\nContribute\n\u2301\n\n\nPlease consider submitting any updates and improvements to the docmentation that you want to share by submitting a Pull Request to the \nloopdocs repo\n. For more information on how to contribute to an open source project, this \nHow to Contribute to Open Source\n guide may be useful. Also, please review the Loop \nLICENSE\n and Loop \nCODE_OF_CONDUCT\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-loop", 
            "text": "", 
            "title": "Welcome to Loop"
        }, 
        {
            "location": "/#introduction", 
            "text": "Loop  is an app template for building an automated insulin delivery system. It is a stone resting on the boulders of work done by many others.    The app is built on top of  LoopKit . LoopKit is a set of frameworks that provide data storage, retrieval, and calculation, as well as boilerplate view controllers used in Loop.   Important  Please understand that this project:   Is highly experimental  Is not approved for therapy   You take full responsibility for building and running this system and do so at your own risk.   Using the open source Loop app template, you can build an insulin delivery system that uses specific commercial and open source hardware and software technologies to bring together the insulin pump, continuous glucose monitor (CGM), and insulin dosing algorithm to create a continuous insulin basal dosing \u201cLoop\u201d.  This Loop predicts future glucose based on basal-rate schedules, carbohydrate intake, insulin on board, and current CGM readings.  These glucose forecasts provide Loop with the information needed to recommend a temporary basal rate to attain a targeted glucose range in the future.  The system can either operate as an \u201copen loop\u201d by making recommendations to the user for their approval before enacting or as a \u201cclosed loop\u201d by automatically setting the recommended temporary basal rate.   You should undertake this project in stages. For example, first \u201copen loop\u201d to familiarize yourself with Loop\u2019s operation. Also, investigate the code to ensure you understand what it is recommending and why. Then when you progress to \u201cclosed loop\u201d, do so safely by starting with appropriate safety limits and only progress to higher limits after several days of no lows. Please ask questions at this point about why Loop is making the recommendations it does.  It should be similar to the therapy decisions you would make yourself.  If the recommendations it makes are different than you would make, try to figure out why.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#development-history", 
            "text": "Loop has been developed as an open-source, shared project.  For a really interesting read about the history of Loop development, check out this  History of Loop and LoopKit  post, written by Loop developer Nate Racklyeft.  The project continues to be a labor-of-love by a community of users; maintained and improved by volunteers.", 
            "title": "Development History"
        }, 
        {
            "location": "/#how-to-use-these-docs", 
            "text": "Use the navigation menu at the top of the screen to find the info you are looking for.  A Table of Contents for the current page is always displayed on the left side of the screen.   You can search the Loop Docs site by clicking the   icon.", 
            "title": "How to Use These Docs"
        }, 
        {
            "location": "/#stay-in-the-loop", 
            "text": "Sign up for the Loop Users announcement list  to stay informed of critical issues that may arise.  Join the gitter chat at  https://gitter.im/LoopKit/Loop  There is also a  Looped Facebook Group  that you might wish to join for support.  When you request to join the group, please remember to check your messages box on facebook and respond to the message.", 
            "title": "Stay in the Loop!"
        }, 
        {
            "location": "/#contribute", 
            "text": "Please consider submitting any updates and improvements to the docmentation that you want to share by submitting a Pull Request to the  loopdocs repo . For more information on how to contribute to an open source project, this  How to Contribute to Open Source  guide may be useful. Also, please review the Loop  LICENSE  and Loop  CODE_OF_CONDUCT .", 
            "title": "Contribute"
        }, 
        {
            "location": "/setup/overview/", 
            "text": "General Requirements\n\u2301\n\n\nLoop has both Hardware and Software requirements.  In general, to use Loop you need to have six components.\n\n\n\n\nCompatible insulin pump\n\n\nCompatible CGM\n\n\nRileyLink\n\n\nCompatible iPhone/iPod Touch\n\n\nApple computer running High Sierra macOS 10.13.4 or later\n\n\nXcode (a free Apple application)\n\n\n\n\nYou will need to be able to install software on your computer and sign up as an Apple Developer to install the Loop app to your iPhone. You do not have to own an Apple computer to run Loop on a day-to-day basis, but you will need access to an Apple computer anytime you need to build or update your Loop app. For the most part, if you are comfortable with installing Apple software programs on your computer, you will have no problem building and running Loop. There are detailed step-by-step instructions included in these docs.  You should be doing this yourself so you can understand how to fix it when it breaks. You may want to help another person get set up on Loop, and that is noble, but you will serve them much better if you support them doing the work themselves, rather than doing it for them.   \n\n\n\n\n\n\n\n\n\nBuild Overview\n\u2301\n\n\nBuilding your Loop app is actually quite easy.  The harder part will be having the patience to read all the documents you should before starting a closed loop.  New Loop users are so excited to get started that they skip reading all the great info that these docs contain.  So, as you begin the build...please include time to read the documents that follow what happens AFTER you successfully build your Loop app.\n\n\nIf you have any questions, these docs have a nice search feature that may help you find your answers pretty quickly too.\n\n\nThe basic installation involves:\n\n\n\n\nMaking sure you have macOS High Sierra and the application Xcode\n\n\nDownloading the Loop code\n\n\nAdding your Apple developer account to Xcode\n\n\nSigning your app with your Apple developer account\n\n\nPressing a \"build\" button to install the Loop app onto your iPhone\n\n\nEntering the needed settings into Loop app to start using the looping features", 
            "title": "Overview"
        }, 
        {
            "location": "/setup/overview/#general-requirements", 
            "text": "Loop has both Hardware and Software requirements.  In general, to use Loop you need to have six components.   Compatible insulin pump  Compatible CGM  RileyLink  Compatible iPhone/iPod Touch  Apple computer running High Sierra macOS 10.13.4 or later  Xcode (a free Apple application)   You will need to be able to install software on your computer and sign up as an Apple Developer to install the Loop app to your iPhone. You do not have to own an Apple computer to run Loop on a day-to-day basis, but you will need access to an Apple computer anytime you need to build or update your Loop app. For the most part, if you are comfortable with installing Apple software programs on your computer, you will have no problem building and running Loop. There are detailed step-by-step instructions included in these docs.  You should be doing this yourself so you can understand how to fix it when it breaks. You may want to help another person get set up on Loop, and that is noble, but you will serve them much better if you support them doing the work themselves, rather than doing it for them.", 
            "title": "General Requirements"
        }, 
        {
            "location": "/setup/overview/#build-overview", 
            "text": "Building your Loop app is actually quite easy.  The harder part will be having the patience to read all the documents you should before starting a closed loop.  New Loop users are so excited to get started that they skip reading all the great info that these docs contain.  So, as you begin the build...please include time to read the documents that follow what happens AFTER you successfully build your Loop app.  If you have any questions, these docs have a nice search feature that may help you find your answers pretty quickly too.  The basic installation involves:   Making sure you have macOS High Sierra and the application Xcode  Downloading the Loop code  Adding your Apple developer account to Xcode  Signing your app with your Apple developer account  Pressing a \"build\" button to install the Loop app onto your iPhone  Entering the needed settings into Loop app to start using the looping features", 
            "title": "Build Overview"
        }, 
        {
            "location": "/setup/requirements/pump/", 
            "text": "Insulin Pump\n\u2301\n\n\n\n\nThere are a number of insulin pumps manufactured between 2006 \u2013 2012 by Medtronic which are compatible.  Compatibility has two requirements; (1) pump model and (2) firmware.\n\n\n\n\nLOOP COMPATIBLE PUMPS:\n  The 515/715 and 522/722 pumps are all compatible.  The 523/723 and 554/754 pumps will require you to check the firmware to see if the pump is Loop compatible.  See the footnotes 3 and 4 for the required firmwares.\n\n\nLOOP \nNOT\n COMPATIBLE PUMPS:\n  The 512/712 pumps are \nNOT\n compatible with Loop system (you can run a limited OpenAPS setup on a 512/712, however).  The Omnipod, Animas, T-slim, Medtronic 600 series and any other name of pump that you wish to insert are also \nNOT\n compatible.  Work is being done to make Omnipod work with Loop, but there is no predicted timeline for that.  Believe me...when it happens we will update and announce.\n\n\n\n\n\n  \n\n    \n\n      \n\n      \nInsulin Pump\n\n    \n\n    \n\n      \nMM 515/715\n\n      \nMM 522/722\n2\n\n      \nMM 523/723\n3\n\n      \nMM 554/754\n4\n\n    \n\n  \n\n  \n\n    \n\n      \nCGM\n\n      \nDexcom G4\n1\n \n\n      \n\u2705\n\n      \n\u2705\n\n      \n\u2705\n\n      \n\u2705\n\n    \n\n    \n\n      \nDexcom G5\n\n      \n\u2705\n\n      \n\u2705\n\n      \n\u2705\n\n      \n\u2705\n\n    \n\n    \n\n      \nMM CGM\n\n      \n\u2705\n\n      \n\u2705\n\n      \n\u2705\n\n      \n\u2705\n\n    \n\n  \n\n\n\n\n\n1\n. Offline access to glucose requires a Receiver with Share and the \nShare2 app\n to be running on the same iPhone as the Loop app is installed. Internet-dependent access via Share servers is also supported.\n\n2\n. x22 model pumps were produced before firmware security patches were implemented, therefore these models are compatible because they will have firmware 2.4A or lower only.  You can double check, but thus far all x22 pumps we have seen have compatible firmware.\n\n3\n. Firmware 2.4A or lower is required for using Closed Loop and Bolus features.\n\n4\n. Worldwide Veo (2.6A or lower) or Canadian/Australian Veo (2.7A or lower) is required for using Closed Loop and Bolus features. US version of this pump is not available.\n\n\n\n\nIf you want to triple check compatibility, you can check for presence/absence of \"PC connect\" in the pump.  If PC Connect is present, then the pump is NOT compatible.  You can find PC connect in the Medtronic's Main Menu, Utilities, Connect Devices.  PC Connect, if present, will be the first option showing in that menu, above the word \"Meters\".  If you do \nNOT\n see PC Connect there...good!\n\n\n\n\n\n\n\n\n\n\n\nPump Model\n\u2301\n\n\nTo determine your pump model, look at the back side of your pump.  There should be a sticker on the underside of the pump.  On the right hand side of the sticker, it says REF MMT-XXXXXX\n\n\n\n\n    MMT       Pump Manufacturer Model (MiniMed Medtronic)\n    722       Pump Model Number\n    NA        Pump Region (NA=North America, CA=Canada/Australia, WW=Worldwide)\n    S         Pump Color (S=Smoke, L=Clear/Lucite, B=Blue, P=Pink/Purple)\n\n\n\n\nSome pumps may have an \u201cL\u201d or \u201cS\u201d or \"R\" before the pump region, e.g. a model number like MMT-722LNAS.  This does not affect Loop compatibility.\n\n\nPump Differences\n\u2301\n\n\nThe  differences between the pump models are limited.\n\n\n500 vs 700\n:  The difference between the Medtronic 500 series and the 700 series pumps is the size of the insulin reservoirs.  The 500 series pumps use a 180 unit reservoir, and the 700 series pumps use a 300 unit reservoir (or smaller 180 unit reservoir, if you want).\n\n\nx15/x22 vs x23/x54\n:  The difference between the x15 and x22 pumps versus the x23 and x54 series pumps has only a few notable mentions:\n\n\n\n\nThe x23/x54 pumps will allow for smaller insulin deliveries in certain situations, if the smaller scroll rate is selected in the Bolus\nSetup\nScroll Rate menu.  \nLoop will have the insulin delivery automatically rounded by the pump to the units available in the pump model, and any smaller adjustments (to make up for the rounding) will be made through Loop\u2019s use of temp basals.  If you want the smaller increments of basal rates, you can still enter those values in Loop app's settings and Loop will use those values for the purposes of insulin delivery calculations.\n\n\n\n\n\n\n\n\n\n\nPump Model\n\n\nBasal increments\n\n\nBolus increments\n\n\nRange\n\n\n\n\n\n\n\n\n\n\n515/715\nand\n522/722\n\n\n0.05\n0.1\n\n\n0.1\n0.1\n\n\ndeliveries less than 10 units\ngreater than 10 units\n\n\n\n\n\n\n523/723\nand\n554/754\n\n\n0.025\n0.05\n0.1\n\n\n0.025 \n0.05 \n0.1\n\n\nbetween 0.025 to 0.975 units\nbetween 1 to 9.95 units\ngreater than 10 units\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdditionally, because of the way Loop fetches information from the pump, the x23/x54 series of pumps are slightly better at conserving battery life through the use of the MySentry packets to collect information from the pump.  x22 pumps do not use MySentry.\n\n\n\n\n\n\nThe x23/x54 series pumps are also faster at delivering boluses greater than 10 units.  On an x23 pump, a 13-unit bolus takes 5:00 minutes to complete.  On an x22 pump, a 13-unit bolus takes 8:40 minutes to complete.\n\n\n\n\n\n\nPump Firmware\n\u2301\n\n\n\n\nIf you are looking to use a 523/723 or 554/754 pump, you will need to check the firmware version for compatibility.\n\n\n\n\nA pump\u2019s firmware is the internal software that runs your pump.  Older Medtronic firmware allows Loop to act as a \u201cremote control\u201d to set temp basals and report back pump data.  Newer firmware disabled that \u201cremote control\u201d access and therefore cannot be used with these DIY closed-loop systems.  There is currently no ability to downgrade a pump\u2019s firmware or replace it with older firmware.  Before you buy a used pump, make sure you are getting one with compatible firmware.\n\n\nTo find your pump\u2019s firmware you will need to power it up.  If the pump has not been powered on for some time (i.e., has been in storage without a battery for awhile), it will run through a start-up count and the firmware version will appear on the bottom right of the pump\u2019s screen.  Don\u2019t turn away, as the version number will only be displayed for a little while before the screen moves onto other information displays.  \n\n\nIf the pump has been active recently or has a reservoir installed, follow these steps:\n\n\n\n\n\n\nPress the \n button on your pump.  \n\n\n\n\n\n\nScroll down with the \n button to the bottom of the status display.  \n\n\n\n\n\n\nRead the bottom line of the display.\n\n\n\n\n\n\n\n\nOther pumps\n\u2301\n\n\nWhile we all would love to have our {insert your favorite manufacturer} pump be compatible with a DIY closed-loop system like Loop, unfortunately it just isn't possible right now.  There are efforts being made to crack the software code on other pumps (like Animas and Omnipod), and when they are successful...believe me...we will tell you about it!\n\n\nFinding a Medtronic pump\n\u2301\n\n\nFinding a compatible Medtronic pump is probably the most difficult part for most new Loopers.  Our suggestion:\n\n\n\n\n\n\nTalk to friends in the diabetic community.\n\n\n\n\n\n\nAsk your endocrinologist.  \n\n\n\n\n\n\nAsk at a local JDRF chapter meeting if someone has an old backup pump they'd be willing to donate to you.  \n\n\n\n\n\n\nJoin diabetic supply groups in Facebook; both for-trade and for-sale groups.  \n\n\n\n\n\n\nCheck Craigslist often and be willing to expand your search area to include larger cities.\n\n\n\n\n\n\nCheck out the \nHelpAround, NextDoor, OfferUp, and/or LetGo\n apps for pumps.\n\n\n\n\n\n\nSearch \nMedwow\n for used Medtronic pumps\n\n\n\n\n\n\nMedwow has been fairly frustrating for most people; poor response rate, high prices.  The most success appears to come from either one-on-one discussions with fellow diabetics/doctors or using apps (Craigslist, NextDoor, LetGo, HelpAround).  If you are using Craigslist, you may wish to use an app on your iPhone to make the searching easier.  There are apps to search multiple cities at one for your keywords and set up alerts.\n\n\n\n\nSafe Purchasing\n\u2301\n\n\nIf you choose to purchase from a remote or unknown seller, here are some tips for safe purchasing:\n\n\n\n\n\n\nUse Paypal and purchase using the \"Goods and Services\" payment option.  This costs nothing for the buyer, but the seller will lose 2.95% of the sale to Paypal fees.  Paypal offers some protection for both buyer and seller in the event of fraud.  \n\n\n\n\n\n\nAsk for photos of the pump.  Check to make sure the serial number of the pump on the backside matches the serial number of the pump showing in the display menu.  Ask for a short video of the pump, or at least a photo of the pump turned on, so that you can see the pump's firmware and model number.  Cracks and some wear on these pumps is expected...these pumps are not usually free of any marks.  Many people are successfully looping on pumps that have cracks and rub marks...but you may want to ask if you are concerned about any you see.  \n\n\n\n\n\n\nAsk for shipping that includes a tracking number.  USPS Priority Mail's smallest box is a great option.  It's only $7.15 and includes tracking.  Ask the seller to add a small bit of packing protection such as bubble wrap around the pump to keep it safe during shipping.  Make sure you get a tracking number within a reasonable period of time after you have paid.  \n\n\n\n\n\n\nRed flags that may indicate a scam:\n\n\n\n\n\n\nAsking for payment through \"friends and family\" on Paypal, especially if you don't know the person or have any solid references for them.  Paying in that way offers you no buyer protection.  It's just like giving the seller cash, so you had better trust the seller.  \n\n\n\n\n\n\nOffering an \"almost new\" pump is a big red flag.  These pumps should be at least 5 years old by now.  Do you really think a 5 year old pump should be unused and sitting in shrink wrap at this point?  Seems highly suspicious.  \n\n\n\n\n\n\nNot able to provide new pictures of the pump when requested.  Sure they posted some pictures with the ad, but what if they just downloaded them from other people's ads?  The seller should be able to furnish a couple \"new\" photos are your request.  A good one to ask for is the battery and reservoir tops so you can see the condition of those.\n\n\n\n\n\n\nPump Supplies\n\u2301\n\n\nMedtronic will not typically want to sell pump supplies directly to customers who do not have an in-warranty Medtronic pump registered in their system.  Ask your insurance about purchasing pump supplies through a durable medical equipment (DME) provider.  If you are brand new to Medtronic infusion sites, you may want to ask for help from friends to try a variety of infusion sets before purchasing a full 90-day supply of any in particular.", 
            "title": "Insulin Pump"
        }, 
        {
            "location": "/setup/requirements/pump/#insulin-pump", 
            "text": "There are a number of insulin pumps manufactured between 2006 \u2013 2012 by Medtronic which are compatible.  Compatibility has two requirements; (1) pump model and (2) firmware.   LOOP COMPATIBLE PUMPS:   The 515/715 and 522/722 pumps are all compatible.  The 523/723 and 554/754 pumps will require you to check the firmware to see if the pump is Loop compatible.  See the footnotes 3 and 4 for the required firmwares.  LOOP  NOT  COMPATIBLE PUMPS:   The 512/712 pumps are  NOT  compatible with Loop system (you can run a limited OpenAPS setup on a 512/712, however).  The Omnipod, Animas, T-slim, Medtronic 600 series and any other name of pump that you wish to insert are also  NOT  compatible.  Work is being done to make Omnipod work with Loop, but there is no predicted timeline for that.  Believe me...when it happens we will update and announce.   \n   \n     \n       \n       Insulin Pump \n     \n     \n       MM 515/715 \n       MM 522/722 2 \n       MM 523/723 3 \n       MM 554/754 4 \n     \n   \n   \n     \n       CGM \n       Dexcom G4 1   \n       \u2705 \n       \u2705 \n       \u2705 \n       \u2705 \n     \n     \n       Dexcom G5 \n       \u2705 \n       \u2705 \n       \u2705 \n       \u2705 \n     \n     \n       MM CGM \n       \u2705 \n       \u2705 \n       \u2705 \n       \u2705 \n     \n     1 . Offline access to glucose requires a Receiver with Share and the  Share2 app  to be running on the same iPhone as the Loop app is installed. Internet-dependent access via Share servers is also supported. 2 . x22 model pumps were produced before firmware security patches were implemented, therefore these models are compatible because they will have firmware 2.4A or lower only.  You can double check, but thus far all x22 pumps we have seen have compatible firmware. 3 . Firmware 2.4A or lower is required for using Closed Loop and Bolus features. 4 . Worldwide Veo (2.6A or lower) or Canadian/Australian Veo (2.7A or lower) is required for using Closed Loop and Bolus features. US version of this pump is not available.   If you want to triple check compatibility, you can check for presence/absence of \"PC connect\" in the pump.  If PC Connect is present, then the pump is NOT compatible.  You can find PC connect in the Medtronic's Main Menu, Utilities, Connect Devices.  PC Connect, if present, will be the first option showing in that menu, above the word \"Meters\".  If you do  NOT  see PC Connect there...good!", 
            "title": "Insulin Pump"
        }, 
        {
            "location": "/setup/requirements/pump/#pump-model", 
            "text": "To determine your pump model, look at the back side of your pump.  There should be a sticker on the underside of the pump.  On the right hand side of the sticker, it says REF MMT-XXXXXX       MMT       Pump Manufacturer Model (MiniMed Medtronic)\n    722       Pump Model Number\n    NA        Pump Region (NA=North America, CA=Canada/Australia, WW=Worldwide)\n    S         Pump Color (S=Smoke, L=Clear/Lucite, B=Blue, P=Pink/Purple)  Some pumps may have an \u201cL\u201d or \u201cS\u201d or \"R\" before the pump region, e.g. a model number like MMT-722LNAS.  This does not affect Loop compatibility.", 
            "title": "Pump Model"
        }, 
        {
            "location": "/setup/requirements/pump/#pump-differences", 
            "text": "The  differences between the pump models are limited.  500 vs 700 :  The difference between the Medtronic 500 series and the 700 series pumps is the size of the insulin reservoirs.  The 500 series pumps use a 180 unit reservoir, and the 700 series pumps use a 300 unit reservoir (or smaller 180 unit reservoir, if you want).  x15/x22 vs x23/x54 :  The difference between the x15 and x22 pumps versus the x23 and x54 series pumps has only a few notable mentions:   The x23/x54 pumps will allow for smaller insulin deliveries in certain situations, if the smaller scroll rate is selected in the Bolus Setup Scroll Rate menu.   Loop will have the insulin delivery automatically rounded by the pump to the units available in the pump model, and any smaller adjustments (to make up for the rounding) will be made through Loop\u2019s use of temp basals.  If you want the smaller increments of basal rates, you can still enter those values in Loop app's settings and Loop will use those values for the purposes of insulin delivery calculations.      Pump Model  Basal increments  Bolus increments  Range      515/715 and 522/722  0.05 0.1  0.1 0.1  deliveries less than 10 units greater than 10 units    523/723 and 554/754  0.025 0.05 0.1  0.025  0.05  0.1  between 0.025 to 0.975 units between 1 to 9.95 units greater than 10 units       Additionally, because of the way Loop fetches information from the pump, the x23/x54 series of pumps are slightly better at conserving battery life through the use of the MySentry packets to collect information from the pump.  x22 pumps do not use MySentry.    The x23/x54 series pumps are also faster at delivering boluses greater than 10 units.  On an x23 pump, a 13-unit bolus takes 5:00 minutes to complete.  On an x22 pump, a 13-unit bolus takes 8:40 minutes to complete.", 
            "title": "Pump Differences"
        }, 
        {
            "location": "/setup/requirements/pump/#pump-firmware", 
            "text": "If you are looking to use a 523/723 or 554/754 pump, you will need to check the firmware version for compatibility.   A pump\u2019s firmware is the internal software that runs your pump.  Older Medtronic firmware allows Loop to act as a \u201cremote control\u201d to set temp basals and report back pump data.  Newer firmware disabled that \u201cremote control\u201d access and therefore cannot be used with these DIY closed-loop systems.  There is currently no ability to downgrade a pump\u2019s firmware or replace it with older firmware.  Before you buy a used pump, make sure you are getting one with compatible firmware.  To find your pump\u2019s firmware you will need to power it up.  If the pump has not been powered on for some time (i.e., has been in storage without a battery for awhile), it will run through a start-up count and the firmware version will appear on the bottom right of the pump\u2019s screen.  Don\u2019t turn away, as the version number will only be displayed for a little while before the screen moves onto other information displays.    If the pump has been active recently or has a reservoir installed, follow these steps:    Press the   button on your pump.      Scroll down with the   button to the bottom of the status display.      Read the bottom line of the display.", 
            "title": "Pump Firmware"
        }, 
        {
            "location": "/setup/requirements/pump/#other-pumps", 
            "text": "While we all would love to have our {insert your favorite manufacturer} pump be compatible with a DIY closed-loop system like Loop, unfortunately it just isn't possible right now.  There are efforts being made to crack the software code on other pumps (like Animas and Omnipod), and when they are successful...believe me...we will tell you about it!", 
            "title": "Other pumps"
        }, 
        {
            "location": "/setup/requirements/pump/#finding-a-medtronic-pump", 
            "text": "Finding a compatible Medtronic pump is probably the most difficult part for most new Loopers.  Our suggestion:    Talk to friends in the diabetic community.    Ask your endocrinologist.      Ask at a local JDRF chapter meeting if someone has an old backup pump they'd be willing to donate to you.      Join diabetic supply groups in Facebook; both for-trade and for-sale groups.      Check Craigslist often and be willing to expand your search area to include larger cities.    Check out the  HelpAround, NextDoor, OfferUp, and/or LetGo  apps for pumps.    Search  Medwow  for used Medtronic pumps    Medwow has been fairly frustrating for most people; poor response rate, high prices.  The most success appears to come from either one-on-one discussions with fellow diabetics/doctors or using apps (Craigslist, NextDoor, LetGo, HelpAround).  If you are using Craigslist, you may wish to use an app on your iPhone to make the searching easier.  There are apps to search multiple cities at one for your keywords and set up alerts.", 
            "title": "Finding a Medtronic pump"
        }, 
        {
            "location": "/setup/requirements/pump/#safe-purchasing", 
            "text": "If you choose to purchase from a remote or unknown seller, here are some tips for safe purchasing:    Use Paypal and purchase using the \"Goods and Services\" payment option.  This costs nothing for the buyer, but the seller will lose 2.95% of the sale to Paypal fees.  Paypal offers some protection for both buyer and seller in the event of fraud.      Ask for photos of the pump.  Check to make sure the serial number of the pump on the backside matches the serial number of the pump showing in the display menu.  Ask for a short video of the pump, or at least a photo of the pump turned on, so that you can see the pump's firmware and model number.  Cracks and some wear on these pumps is expected...these pumps are not usually free of any marks.  Many people are successfully looping on pumps that have cracks and rub marks...but you may want to ask if you are concerned about any you see.      Ask for shipping that includes a tracking number.  USPS Priority Mail's smallest box is a great option.  It's only $7.15 and includes tracking.  Ask the seller to add a small bit of packing protection such as bubble wrap around the pump to keep it safe during shipping.  Make sure you get a tracking number within a reasonable period of time after you have paid.      Red flags that may indicate a scam:    Asking for payment through \"friends and family\" on Paypal, especially if you don't know the person or have any solid references for them.  Paying in that way offers you no buyer protection.  It's just like giving the seller cash, so you had better trust the seller.      Offering an \"almost new\" pump is a big red flag.  These pumps should be at least 5 years old by now.  Do you really think a 5 year old pump should be unused and sitting in shrink wrap at this point?  Seems highly suspicious.      Not able to provide new pictures of the pump when requested.  Sure they posted some pictures with the ad, but what if they just downloaded them from other people's ads?  The seller should be able to furnish a couple \"new\" photos are your request.  A good one to ask for is the battery and reservoir tops so you can see the condition of those.", 
            "title": "Safe Purchasing"
        }, 
        {
            "location": "/setup/requirements/pump/#pump-supplies", 
            "text": "Medtronic will not typically want to sell pump supplies directly to customers who do not have an in-warranty Medtronic pump registered in their system.  Ask your insurance about purchasing pump supplies through a durable medical equipment (DME) provider.  If you are brand new to Medtronic infusion sites, you may want to ask for help from friends to try a variety of infusion sets before purchasing a full 90-day supply of any in particular.", 
            "title": "Pump Supplies"
        }, 
        {
            "location": "/setup/requirements/cgm/", 
            "text": "Continuous Glucose Monitor\n\u2301\n\n\nA continuous glucose monitor (CGM) provides Loop with current blood glucose readings.  These readings allow Loop to predict what the current glucose trend is, and predict the future glucose based on carbohydrate input and basal profiles. The following are the types of CGMs compatible with Loop.  CGM readings are a required part of looping.  If your Loop is unable to retreive BG data, it will not be able to loop.\n\n\nDexcom G5 and G6 CGM \n\u2301\n\n\nDexcom G5 and G6 receives CGM data directly to the Dexcom app on your iPhone via Bluetooth.  Neither of these two systems require the use of a stand-alone receiver.\n\n\nDexcom G4 CGM with Share Receiver \n\u2301\n\n\nDexcom G4 Share system transmits CGM data from the transmitter to a Dexcom G4 Share Receiver.  The receiver, in turn, connects to the Dexcom Share2 app on your iPhone via Bluetooth.  The Share2 app uploads CGM data to the Dexcom servers.  \n\n\nMedtronic CGM \n\u2301\n\n\nThe Minimed Enlite CGM, available with the Medtronic 522/722, 523/723, and 554/754, wirelessly sends blood glucose readings to the pump.  Loop can read the Medtronic CGM data directly from the pump using the RileyLink.\n\n\nOffline Use\n\u2301\n\n\nOffline use means using Loop when there is no cell data or internet available.  Loop does not require any special setup to operate offline.  You will not need to do anything special if you go camping or find yourself out in the wilderness.  For offline Loop use, the iPhone's Bluetooth still needs to be active; and for Dexcom system's, the Share2 or G5 Mobile app also still needs to be open (but don't have to be actively \"sharing\" to the internet).  If you put your iPhone into Airplane mode, remember to turn Bluetooth back on to keep your Loop running.  If your offline use is failing, chances are you have forgotten to update your transmitter ID in Loop settings when you changed transmitters.\n\n\nDexcom Servers\n\u2301\n\n\nIn some instances, the Loop may fail to eavesdrop on the Bluetooth transmissions of the CGM systems.  When that happens, the Loop can pull directly from Dexcom Servers to get the data (assuming you have entered your Share account information in the Loop settings).  When Loop is operating in this mode, you will see a small cloud in the CGM reading in the Loop app.  Operating in this mode requires a working internet or cell connection.\n\n\nCGMs not natively supported in Loop\n\u2301\n\n\nLibre (with Bluecon or Miao Miao), Eversense, Medtronic Guardian sensors, etc.  Yes, there are other CGM systems available out there.  Loop does not natively support those CGMs.  If you would like to use one of those alternate CGMs and Loop...you will need to look into third-party CGM systems or bridging software to allow Loop to access the data.  These docs do not cover the alternate methods of unsupported CGM systems.", 
            "title": "CGM"
        }, 
        {
            "location": "/setup/requirements/cgm/#continuous-glucose-monitor", 
            "text": "A continuous glucose monitor (CGM) provides Loop with current blood glucose readings.  These readings allow Loop to predict what the current glucose trend is, and predict the future glucose based on carbohydrate input and basal profiles. The following are the types of CGMs compatible with Loop.  CGM readings are a required part of looping.  If your Loop is unable to retreive BG data, it will not be able to loop.", 
            "title": "Continuous Glucose Monitor"
        }, 
        {
            "location": "/setup/requirements/cgm/#dexcom-g5-and-g6-cgm", 
            "text": "Dexcom G5 and G6 receives CGM data directly to the Dexcom app on your iPhone via Bluetooth.  Neither of these two systems require the use of a stand-alone receiver.", 
            "title": "Dexcom G5 and G6 CGM "
        }, 
        {
            "location": "/setup/requirements/cgm/#dexcom-g4-cgm-with-share-receiver", 
            "text": "Dexcom G4 Share system transmits CGM data from the transmitter to a Dexcom G4 Share Receiver.  The receiver, in turn, connects to the Dexcom Share2 app on your iPhone via Bluetooth.  The Share2 app uploads CGM data to the Dexcom servers.", 
            "title": "Dexcom G4 CGM with Share Receiver "
        }, 
        {
            "location": "/setup/requirements/cgm/#medtronic-cgm", 
            "text": "The Minimed Enlite CGM, available with the Medtronic 522/722, 523/723, and 554/754, wirelessly sends blood glucose readings to the pump.  Loop can read the Medtronic CGM data directly from the pump using the RileyLink.", 
            "title": "Medtronic CGM "
        }, 
        {
            "location": "/setup/requirements/cgm/#offline-use", 
            "text": "Offline use means using Loop when there is no cell data or internet available.  Loop does not require any special setup to operate offline.  You will not need to do anything special if you go camping or find yourself out in the wilderness.  For offline Loop use, the iPhone's Bluetooth still needs to be active; and for Dexcom system's, the Share2 or G5 Mobile app also still needs to be open (but don't have to be actively \"sharing\" to the internet).  If you put your iPhone into Airplane mode, remember to turn Bluetooth back on to keep your Loop running.  If your offline use is failing, chances are you have forgotten to update your transmitter ID in Loop settings when you changed transmitters.", 
            "title": "Offline Use"
        }, 
        {
            "location": "/setup/requirements/cgm/#dexcom-servers", 
            "text": "In some instances, the Loop may fail to eavesdrop on the Bluetooth transmissions of the CGM systems.  When that happens, the Loop can pull directly from Dexcom Servers to get the data (assuming you have entered your Share account information in the Loop settings).  When Loop is operating in this mode, you will see a small cloud in the CGM reading in the Loop app.  Operating in this mode requires a working internet or cell connection.", 
            "title": "Dexcom Servers"
        }, 
        {
            "location": "/setup/requirements/cgm/#cgms-not-natively-supported-in-loop", 
            "text": "Libre (with Bluecon or Miao Miao), Eversense, Medtronic Guardian sensors, etc.  Yes, there are other CGM systems available out there.  Loop does not natively support those CGMs.  If you would like to use one of those alternate CGMs and Loop...you will need to look into third-party CGM systems or bridging software to allow Loop to access the data.  These docs do not cover the alternate methods of unsupported CGM systems.", 
            "title": "CGMs not natively supported in Loop"
        }, 
        {
            "location": "/setup/requirements/rileylink/", 
            "text": "RileyLink\n\u2301\n\n\nThe RileyLink is an open-source hardware device that can bridge Bluetooth Low Energy (BLE) to 916MHz wireless communication. What does that mean to you? It means RileyLink is the communication highway between your insulin pump, CGM, and iPhone.\n\n\nLoop will not work without the RileyLink.\n\n\n\n\nThe RileyLink is available as a set of PCB files and software, with instructions on how to build your own RileyLink hardware module.  All this can be found here: \nRileyLink Github\n\nIf you aren\u2019t up to the task of building your own RileyLink (and most of us aren\u2019t), community members periodically do a production run of RileyLinks. You can place an order here: \nRileyLink order site\n\n\nAssembling RileyLink\n\u2301\n\n\nYour RL will come with the battery disconnected and the parts not already inside the case.  It will be up to you to put the RL in the case and attach the battery.\n\n\nMake sure the battery is well plugged into the connection.  Line up the little ridge approriately, and push fairly firmly to get the connection in tight.  Poor battery cable connection can make the Loop communications fail.  See photos below for example.\n\n\n\n\n\n\nRileyLink with loose battery cable.\n\n\n\n\n\n\n\n\n\nRileyLink with properly secured battery cable.\n\n\n\n\n\nFinally, the board and the battery fit into the slim case fairly tightly as well.  Click on the image below to watch a helpful \nassembly video\n.\n\n\n\n\nWaiting for RileyLink\n\u2301\n\n\nYes, waiting for RileyLink to arrive is extremely difficult.  PLEASE be patient, since Loop CANNOT work without RileyLink.\n\n\nIf you're really dying to do something while RileyLink ships, consider these things below.\n\n\nFIRST AND FOREMOST:  Get used to Medtronic pump and start using it before Loop.  Sometimes switching pumps will lead to a change in your settings (basals, boluses, etc) simply by the way the new cannula delivers insulin.  It's a great idea to use your Medtronic pump and sets before you ever begin Loop so that you can have one less variable when you do start looping.  At least you can check if you need to adjust basals, etc when you change to Medtronic pumping.  Same with Dexcom.  If you are new to Dexcom, start using it before Loop.  Get to familiar with things like compression lows, sensor variability, and calibration timing before Loop use.\n\n\nBut, if you're familiar with your medtronic pump and dexcom, here's some ideas:\n\n\n\n\nProgram your pump with your basal patterns\n\n\nMake the pump settings required for Loop to work\n\n\nUpdate your iPhone's iOS, if needed, and back it up\n\n\nUpdate your Apple's OS X, if needed.\n\n\nUpdate your Apple Watch's OS\n\n\nDownload Xcode from the Apple App Store on your Apple computer (\nthis takes more time than you'd expect, it is a large download\n)\n\n\nSign up for a Developer Account, if you intend to.  Confirm your enrollment by checking your email afterwards.\n\n\nDownload Loop source code and get started with Loop building\n\n\nInstall Carthage\n\n\nMake customizations\n\n\nBuild Loop app onto your iPhone\n\n\nFill in the pump settings in your Loop app\n\n\nSet up a Nightscout site or update your existing site (optional)\n\n\nBookmark the Loop Docs page for future reference\n\n\nJoin \nGitter Loop channel\n and/or \nthe Looped Facebook Group\n\n\n\n\nBUT, then you must wait.  You can't go any further with Loop operations until you get the RileyLink.  However, if you do all those things above while you wait...you will be ready to go as soon as the postman knocks on your door with the delivery.", 
            "title": "RileyLink"
        }, 
        {
            "location": "/setup/requirements/rileylink/#rileylink", 
            "text": "The RileyLink is an open-source hardware device that can bridge Bluetooth Low Energy (BLE) to 916MHz wireless communication. What does that mean to you? It means RileyLink is the communication highway between your insulin pump, CGM, and iPhone.  Loop will not work without the RileyLink.   The RileyLink is available as a set of PCB files and software, with instructions on how to build your own RileyLink hardware module.  All this can be found here:  RileyLink Github \nIf you aren\u2019t up to the task of building your own RileyLink (and most of us aren\u2019t), community members periodically do a production run of RileyLinks. You can place an order here:  RileyLink order site", 
            "title": "RileyLink"
        }, 
        {
            "location": "/setup/requirements/rileylink/#assembling-rileylink", 
            "text": "Your RL will come with the battery disconnected and the parts not already inside the case.  It will be up to you to put the RL in the case and attach the battery.  Make sure the battery is well plugged into the connection.  Line up the little ridge approriately, and push fairly firmly to get the connection in tight.  Poor battery cable connection can make the Loop communications fail.  See photos below for example.    RileyLink with loose battery cable.     RileyLink with properly secured battery cable.   Finally, the board and the battery fit into the slim case fairly tightly as well.  Click on the image below to watch a helpful  assembly video .", 
            "title": "Assembling RileyLink"
        }, 
        {
            "location": "/setup/requirements/rileylink/#waiting-for-rileylink", 
            "text": "Yes, waiting for RileyLink to arrive is extremely difficult.  PLEASE be patient, since Loop CANNOT work without RileyLink.  If you're really dying to do something while RileyLink ships, consider these things below.  FIRST AND FOREMOST:  Get used to Medtronic pump and start using it before Loop.  Sometimes switching pumps will lead to a change in your settings (basals, boluses, etc) simply by the way the new cannula delivers insulin.  It's a great idea to use your Medtronic pump and sets before you ever begin Loop so that you can have one less variable when you do start looping.  At least you can check if you need to adjust basals, etc when you change to Medtronic pumping.  Same with Dexcom.  If you are new to Dexcom, start using it before Loop.  Get to familiar with things like compression lows, sensor variability, and calibration timing before Loop use.  But, if you're familiar with your medtronic pump and dexcom, here's some ideas:   Program your pump with your basal patterns  Make the pump settings required for Loop to work  Update your iPhone's iOS, if needed, and back it up  Update your Apple's OS X, if needed.  Update your Apple Watch's OS  Download Xcode from the Apple App Store on your Apple computer ( this takes more time than you'd expect, it is a large download )  Sign up for a Developer Account, if you intend to.  Confirm your enrollment by checking your email afterwards.  Download Loop source code and get started with Loop building  Install Carthage  Make customizations  Build Loop app onto your iPhone  Fill in the pump settings in your Loop app  Set up a Nightscout site or update your existing site (optional)  Bookmark the Loop Docs page for future reference  Join  Gitter Loop channel  and/or  the Looped Facebook Group   BUT, then you must wait.  You can't go any further with Loop operations until you get the RileyLink.  However, if you do all those things above while you wait...you will be ready to go as soon as the postman knocks on your door with the delivery.", 
            "title": "Waiting for RileyLink"
        }, 
        {
            "location": "/setup/requirements/computer/", 
            "text": "Apple Computer\n\u2301\n\n\nApple regularly updates their iPhone software (iOS), computer software (macOS) and Xcode application.  Loop's team of developers works hard to update Loop code as the new Apple updates are pushed out.\n\n\n\n\nThe most recent version of iOS is 11.4.1\n\n\nThe most recent version of macOS is 10.13.6\n\n\nThe most recent version of Xcode is 9.4.1\n\n\nThe most recent version of Loop is 1.5.9\n\n\nThe most recent version of watchOS is 4.3.2\n\n\n\n\nThe way Apple updates tend to happen is that one equipment's update will tend to require updating other pieces of Apple equipment.  For example, if you update your iOS on the iPhone, you may need an updated version of Xcode to install a new Loop app onto your phone.  And the new Xcode will require the volunteer developers of Loop to make updates to the Loop source code.  Finally, new Xcode updates also frequently come with macOS updates on your computer.\n\n\nCurrently, you will need at a minimum iOS 11.4, Xcode 9.4 and High Sierra macOS 10.13.4 to be able to build Loop 1.5.9.  Older versions of macOS or Xcode or iOS are not compatible with the current Loop version.\n\n\nWe do not recommend installing beta releases of Xcode, iOS or macOS on devices running Loop.  If you are considering an update to your Loop app, check to make sure your computer and Xcode have any available updates installed prior to building the new app.\n\n\nComputer access is only required when you are initially installing the Loop app, updating to a newer release, or making changes to the underlying Loop code.  You do NOT need access to an Apple computer in order to troubleshoot or change Loop settings, such as basal profiles or carb ratios.\n\n\nWhere can you find your computer\u2019s macOS version?  Click on the Apple icon in the upper left corner of your Mac\u2019s display.  Select \u201cAbout This Mac\u201d from the dropdown menu, and it will display the macOS version number.\n\n\n\n\n\n\n\n\n\nIf your computer is running an out-of-date macOS, you can read whether you can upgrade to the necessary macOS version \nhere\n.  The degree to which you can upgrade an older Apple computer will depend on the age and model of the computer.", 
            "title": "Computer"
        }, 
        {
            "location": "/setup/requirements/computer/#apple-computer", 
            "text": "Apple regularly updates their iPhone software (iOS), computer software (macOS) and Xcode application.  Loop's team of developers works hard to update Loop code as the new Apple updates are pushed out.   The most recent version of iOS is 11.4.1  The most recent version of macOS is 10.13.6  The most recent version of Xcode is 9.4.1  The most recent version of Loop is 1.5.9  The most recent version of watchOS is 4.3.2   The way Apple updates tend to happen is that one equipment's update will tend to require updating other pieces of Apple equipment.  For example, if you update your iOS on the iPhone, you may need an updated version of Xcode to install a new Loop app onto your phone.  And the new Xcode will require the volunteer developers of Loop to make updates to the Loop source code.  Finally, new Xcode updates also frequently come with macOS updates on your computer.  Currently, you will need at a minimum iOS 11.4, Xcode 9.4 and High Sierra macOS 10.13.4 to be able to build Loop 1.5.9.  Older versions of macOS or Xcode or iOS are not compatible with the current Loop version.  We do not recommend installing beta releases of Xcode, iOS or macOS on devices running Loop.  If you are considering an update to your Loop app, check to make sure your computer and Xcode have any available updates installed prior to building the new app.  Computer access is only required when you are initially installing the Loop app, updating to a newer release, or making changes to the underlying Loop code.  You do NOT need access to an Apple computer in order to troubleshoot or change Loop settings, such as basal profiles or carb ratios.  Where can you find your computer\u2019s macOS version?  Click on the Apple icon in the upper left corner of your Mac\u2019s display.  Select \u201cAbout This Mac\u201d from the dropdown menu, and it will display the macOS version number.     If your computer is running an out-of-date macOS, you can read whether you can upgrade to the necessary macOS version  here .  The degree to which you can upgrade an older Apple computer will depend on the age and model of the computer.", 
            "title": "Apple Computer"
        }, 
        {
            "location": "/setup/requirements/iphone/", 
            "text": "iPhone\n\u2301\n\n\nLoop will run on on any iPhone that is running iOS 11.1 or later.\n\n\n\n\n\n\niPhone X\n\n\n\n\n\n\niPhone 8/8+\n\n\n\n\n\n\niPhone 7/7s+\n\n\n\n\n\n\niPhone 6/6+/6s/6s+/SE\n\n\n\n\n\n\niPhone 5s \n\n\n\n\n\n\nWhere can you find your iPhone\u2019s iOS version?  Go to your iPhone\u2019s Settings\nGeneral\nAbout.  The iOS will be listed under \u201cVersion\u201d", 
            "title": "iPhone"
        }, 
        {
            "location": "/setup/requirements/iphone/#iphone", 
            "text": "Loop will run on on any iPhone that is running iOS 11.1 or later.    iPhone X    iPhone 8/8+    iPhone 7/7s+    iPhone 6/6+/6s/6s+/SE    iPhone 5s     Where can you find your iPhone\u2019s iOS version?  Go to your iPhone\u2019s Settings General About.  The iOS will be listed under \u201cVersion\u201d", 
            "title": "iPhone"
        }, 
        {
            "location": "/setup/requirements/appledev/", 
            "text": "Apple Developer Account\n\u2301\n\n\nThe \nApple Developer Program\n is Apple's system to provide the \ntools and resources\n for building, sharing, and using apps for Apple products.  Members of Apple's Developer Program can test apps on their own devices prior to submitting the App Store for distribution or sale.  Developers also get access to beta releases of new OS and iOS versions.  \n\n\nThe Loop app is not available for download in the App Store.  It needs to be built and installed by the individual users.  This means Loop users need to enroll as an individual (not an organization) in the Apple Developer Program in order to install the Loop app on their iPhone.  There are two types of individual \nenrollment in the Developer Program\n; free and paid.  You will need to have an Apple ID to sign up for in the Apple Developer Program.\n\n\nFree membership\n\u2301\n\n\nFree membership comes with an important restriction.  While you can build the Loop app onto your iPhone, the app will expire after 7 days and need to be rebuilt in order to work again.  This means, every 7 days you will need access to an Apple computer, Xcode application, and your iPhone to rebuild the app.\n\n\nYou cannot rebuild the app on day 6 and expect to avoid downtime.  The same app cannot be rebuilt earlier than the 7 days...it will still expire on the 7th day.  You will know your app is expired by the fact that it simply won't open after 7 days.  When you click on it, it will momentarily give you a white screen and then immediately go back to your main iPhone screen.  \n\n\nFor free memberships, you are also limited to building 10 apps within a 7-day period.  Each new Main App Bundle Identifier that you use will \"count\" towards that limit.\n\n\nPaid membership\n\u2301\n\n\nPaid membership is $99 per year.  It allows you to build the Loop app and it will remain active for the entire year.  You only need to rebuild the app if you decide you are interested in updating for new features that may be released in subsequent Loop versions.  If you have multiple T1Ds in your household and are building multiple Loop apps, you only need one paid membership account.\n\n\nLicense Agreement\n\u2301\n\n\nPeriodically, Apple will have updates to their Developer license agreements.  Your Loop app will fail to sign properly until your accept the new license agreement.  If you see the warning sign under your app signing, go to your \nDeveloper Account\n, sign in, and accept the new terms.\n\n\nApp IDs\n\u2301\n\n\nMany Loop users start with a free developer account as they test-drive the Loop.  When you build the app, Xcode will be identifying that specific build of the app using a unique \nMain App Bundle Identifier\n based on your Developer membership.  That Main App Bundle Identifier will change when you switch to a paid account provisioning profile.  Why is this worth mentioning?  If you start with a free account and build Loop...when you switch to a paid account and build Loop, you will need to re-enter all your Loop settings (basal rates, ISF, carb ratios, etc.) as this will be a new, separate Loop app on your phone.  After getting your new Loop app setup, you should delete your old app from your iPhone that was based on the free developer account to avoid any conflicts.\n\n\nWhen you build the Loop app in Xcode, you will select a signing \"team\" and Xcode will automatically generate a Provisioning Profile to \"sign\" the app...this is Apple's way of tracking the validity and safety of the app.  Free developer accounts will have a signing team that includes a \"(Personal Team)\" designation in the name.  Paid developer accounts will not have \"(Personal Team)\" in the name.  \n\n\n\n\n\n\n\n\n\nMultiple Loop apps\n\u2301\n\n\nYou can have multiple Loop apps built onto the same iPhone.  However, having multiple Loop apps on a single phone can lead to unexpected conflicts.  For smooth Looping, we recommend having a single Loop app on an iPhone.", 
            "title": "Apple Developer"
        }, 
        {
            "location": "/setup/requirements/appledev/#apple-developer-account", 
            "text": "The  Apple Developer Program  is Apple's system to provide the  tools and resources  for building, sharing, and using apps for Apple products.  Members of Apple's Developer Program can test apps on their own devices prior to submitting the App Store for distribution or sale.  Developers also get access to beta releases of new OS and iOS versions.    The Loop app is not available for download in the App Store.  It needs to be built and installed by the individual users.  This means Loop users need to enroll as an individual (not an organization) in the Apple Developer Program in order to install the Loop app on their iPhone.  There are two types of individual  enrollment in the Developer Program ; free and paid.  You will need to have an Apple ID to sign up for in the Apple Developer Program.", 
            "title": "Apple Developer Account"
        }, 
        {
            "location": "/setup/requirements/appledev/#free-membership", 
            "text": "Free membership comes with an important restriction.  While you can build the Loop app onto your iPhone, the app will expire after 7 days and need to be rebuilt in order to work again.  This means, every 7 days you will need access to an Apple computer, Xcode application, and your iPhone to rebuild the app.  You cannot rebuild the app on day 6 and expect to avoid downtime.  The same app cannot be rebuilt earlier than the 7 days...it will still expire on the 7th day.  You will know your app is expired by the fact that it simply won't open after 7 days.  When you click on it, it will momentarily give you a white screen and then immediately go back to your main iPhone screen.    For free memberships, you are also limited to building 10 apps within a 7-day period.  Each new Main App Bundle Identifier that you use will \"count\" towards that limit.", 
            "title": "Free membership"
        }, 
        {
            "location": "/setup/requirements/appledev/#paid-membership", 
            "text": "Paid membership is $99 per year.  It allows you to build the Loop app and it will remain active for the entire year.  You only need to rebuild the app if you decide you are interested in updating for new features that may be released in subsequent Loop versions.  If you have multiple T1Ds in your household and are building multiple Loop apps, you only need one paid membership account.", 
            "title": "Paid membership"
        }, 
        {
            "location": "/setup/requirements/appledev/#license-agreement", 
            "text": "Periodically, Apple will have updates to their Developer license agreements.  Your Loop app will fail to sign properly until your accept the new license agreement.  If you see the warning sign under your app signing, go to your  Developer Account , sign in, and accept the new terms.", 
            "title": "License Agreement"
        }, 
        {
            "location": "/setup/requirements/appledev/#app-ids", 
            "text": "Many Loop users start with a free developer account as they test-drive the Loop.  When you build the app, Xcode will be identifying that specific build of the app using a unique  Main App Bundle Identifier  based on your Developer membership.  That Main App Bundle Identifier will change when you switch to a paid account provisioning profile.  Why is this worth mentioning?  If you start with a free account and build Loop...when you switch to a paid account and build Loop, you will need to re-enter all your Loop settings (basal rates, ISF, carb ratios, etc.) as this will be a new, separate Loop app on your phone.  After getting your new Loop app setup, you should delete your old app from your iPhone that was based on the free developer account to avoid any conflicts.  When you build the Loop app in Xcode, you will select a signing \"team\" and Xcode will automatically generate a Provisioning Profile to \"sign\" the app...this is Apple's way of tracking the validity and safety of the app.  Free developer accounts will have a signing team that includes a \"(Personal Team)\" designation in the name.  Paid developer accounts will not have \"(Personal Team)\" in the name.", 
            "title": "App IDs"
        }, 
        {
            "location": "/setup/requirements/appledev/#multiple-loop-apps", 
            "text": "You can have multiple Loop apps built onto the same iPhone.  However, having multiple Loop apps on a single phone can lead to unexpected conflicts.  For smooth Looping, we recommend having a single Loop app on an iPhone.", 
            "title": "Multiple Loop apps"
        }, 
        {
            "location": "/setup/build/installing/", 
            "text": "Overview\n\u2301\n\n\nThe overall installation process is pretty simple.  Loop is written in code that is stored online; available for us to download for free.  In order to compile all that code into a useable app on your iPhone, we need to use a free Apple program called Xcode.  Xcode takes all that code \n makes an app...but Apple is particular about apps and installation on devices.  So, in order to put this app on our iPhones, we have to enroll in Apple's Developer Program.  Once you enroll as a developer, you will be able to \"sign\" the Loop app in Xcode so that it will properly install onto your iPhone.\n\n\nWhile all of this is straight forward...I'll tell you some hints upfront to save time.\n\n\n\n\nCheck your watchOS, iPhone OS, macOS, Xcode first to see if they need updates.  Currently you'll need to have these versions (or newer) watchOS 4.3, iOS 11.1, macOS 10.13.4 High Sierra, and Xcode 9.4.\n\n\nDownloading Xcode can take hours depending on your internet connection speed.  You can do that ahead of time if you want to save yourself some waiting when you're ready to build.\n\n\nApple watches need to be paired with the iPhone BEFORE the Loop app is built onto the phone in order to have the Loop on the watch, too.  If you pair a new Apple watch later, you'll have to rebuild the Loop app onto the iPhone again, before the watch will work with Loop functions.\n\n\n\n\nSetup your Apple Computer\n\u2301\n\n\nVerify macOS\n\u2301\n\n\nYou need to be running macOS High Sierra, at least version 10.13.4, so verify by clicking the apple logo in your computer display's upper left corner and selecting \nAbout this Mac\n.\n\n\n\n\n\n\n\n\n\nIf your macOS is not High Sierra, click on the \nSoftware Update\n button and update to High Sierra.  If your computer is older than late 2009/2010 (depending on computer model), you may not be able to update to Sierra.  You can check High Sierra compatibility \nhere\n.\n\n\nInstall Homebrew\n\u2301\n\n\nHomebrew is a program that will allow us to install the needed packages to build Loop.  Open the Terminal application on your computer.  It is located in the Applications folder, and then look in the Utilities subfolder for the Terminal application.\n\n\n\n\nCopy and paste the line below into Terminal prompt.  Press return after you paste it in.\n\n\n\n\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\n\n\n\nThere will be a prompt asking if you want to continue.  Press return to continue, then it may prompt for your password.  Enter your computer user password (don't worry, Terminal app doesn't show keystrokes when you enter passwords, but it is still reading your typing).  Wait while the script does its thing...you\u2019ll see info scroll by and then it will pause for awhile.  Eventually, it will be done and you\u2019ll see something that says \u201cInstallation successful\u201d and you\u2019ll have a ready Terminal prompt again.\n\n\n\n\n\n\n\n\n\n\n\nYou can close the Terminal application now.  You\u2019re done with it.  You do not need to do these steps again for any subsequent Loop builds.\n\n\nSetup your Apple Developer Account\n\u2301\n\n\nIn order to build your own copy of the Loop app onto your iPhone, you will need an Apple developer account.  You will have two options for your individual account; free or paid.\n\n\nIf you decide to enroll in a \nFREE\n developer account, here's what you need to know:\n\n\n\n\nLoop apps signed with a free developer team will expire after 7 days.  On the 7th day, your Loop app will simply turn white when you open it and then immediately close.  To rebuild the Loop app, you will have to find a computer and rebuild the app onto your iPhone again.  You cannot rebuild the app on day 5 (when it is convenient, for example)...hoping to reset the 7-day clock.  The app will still expire on the 7th day from when it was first signed and created.\n\n\nIf you decide to switch to a paid account after trying out the free account, you will need to rebuild your Loop app with a new main app bundle identifier (this will make sense when you go through the rest of these instructions...just make a mental note for now) and sign with the new team name.\n\n\n\n\nTo activate enrollment in a free developer account, you simply need to add your Apple ID to the Xcode application's Preferences in the Accounts tab, as outlined in the Xcode section below.  (Note: The Apple ID you use to sign up for the developer account does not need to be the same Apple ID as the Looping iPhone uses, for example parent's installing Loop on kid's iPhone.  Typically for the developer account, use the Apple ID of the person who will be doing the Loop app building.)  You don't have to specifically go into the Apple Developer Program website to enroll...Xcode automatically amends your Apple ID to include the free developer signing.  Once you add your Apple ID, you will see a team name listed, like the screenshot below, with a \n(personal team)\n designation to indicate that is a free developer team.\n\n\n\n\n\n\n\n\n\nIf you decide to enroll in a \nPAID\n developer account, here's what you need to know:\n\n\n\n\nLoop apps signed with a paid developer team will last for a full year.\n\n\nThe paid developer account is $99 per year and is default set to auto-renew annually.  You can change that selection in your developer account settings at any time.\n\n\nIf your household has multiple T1D Loop users, only one developer account is needed.  That one developer account can be used to sign multiple Loop apps.\n\n\n\n\nTo activate a paid account, go to the \nApple Developer website\n to sign-up for your individual account.  (Note: The Apple ID you use to sign up for the developer account does not need to be the same Apple ID as the Looping iPhone uses, for example parent's installing Loop on kid's iPhone.  Typically for the developer account, use the Apple ID of the person who will be doing the Loop app building.)   After you enroll, make sure you look for a confirmation email.  Apple says it can take up to 24 hours to confirm and setup a new Apple developer account, however some people have had the process only take minutes.  It can vary.\n\n\nPeriodically, Apple will update the license agreement for the Developer Program.  When that happens, you'll need to login to your developer account and accept the new license agreement before you can sign a new/updated Loop app again.\n\n\nSetup Xcode\n\u2301\n\n\nOpen the App Store application on your computer.  Search for Xcode and click on the link to download/install Xcode for free.  The most current version of Xcode is 9.4.1.  The file size is fairly large so expect about 45 minutes, or even multiple hours, to download depending on your internet speed.  You will need version Xcode 9.4 at least to build the current Loop app.  If you have a previous installation of Xcode, please make sure to check for updates first, before building Loop.\n\n\n\n\n\n\n\n\n\nOnce you have Xcode downloaded, open it from your Applications folder.  There may be a short delay as Xcode installs new Command Line Tools that the app uses.  Once Xcode is open and ready, we will start with adding your new developer account to Xcode.\n\n\n\n\nIMPORTANT NOTES: Do not stop the installation of Command Line Tools, that is an important installation for Xcode to work properly.  Additionally, if you see a pop-up window later during this Loop building process asking for \nKeychain Access\n, answer \nAlways Allow\n.  This will let Xcode have access to the signing certificates that it needs for your Apple Developer account.  You will have to enter a password to allow keychain access.  That password is the admin password for your computer.\n\n\n\n\nGo to the Xcode main menu (top left of your screen) and select Preferences from the Xcode dropdown menu.  Then, click on the \u201cAccounts\u201d tab in the Preferences window and then press the \n+\n in the lower left corner to add an Apple ID account.\n\n\n\n\n\n\n\n\n\nIf you are establishing a free developer account, you will simply enter your Apple ID in this section and Xcode will automatically create your free developer account. If you enrolled in the paid account, enter the Apple ID of the paid developer account.  If you never enrolled in the free account, you will not have a (personal team) showing.  The screenshot is what will appear if you have used both types of enrollment under the same Apple ID.\n\n\n\n\n\n\n\n\n\nFinally, we are going to turn on Line Numbers to make some later steps in the build process easier.  Go to the \"Text Editing\" tab in the top of the Preferences window.  Click the box to show Line Numbers.\n\n\n\n\n\n\n\n\n\nYou are now done setting up your Xcode environment.  Great job!  You will not need to redo the account setup steps on any subsequent builds or updates of your Loop app.  Xcode will remember these settings.\n\n\nDownload Loop Source Code\n\u2301\n\n\nNext, you\u2019ll need to obtain the Loop\u2019s source code in order to build the app on your computer.  Click on ONE of the links below to download your Loop source code.  \nWe recommend Master branch source code be used to build your Loop.\n\n\nMaster vs Dev?  What is the difference? The Loop source code resides in \nGitHub\n within a repository.  A repository is kind of like a project's bookshelf, holding various books versions (aka branches) of a project.  The master branch is considered a stable version.  Any new features or options are first tested in a dev (short for \"development\") branch of the Loop.  New or inexperienced users should not build from the dev branch of Loop.  So if you hear of \"new features in dev\", these are things that may be eventually merged into the master branch once any bugs are worked out.\n\n\n\n\n\nLoop: Master branch source code\n\n\nLoop: Dev branch source code\n\n\n\n\n\n\nIMPORTANT NOTES: Best practice is to leave your Loop source code in your Downloads folder.  If you store your Loop code a different folder than Downloads (such as your Documents folder or Desktop), make sure the specified folder is \nnot\n an iCloud drive.  Storing your Loop code in an iCloud drive folder will prevent Loop from building successfully.  How do you know if a folder is an iCloud drive?  Check your System Preferences.  If your System Preferences for iCloud is set as shown below, your Documents and Desktop folders are iCloud drives and \nNOT\n appropriate places to save your Loop download.\n\n\n\n\n\n\nDepending on your browser and settings, your Loop download may or may not automatically unzip.  If it does not unzip automatically, you can right-click on the zip file and choose to \"Open With\" Archive Utility.  This will create a blue folder called \nLoop-master\n.  HOWEVER, if you already have an existing \nLoop-master\n folder from a previous download, the name of the next download will be something like \nLoop-master (1)\n.  The problem with that folder name is that it contains a space...and spaces in the name will cause your Loop build to fail.  So, either delete old copies of Loop before downloading/unzipping or rename the folder(s) to ensure that NO SPACES are in the folder name.\n\n\n\n\n\n\n\n\n\nInstalling Loop using Xcode\n\u2301\n\n\nHere\u2019s where the fun really begins.  You\u2019re about to build your Loop app.\n\n\nGo to your Downloads folder, open the \nLoop-master\n folder (or whatever you named it...double check that the folder does not contain any spaces in the folder name, as described above), and double click on Loop.xcodeproj.\n\n\n\n\n\n\n\n\n\nA warning may appear asking if you really want to open it, click Open.  Xcode will get itself organized and installed, this may take a few minutes.  The first time you load Xcode you may also be asked about allowing keychain access (and yes, always allow...if the window pops up).  Xcode will eventually open the Loop project...the first open of Xcode just takes a little longer than subsequent uses.\n\n\n\n\n\n\n\n\n\nOnce Xcode has finished indexing, the Loop project's various folders and files will appear in the far left column.  At the very top, click on the blue Loop main project folder.  Then click on the box in the middle screen to reveal the targets' column.  The four targets we will sign in the upcoming steps are now easily viewable.\n\n\n\n\n\n\n\n\n\nConnect your iPhone via cable to the computer, select your iPhone from the very top of the drop down list.  Your \niPhone\u2019s personal name\n should be at the top of the list.  Don't accidentally select the generic iOS simulators listed below your iPhone's name.  \n\n\n\n\nHelpful Tip\n\n\nIf your iPhone has a lock enabled, Xcode will not be able to install Loop app once your phone locks during the build progress.  Please temporarily disable the lock until you finish building Loop app.  Go to your iPhone Settings \n Display \n Brightness \n Auto-Lock and set it to \nNever\n.  You can reset your lock once Loop is done building onto the phone.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThese next steps are usually only needed on the first Loop build; they can be skipped on subsequent builds.\n\n\n\n\nIf this is the first time your iPhone has been plugged in to this computer, you will need to open the iPhone and select \"Trust this Computer\" before your device will be useable in the menu selection.\n\n\nIf this is the first time you are building an app onto this iPhone using this particular Apple developer account, you will need to \u201cregister the device\u201d to your developer account.  The device registration screen, as shown below, may appear when your iPhone is selected.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOnce you select your device (your iPhone's name), let's start signing our four targets.  We will start with the Loop target, the first one on the target list.  Under the \"Signing\" area, select the dropdown menu where it currently says \"none\".  Choose your team that you'd like to sign with.  If you select a team name with (personal team), your app will expire after 7 days.  If you select a team name without that (personal team), your app will last a full year.  If you never signed up for a free developer account, you will not have a (personal team) showing.  Make sure you keep the \"automatically manage signing\" box checked above the team selection area.\n\n\n\n\n\n\n\n\n\nOnce you choose your signing team, Xcode will automatically generate provisioning profiles and signing certificates.  If this is the first time you are building on this iPhone with this developer account, you may again be prompted to register the device.  Simply click on the \"Register Device\" button to confirm.\n\n\n\n\n\n\n\n\n\nA successfully signed target will have a provisioning profile and signing certificate similar to the screenshot below.  Click on each of the three remaining targets, and repeat the signing steps by choosing the same team name as you selected in the first target.\n\n\n\n\n\n\n\n\n\n\n\nDo you want customizations before you finish building?\n\n\nNew Loop users\n: Customizations are not a required part of any Loop build.  As you gain experience in how you use your Loop app, you may want to customize some of the features.  You can always update your Loop app to add customizations at a later time.  Really though, building with the standard, default installation is JUST FINE.\n\nIf you want any custom configurations to your Loop or Watch apps, now is the time to make them before you finish with the last step of Loop installation on your iPhone.  Follow the step-by-step instructions on the \nCode Customizations\n page.  When you\u2019ve completed those customizations, please return here and follow the next steps to finish the installation of Loop.\n\n\n\n\n\n\nHave you paired your Apple Watch already?\n\n\nNew Apple Watch users\n: If you have an unopened Apple watch and want to use it with Loop, first pair the watch with the iPhone before continuing to the next steps.  If you get a new watch after building the Loop app, you'll need to redo your Loop build. (Don't worry, it's as easy as pressing play on your saved Loop project.)\n\n\nExisting Apple Watch users\n: Please update your watchOS prior to building Loop app.  The current version of Loop requires watchOS 4 or newer.\n\n\n\n\nAll done with any customizations? Have your Apple watch paired and updated?  Let\u2019s finish the installation of the Loop app onto your iPhone.  Double check to make sure your iPhone's name is still selected and then press the \u201cplay\u201d button (or build button) to start Xcode on its way.  You\u2019ll see the progression of the build in the status window.  New builds can take about 15-40 minutes depending on the speed of the computer and internet.  Just be patient.  Subsequent builds from the same download folder will be much faster.\n\n\n\n\n\n\n\n\n\nIf the build is successful, your brand new Loop appswill have a screen open immediately on the iPhone asking about allowing Loop notifications and Health App access. Allow Loop to send you notifications. In the next screen that follows that, click on the \nTurn All Categories On\n line and then click \nAllow\n in the upper right corner.\n\n\n\n\nIf you encountered any build errors that prevented your Loop from installing on your phone, please review the \nBuild Errors\n page.  Read your error message(s) and follow the directions for repairing the error.\n\n\n\n\nFirst time builders:\n If this is the first time you have installed an app on your iPhone using your Developer Account, you may get a warning like below.  Just follow the directions in the warning for what you need to do in your iPhone settings, and the issue resolves very quickly.  Click ok and you can safely disconnect your iPhone from the computer.  (If you don\u2019t get a warning and the Loop app installs but does not open, you may still need to go to Settings-\nGeneral-\nDevice Management and enable trust for your Developer Account.)\n\n\n\n\n\n\n\n\n\n\n\nCONGRATS!  YOU JUST INSTALLED LOOP!\n\n\nWhile the Loop app has been built...you are not done with these docs yet.  There are valuable pieces of information you will need to read in order to get, and keep, your Loop working.  Please continue on with the Loop App Setup section of these docs.\n\n\n\n\n\n\nSTOP...did you read that blue box above?\n\n\nAre you tempted to just start pushing buttons in Loop since it looks so easy?  PLEASE read about the Loop App Setup. There are four sections: \nLoop settings\n, \nLoop services\n, \nRileyLink menu\n, and \nPump setup\n.  All of them have very valuable information to read.", 
            "title": "Building App"
        }, 
        {
            "location": "/setup/build/installing/#overview", 
            "text": "The overall installation process is pretty simple.  Loop is written in code that is stored online; available for us to download for free.  In order to compile all that code into a useable app on your iPhone, we need to use a free Apple program called Xcode.  Xcode takes all that code   makes an app...but Apple is particular about apps and installation on devices.  So, in order to put this app on our iPhones, we have to enroll in Apple's Developer Program.  Once you enroll as a developer, you will be able to \"sign\" the Loop app in Xcode so that it will properly install onto your iPhone.  While all of this is straight forward...I'll tell you some hints upfront to save time.   Check your watchOS, iPhone OS, macOS, Xcode first to see if they need updates.  Currently you'll need to have these versions (or newer) watchOS 4.3, iOS 11.1, macOS 10.13.4 High Sierra, and Xcode 9.4.  Downloading Xcode can take hours depending on your internet connection speed.  You can do that ahead of time if you want to save yourself some waiting when you're ready to build.  Apple watches need to be paired with the iPhone BEFORE the Loop app is built onto the phone in order to have the Loop on the watch, too.  If you pair a new Apple watch later, you'll have to rebuild the Loop app onto the iPhone again, before the watch will work with Loop functions.", 
            "title": "Overview"
        }, 
        {
            "location": "/setup/build/installing/#setup-your-apple-computer", 
            "text": "", 
            "title": "Setup your Apple Computer"
        }, 
        {
            "location": "/setup/build/installing/#verify-macos", 
            "text": "You need to be running macOS High Sierra, at least version 10.13.4, so verify by clicking the apple logo in your computer display's upper left corner and selecting  About this Mac .     If your macOS is not High Sierra, click on the  Software Update  button and update to High Sierra.  If your computer is older than late 2009/2010 (depending on computer model), you may not be able to update to Sierra.  You can check High Sierra compatibility  here .", 
            "title": "Verify macOS"
        }, 
        {
            "location": "/setup/build/installing/#install-homebrew", 
            "text": "Homebrew is a program that will allow us to install the needed packages to build Loop.  Open the Terminal application on your computer.  It is located in the Applications folder, and then look in the Utilities subfolder for the Terminal application.   Copy and paste the line below into Terminal prompt.  Press return after you paste it in.   /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"   There will be a prompt asking if you want to continue.  Press return to continue, then it may prompt for your password.  Enter your computer user password (don't worry, Terminal app doesn't show keystrokes when you enter passwords, but it is still reading your typing).  Wait while the script does its thing...you\u2019ll see info scroll by and then it will pause for awhile.  Eventually, it will be done and you\u2019ll see something that says \u201cInstallation successful\u201d and you\u2019ll have a ready Terminal prompt again.      You can close the Terminal application now.  You\u2019re done with it.  You do not need to do these steps again for any subsequent Loop builds.", 
            "title": "Install Homebrew"
        }, 
        {
            "location": "/setup/build/installing/#setup-your-apple-developer-account", 
            "text": "In order to build your own copy of the Loop app onto your iPhone, you will need an Apple developer account.  You will have two options for your individual account; free or paid.  If you decide to enroll in a  FREE  developer account, here's what you need to know:   Loop apps signed with a free developer team will expire after 7 days.  On the 7th day, your Loop app will simply turn white when you open it and then immediately close.  To rebuild the Loop app, you will have to find a computer and rebuild the app onto your iPhone again.  You cannot rebuild the app on day 5 (when it is convenient, for example)...hoping to reset the 7-day clock.  The app will still expire on the 7th day from when it was first signed and created.  If you decide to switch to a paid account after trying out the free account, you will need to rebuild your Loop app with a new main app bundle identifier (this will make sense when you go through the rest of these instructions...just make a mental note for now) and sign with the new team name.   To activate enrollment in a free developer account, you simply need to add your Apple ID to the Xcode application's Preferences in the Accounts tab, as outlined in the Xcode section below.  (Note: The Apple ID you use to sign up for the developer account does not need to be the same Apple ID as the Looping iPhone uses, for example parent's installing Loop on kid's iPhone.  Typically for the developer account, use the Apple ID of the person who will be doing the Loop app building.)  You don't have to specifically go into the Apple Developer Program website to enroll...Xcode automatically amends your Apple ID to include the free developer signing.  Once you add your Apple ID, you will see a team name listed, like the screenshot below, with a  (personal team)  designation to indicate that is a free developer team.     If you decide to enroll in a  PAID  developer account, here's what you need to know:   Loop apps signed with a paid developer team will last for a full year.  The paid developer account is $99 per year and is default set to auto-renew annually.  You can change that selection in your developer account settings at any time.  If your household has multiple T1D Loop users, only one developer account is needed.  That one developer account can be used to sign multiple Loop apps.   To activate a paid account, go to the  Apple Developer website  to sign-up for your individual account.  (Note: The Apple ID you use to sign up for the developer account does not need to be the same Apple ID as the Looping iPhone uses, for example parent's installing Loop on kid's iPhone.  Typically for the developer account, use the Apple ID of the person who will be doing the Loop app building.)   After you enroll, make sure you look for a confirmation email.  Apple says it can take up to 24 hours to confirm and setup a new Apple developer account, however some people have had the process only take minutes.  It can vary.  Periodically, Apple will update the license agreement for the Developer Program.  When that happens, you'll need to login to your developer account and accept the new license agreement before you can sign a new/updated Loop app again.", 
            "title": "Setup your Apple Developer Account"
        }, 
        {
            "location": "/setup/build/installing/#setup-xcode", 
            "text": "Open the App Store application on your computer.  Search for Xcode and click on the link to download/install Xcode for free.  The most current version of Xcode is 9.4.1.  The file size is fairly large so expect about 45 minutes, or even multiple hours, to download depending on your internet speed.  You will need version Xcode 9.4 at least to build the current Loop app.  If you have a previous installation of Xcode, please make sure to check for updates first, before building Loop.     Once you have Xcode downloaded, open it from your Applications folder.  There may be a short delay as Xcode installs new Command Line Tools that the app uses.  Once Xcode is open and ready, we will start with adding your new developer account to Xcode.   IMPORTANT NOTES: Do not stop the installation of Command Line Tools, that is an important installation for Xcode to work properly.  Additionally, if you see a pop-up window later during this Loop building process asking for  Keychain Access , answer  Always Allow .  This will let Xcode have access to the signing certificates that it needs for your Apple Developer account.  You will have to enter a password to allow keychain access.  That password is the admin password for your computer.   Go to the Xcode main menu (top left of your screen) and select Preferences from the Xcode dropdown menu.  Then, click on the \u201cAccounts\u201d tab in the Preferences window and then press the  +  in the lower left corner to add an Apple ID account.     If you are establishing a free developer account, you will simply enter your Apple ID in this section and Xcode will automatically create your free developer account. If you enrolled in the paid account, enter the Apple ID of the paid developer account.  If you never enrolled in the free account, you will not have a (personal team) showing.  The screenshot is what will appear if you have used both types of enrollment under the same Apple ID.     Finally, we are going to turn on Line Numbers to make some later steps in the build process easier.  Go to the \"Text Editing\" tab in the top of the Preferences window.  Click the box to show Line Numbers.     You are now done setting up your Xcode environment.  Great job!  You will not need to redo the account setup steps on any subsequent builds or updates of your Loop app.  Xcode will remember these settings.", 
            "title": "Setup Xcode"
        }, 
        {
            "location": "/setup/build/installing/#download-loop-source-code", 
            "text": "Next, you\u2019ll need to obtain the Loop\u2019s source code in order to build the app on your computer.  Click on ONE of the links below to download your Loop source code.   We recommend Master branch source code be used to build your Loop.  Master vs Dev?  What is the difference? The Loop source code resides in  GitHub  within a repository.  A repository is kind of like a project's bookshelf, holding various books versions (aka branches) of a project.  The master branch is considered a stable version.  Any new features or options are first tested in a dev (short for \"development\") branch of the Loop.  New or inexperienced users should not build from the dev branch of Loop.  So if you hear of \"new features in dev\", these are things that may be eventually merged into the master branch once any bugs are worked out.   Loop: Master branch source code  Loop: Dev branch source code    IMPORTANT NOTES: Best practice is to leave your Loop source code in your Downloads folder.  If you store your Loop code a different folder than Downloads (such as your Documents folder or Desktop), make sure the specified folder is  not  an iCloud drive.  Storing your Loop code in an iCloud drive folder will prevent Loop from building successfully.  How do you know if a folder is an iCloud drive?  Check your System Preferences.  If your System Preferences for iCloud is set as shown below, your Documents and Desktop folders are iCloud drives and  NOT  appropriate places to save your Loop download.   \nDepending on your browser and settings, your Loop download may or may not automatically unzip.  If it does not unzip automatically, you can right-click on the zip file and choose to \"Open With\" Archive Utility.  This will create a blue folder called  Loop-master .  HOWEVER, if you already have an existing  Loop-master  folder from a previous download, the name of the next download will be something like  Loop-master (1) .  The problem with that folder name is that it contains a space...and spaces in the name will cause your Loop build to fail.  So, either delete old copies of Loop before downloading/unzipping or rename the folder(s) to ensure that NO SPACES are in the folder name.", 
            "title": "Download Loop Source Code"
        }, 
        {
            "location": "/setup/build/installing/#installing-loop-using-xcode", 
            "text": "Here\u2019s where the fun really begins.  You\u2019re about to build your Loop app.  Go to your Downloads folder, open the  Loop-master  folder (or whatever you named it...double check that the folder does not contain any spaces in the folder name, as described above), and double click on Loop.xcodeproj.     A warning may appear asking if you really want to open it, click Open.  Xcode will get itself organized and installed, this may take a few minutes.  The first time you load Xcode you may also be asked about allowing keychain access (and yes, always allow...if the window pops up).  Xcode will eventually open the Loop project...the first open of Xcode just takes a little longer than subsequent uses.     Once Xcode has finished indexing, the Loop project's various folders and files will appear in the far left column.  At the very top, click on the blue Loop main project folder.  Then click on the box in the middle screen to reveal the targets' column.  The four targets we will sign in the upcoming steps are now easily viewable.     Connect your iPhone via cable to the computer, select your iPhone from the very top of the drop down list.  Your  iPhone\u2019s personal name  should be at the top of the list.  Don't accidentally select the generic iOS simulators listed below your iPhone's name.     Helpful Tip  If your iPhone has a lock enabled, Xcode will not be able to install Loop app once your phone locks during the build progress.  Please temporarily disable the lock until you finish building Loop app.  Go to your iPhone Settings   Display   Brightness   Auto-Lock and set it to  Never .  You can reset your lock once Loop is done building onto the phone.          These next steps are usually only needed on the first Loop build; they can be skipped on subsequent builds.   If this is the first time your iPhone has been plugged in to this computer, you will need to open the iPhone and select \"Trust this Computer\" before your device will be useable in the menu selection.  If this is the first time you are building an app onto this iPhone using this particular Apple developer account, you will need to \u201cregister the device\u201d to your developer account.  The device registration screen, as shown below, may appear when your iPhone is selected.            Once you select your device (your iPhone's name), let's start signing our four targets.  We will start with the Loop target, the first one on the target list.  Under the \"Signing\" area, select the dropdown menu where it currently says \"none\".  Choose your team that you'd like to sign with.  If you select a team name with (personal team), your app will expire after 7 days.  If you select a team name without that (personal team), your app will last a full year.  If you never signed up for a free developer account, you will not have a (personal team) showing.  Make sure you keep the \"automatically manage signing\" box checked above the team selection area.     Once you choose your signing team, Xcode will automatically generate provisioning profiles and signing certificates.  If this is the first time you are building on this iPhone with this developer account, you may again be prompted to register the device.  Simply click on the \"Register Device\" button to confirm.     A successfully signed target will have a provisioning profile and signing certificate similar to the screenshot below.  Click on each of the three remaining targets, and repeat the signing steps by choosing the same team name as you selected in the first target.      Do you want customizations before you finish building?  New Loop users : Customizations are not a required part of any Loop build.  As you gain experience in how you use your Loop app, you may want to customize some of the features.  You can always update your Loop app to add customizations at a later time.  Really though, building with the standard, default installation is JUST FINE. \nIf you want any custom configurations to your Loop or Watch apps, now is the time to make them before you finish with the last step of Loop installation on your iPhone.  Follow the step-by-step instructions on the  Code Customizations  page.  When you\u2019ve completed those customizations, please return here and follow the next steps to finish the installation of Loop.    Have you paired your Apple Watch already?  New Apple Watch users : If you have an unopened Apple watch and want to use it with Loop, first pair the watch with the iPhone before continuing to the next steps.  If you get a new watch after building the Loop app, you'll need to redo your Loop build. (Don't worry, it's as easy as pressing play on your saved Loop project.)  Existing Apple Watch users : Please update your watchOS prior to building Loop app.  The current version of Loop requires watchOS 4 or newer.   All done with any customizations? Have your Apple watch paired and updated?  Let\u2019s finish the installation of the Loop app onto your iPhone.  Double check to make sure your iPhone's name is still selected and then press the \u201cplay\u201d button (or build button) to start Xcode on its way.  You\u2019ll see the progression of the build in the status window.  New builds can take about 15-40 minutes depending on the speed of the computer and internet.  Just be patient.  Subsequent builds from the same download folder will be much faster.     If the build is successful, your brand new Loop appswill have a screen open immediately on the iPhone asking about allowing Loop notifications and Health App access. Allow Loop to send you notifications. In the next screen that follows that, click on the  Turn All Categories On  line and then click  Allow  in the upper right corner.   If you encountered any build errors that prevented your Loop from installing on your phone, please review the  Build Errors  page.  Read your error message(s) and follow the directions for repairing the error.   First time builders:  If this is the first time you have installed an app on your iPhone using your Developer Account, you may get a warning like below.  Just follow the directions in the warning for what you need to do in your iPhone settings, and the issue resolves very quickly.  Click ok and you can safely disconnect your iPhone from the computer.  (If you don\u2019t get a warning and the Loop app installs but does not open, you may still need to go to Settings- General- Device Management and enable trust for your Developer Account.)      CONGRATS!  YOU JUST INSTALLED LOOP!  While the Loop app has been built...you are not done with these docs yet.  There are valuable pieces of information you will need to read in order to get, and keep, your Loop working.  Please continue on with the Loop App Setup section of these docs.    STOP...did you read that blue box above?  Are you tempted to just start pushing buttons in Loop since it looks so easy?  PLEASE read about the Loop App Setup. There are four sections:  Loop settings ,  Loop services ,  RileyLink menu , and  Pump setup .  All of them have very valuable information to read.", 
            "title": "Installing Loop using Xcode"
        }, 
        {
            "location": "/setup/build/build_errors/", 
            "text": "Build Errors\n\u2301\n\n\nThere are two types of build errors that happen; yellow alerts and red alerts.  Yellow alerts will not cause a build to fail, and can generally be ignored.  Red alerts will have to be resolved before you can successfully build Loop app.\n\n\nYellow error alerts\n do not cause the build to fail, those are just warnings.  Occasionally, a Loop version may have some minor discrepencies that cause a yellow alert...but you can ignore those.\n\n\n\n\n\n\n\n\n\nRed error alerts\n \n will have to be resolved before you can successfully build Loop app.  The most common cause of red alerts comes from being out of sync between the various parts of Apple's infrastructure (iOS, Xcode, Swift, watchOS, macOS) that are frequently updated.  For every update to iOS/Xcode, the volunteer Loop developers have to make changes to the underlying source code.  This takes time...so when Apple updates are pushed out, sometimes there may be a short period of time until the code is updated to match.  If you encounter a build error that is not listed below, please get on the Facebook Looped group or Gitter to let us know.\n\n\nCartfile Error: CommandPhaseScriptExecution failed\n\u2301\n\n\nIf you see a \nCartfile failure\n and several other red errors (in particular saying there is \"no such module 'LoopKit'\"), then you need to open Terminal app.  You will use the command \ncd ~/downloads/loop-master \n carthage update\n.  NOTE:  YOU MAY HAVE TO CHANGE THE COMMAND SLIGHTLY.  If your loop folder isn't named loop-master and instead is loop-master-2 or loop-dev or some other folder name...change the command to match your folder's actual name.  (note: double clicking on the cartfile red error will likely give more detail...one of the framework builds will likely say it failed with exit code 65.)\n\n\n\n\n\n\n\n\n\n\nCarthage update will take about 15 minutes to run successfully.  A successful carthage update will look like the following:\n\n\n\n\n\n\n\n\n\n\nWatchApp Extension: CommandPhaseScriptExecution failed\n\u2301\n\n\nYou may have a similar message as above, but not in the cartfile area.  Instead this may appear in the WatchApp Extension.  If you see a message about updating carthage version, open Terminal app and enter the following command \nbrew update \n brew upgrade carthage\n\n\n\n\n\n\n\n\n\n\nExit Code 1: Unrecognized arguments: --cache-builds\n\u2301\n\n\nError message: \"\nCommand /bin/sh failed with exit code 1\n\"\n\n\n\n\n\n\n\n\n\n\nSolution: Please open your Terminal app found in the Applications\nUtilities folder and then enter \n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n  Confirm installation by pressing enter, and then typing in your computer password.  When the installation finishes, use the command \nbrew link --overwrite carthage\n.  After those two steps, you can close out Terminal app, return to Xcode and press the build/play button again.\n\n\nExit Code 1: xcode-select --install\n\u2301\n\n\nError message: \"\nCommand /bin/sh failed with exit code 1\n\"\n\n\n\n\n\n\n\n\n\n\nSolution:  This error message has been more frequent lately, but I am unsure if there is a new underlying change in Xcode or people are inadvertently saying \"no\" to allowing Keychain Access. Regardless the solution is as follows:\n\n\n\n\nClose Xcode\n\n\nOpen your Keychain Access application (found in Applications within the Utilities folder, similar to where Terminal app is found)\n\n\nIn the upper left corner of keychain access, make sure you have the keychain \nlogin\n highlighted and then click the large lock icon above the keychains area.  Click the lock closed, and then click the lock to open it again. You will be prompted for a password.  Enter your computer admin password.  Close Keychain Access app.\n\n\n\n\n\n\n\n\n\nOpen your Loop project again in Xcode.\n\n\nIn the main Xcode ribbon menu (grey menu bar at the very top of your Apple display area), select the word \nProduct\n and then select the option for \nClean\n. (keyboard shortcut is shift-command-k)\n\n\nNow try rebuilding your Loop app.  If you ever get prompted again to allow Xcode access to Keychain, make sure to Always Allow.\n\n\n\n\nUpdated Xcode, but need to Carthage Bootstrap\n\u2301\n\n\nError message: \"\nSwift Compilier Error.  Module compiled with Swift 4.0 cannot be imported in Swift 4.0.x\n\"\n\n\n\n\n\n\n\nSoultion: Xcode was recently updated, and the current Loop master branch will produce this error message until the code is updated.  You will need to perform the following steps:\n\n\n\n\nOpen Terminal App\n\n\nNavigate to your Loop download by doing the command:\n\ncd downloads/Loop-master\n\n(or whatever you named your Loop folder...go check)\n\n\nNow use the command\n\ncarthage bootstrap\n\nIt will run for about 4-5 minutes and then show you a screen like below.\n\n\n\n\n\n\n\n\n\n\n\nIf during the run of \ncarthage bootstrap\n, you instead see an error message like below:\n\n\n\n\n\n\n\n\nPlease go to your Xcode preferences, under the Locations tab, select \nXcode 9.3\n under the Command Line Tools\n\n\n\n\n\n\n\nIf Xcode 9.3 is not available in the dropdown menu, (1) make sure you have update your Xcode from the App store and then (2) go to Terminal app and run the command \nxcode-select --install\n which will produce a pop-up window for the installation of command line developer tools.  Select  \ninstall\n in that pop-up window.\n\n\nReturn to Terminal app and rerun \ncarthage bootstrap\n in your Loop download folder.  It should resolve correctly after that.\n\n\n\n\n\n\nGo back to your Loop project in Xcode, select your iPhone, and press the build button. You'll still see some yellow alerts, but those are fine.\n\n\n\n\n\n\n\n\n\nDeveloper License Update\n\u2301\n\n\nError message: \"\nThe Apple Developer Program License Agreement has been updated,  In order to access certain membership resources, you must accept the latest license agreement.\n\"\n\n\nSolution: You'll need to log onto your developer account at \ndeveloper.apple.com\n and accept the latest license agreement.\n\n\n\n\n\n\n\nSwift Language Version\n\u2301\n\n\nError message: \nSwift Language Version\u201d (SWIFT_VERSION) is required to be configured correctly\n for targets which use Swift. Use the [Edit \n Convert \n To Current Swift Syntax\u2026] menu to choose a Swift version or use the Build Settings editor to configure the build setting directly\" or also \n\"Could not locate device support files.  This iPhone is running iOS 11.x, which may not be supported by this version of Xcode.\n\"\n\n\nSolution: You will need to go to your computer's App Store and install the Xcode app update.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEmbedded Binary error\n\u2301\n\n\nError message: \"\nEmbedded Binary Validation Utility.  error: Embedded binary's bundle identifier is not prefixed with the parent app's bundle identifier\n\".\n\n\n\n\n\n\nSolution:  This error happens because you've either\n\n\n\n\nForgotten to save project after the MAIN_APP_BUNDLE_ID was changed (most common cause)\n\n\nTried to manually change one of the Bundle ID names in one of the four targets, or\n\n\nUsed an incorrect syntax in the MAIN_APP_BUNDLE_ID.\n\n\n\n\nIn any case however, usually this error is most easily solved by closing out your project, deleting the download folder, and starting with a fresh download of Loop app.  The next time you build, make sure to follow the directions carefully to use a MAIN_APP_BUNDLE_ID in the right format and press \ncommand-s\n to force Xcode to update the targets' naming scheme correction.\n\n\nAbort with Payload\n\u2301\n\n\nError message: \"\nAbort with payload\n\"  Your app will only open briefly with a white screen and then close, if you build with this error.\n\n\n\n\n\n\nSolution: This error message is caused by either\n\n\n\n\nSaving Loop download folder into an iCloud mapped drive, or\n\n\nHaving a space in the name of your Loop download folder.\n\n\n\n\nRename the folder to have no spaces and/or move it back to the Downloads folder, then rebuild.\n\n\nExit Code 127\n\u2301\n\n\nError message: \"\nShell Script Invocation Error.  Command /bin/sh failed with exit code 127\n\"\n\n\n\n\n\n\n\nSolution: This error code is happening for Loopers updating to Loop who used carthage.pkg and don't have homebrew installed.  We have since updated the installation docs, so new users likely won't run into this error.  But, if you are an existing Looper encountering this error message while trying to update your Loop, please open your Terminal app found in the Applications\nUtilities folder and then enter \n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n  Confirm installation by pressing enter, and then typing in your computer password.  When the installation finishes, use the command \nbrew link --overwrite carthage\n.  After those two steps, you can close out Terminal app, return to Xcode and press the build/play button again.\n\n\nApple Watch: Loop app not appearing\n\u2301\n\n\nError: \nApple watch app is not appearing\n.\n\n\nSolution: Usually because you have not updated to watchOS prior to when you built Loop, or you didn't have your Apple watch paired at the time of building Loop.  Don't forget to open the iPhone's Watch app, select My Watch tab on the bottom left, scroll all the way down, and click \nInstall\n for the Loop app listed at the very bottom under \"available apps\".\n\n\nApple Watch: Loop app not installing\n\u2301\n\n\nError: \nThe Loop app appears on the list of app available to install on the watch, but when you press \"install\", and it goes through the animation of filling in the circle while it's installing, but then at the end it just toggles back to saying \"INSTALL\"\n.\n\n\nSolution:  Plug your iPhone into the computer and start Xcode.  On your watch, look for a prompt that says \"Trust this computer\".  Scroll down on the watchface and select the \"Trust\" button.  Now rebuild your Loop app in Xcode, but look for a pop-up message that warns you that the Watch isn't registered with the Developer portal.  Click on the \"register\" button that is in the pop-up window and proceed with the Loop app building again.", 
            "title": "Build Errors"
        }, 
        {
            "location": "/setup/build/build_errors/#build-errors", 
            "text": "There are two types of build errors that happen; yellow alerts and red alerts.  Yellow alerts will not cause a build to fail, and can generally be ignored.  Red alerts will have to be resolved before you can successfully build Loop app.  Yellow error alerts  do not cause the build to fail, those are just warnings.  Occasionally, a Loop version may have some minor discrepencies that cause a yellow alert...but you can ignore those.     Red error alerts    will have to be resolved before you can successfully build Loop app.  The most common cause of red alerts comes from being out of sync between the various parts of Apple's infrastructure (iOS, Xcode, Swift, watchOS, macOS) that are frequently updated.  For every update to iOS/Xcode, the volunteer Loop developers have to make changes to the underlying source code.  This takes time...so when Apple updates are pushed out, sometimes there may be a short period of time until the code is updated to match.  If you encounter a build error that is not listed below, please get on the Facebook Looped group or Gitter to let us know.", 
            "title": "Build Errors"
        }, 
        {
            "location": "/setup/build/build_errors/#cartfile-error-commandphasescriptexecution-failed", 
            "text": "If you see a  Cartfile failure  and several other red errors (in particular saying there is \"no such module 'LoopKit'\"), then you need to open Terminal app.  You will use the command  cd ~/downloads/loop-master   carthage update .  NOTE:  YOU MAY HAVE TO CHANGE THE COMMAND SLIGHTLY.  If your loop folder isn't named loop-master and instead is loop-master-2 or loop-dev or some other folder name...change the command to match your folder's actual name.  (note: double clicking on the cartfile red error will likely give more detail...one of the framework builds will likely say it failed with exit code 65.)      Carthage update will take about 15 minutes to run successfully.  A successful carthage update will look like the following:", 
            "title": "Cartfile Error: CommandPhaseScriptExecution failed"
        }, 
        {
            "location": "/setup/build/build_errors/#watchapp-extension-commandphasescriptexecution-failed", 
            "text": "You may have a similar message as above, but not in the cartfile area.  Instead this may appear in the WatchApp Extension.  If you see a message about updating carthage version, open Terminal app and enter the following command  brew update   brew upgrade carthage", 
            "title": "WatchApp Extension: CommandPhaseScriptExecution failed"
        }, 
        {
            "location": "/setup/build/build_errors/#exit-code-1-unrecognized-arguments-cache-builds", 
            "text": "Error message: \" Command /bin/sh failed with exit code 1 \"      Solution: Please open your Terminal app found in the Applications Utilities folder and then enter  /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"   Confirm installation by pressing enter, and then typing in your computer password.  When the installation finishes, use the command  brew link --overwrite carthage .  After those two steps, you can close out Terminal app, return to Xcode and press the build/play button again.", 
            "title": "Exit Code 1: Unrecognized arguments: --cache-builds"
        }, 
        {
            "location": "/setup/build/build_errors/#exit-code-1-xcode-select-install", 
            "text": "Error message: \" Command /bin/sh failed with exit code 1 \"      Solution:  This error message has been more frequent lately, but I am unsure if there is a new underlying change in Xcode or people are inadvertently saying \"no\" to allowing Keychain Access. Regardless the solution is as follows:   Close Xcode  Open your Keychain Access application (found in Applications within the Utilities folder, similar to where Terminal app is found)  In the upper left corner of keychain access, make sure you have the keychain  login  highlighted and then click the large lock icon above the keychains area.  Click the lock closed, and then click the lock to open it again. You will be prompted for a password.  Enter your computer admin password.  Close Keychain Access app.     Open your Loop project again in Xcode.  In the main Xcode ribbon menu (grey menu bar at the very top of your Apple display area), select the word  Product  and then select the option for  Clean . (keyboard shortcut is shift-command-k)  Now try rebuilding your Loop app.  If you ever get prompted again to allow Xcode access to Keychain, make sure to Always Allow.", 
            "title": "Exit Code 1: xcode-select --install"
        }, 
        {
            "location": "/setup/build/build_errors/#updated-xcode-but-need-to-carthage-bootstrap", 
            "text": "Error message: \" Swift Compilier Error.  Module compiled with Swift 4.0 cannot be imported in Swift 4.0.x \"    Soultion: Xcode was recently updated, and the current Loop master branch will produce this error message until the code is updated.  You will need to perform the following steps:   Open Terminal App  Navigate to your Loop download by doing the command: cd downloads/Loop-master \n(or whatever you named your Loop folder...go check)  Now use the command carthage bootstrap \nIt will run for about 4-5 minutes and then show you a screen like below.      If during the run of  carthage bootstrap , you instead see an error message like below:    \nPlease go to your Xcode preferences, under the Locations tab, select  Xcode 9.3  under the Command Line Tools    If Xcode 9.3 is not available in the dropdown menu, (1) make sure you have update your Xcode from the App store and then (2) go to Terminal app and run the command  xcode-select --install  which will produce a pop-up window for the installation of command line developer tools.  Select   install  in that pop-up window.  Return to Terminal app and rerun  carthage bootstrap  in your Loop download folder.  It should resolve correctly after that.    Go back to your Loop project in Xcode, select your iPhone, and press the build button. You'll still see some yellow alerts, but those are fine.", 
            "title": "Updated Xcode, but need to Carthage Bootstrap"
        }, 
        {
            "location": "/setup/build/build_errors/#developer-license-update", 
            "text": "Error message: \" The Apple Developer Program License Agreement has been updated,  In order to access certain membership resources, you must accept the latest license agreement. \"  Solution: You'll need to log onto your developer account at  developer.apple.com  and accept the latest license agreement.", 
            "title": "Developer License Update"
        }, 
        {
            "location": "/setup/build/build_errors/#swift-language-version", 
            "text": "Error message:  Swift Language Version\u201d (SWIFT_VERSION) is required to be configured correctly  for targets which use Swift. Use the [Edit   Convert   To Current Swift Syntax\u2026] menu to choose a Swift version or use the Build Settings editor to configure the build setting directly\" or also  \"Could not locate device support files.  This iPhone is running iOS 11.x, which may not be supported by this version of Xcode. \"  Solution: You will need to go to your computer's App Store and install the Xcode app update.", 
            "title": "Swift Language Version"
        }, 
        {
            "location": "/setup/build/build_errors/#embedded-binary-error", 
            "text": "Error message: \" Embedded Binary Validation Utility.  error: Embedded binary's bundle identifier is not prefixed with the parent app's bundle identifier \".   \nSolution:  This error happens because you've either   Forgotten to save project after the MAIN_APP_BUNDLE_ID was changed (most common cause)  Tried to manually change one of the Bundle ID names in one of the four targets, or  Used an incorrect syntax in the MAIN_APP_BUNDLE_ID.   In any case however, usually this error is most easily solved by closing out your project, deleting the download folder, and starting with a fresh download of Loop app.  The next time you build, make sure to follow the directions carefully to use a MAIN_APP_BUNDLE_ID in the right format and press  command-s  to force Xcode to update the targets' naming scheme correction.", 
            "title": "Embedded Binary error"
        }, 
        {
            "location": "/setup/build/build_errors/#abort-with-payload", 
            "text": "Error message: \" Abort with payload \"  Your app will only open briefly with a white screen and then close, if you build with this error.   \nSolution: This error message is caused by either   Saving Loop download folder into an iCloud mapped drive, or  Having a space in the name of your Loop download folder.   Rename the folder to have no spaces and/or move it back to the Downloads folder, then rebuild.", 
            "title": "Abort with Payload"
        }, 
        {
            "location": "/setup/build/build_errors/#exit-code-127", 
            "text": "Error message: \" Shell Script Invocation Error.  Command /bin/sh failed with exit code 127 \"    Solution: This error code is happening for Loopers updating to Loop who used carthage.pkg and don't have homebrew installed.  We have since updated the installation docs, so new users likely won't run into this error.  But, if you are an existing Looper encountering this error message while trying to update your Loop, please open your Terminal app found in the Applications Utilities folder and then enter  /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"   Confirm installation by pressing enter, and then typing in your computer password.  When the installation finishes, use the command  brew link --overwrite carthage .  After those two steps, you can close out Terminal app, return to Xcode and press the build/play button again.", 
            "title": "Exit Code 127"
        }, 
        {
            "location": "/setup/build/build_errors/#apple-watch-loop-app-not-appearing", 
            "text": "Error:  Apple watch app is not appearing .  Solution: Usually because you have not updated to watchOS prior to when you built Loop, or you didn't have your Apple watch paired at the time of building Loop.  Don't forget to open the iPhone's Watch app, select My Watch tab on the bottom left, scroll all the way down, and click  Install  for the Loop app listed at the very bottom under \"available apps\".", 
            "title": "Apple Watch: Loop app not appearing"
        }, 
        {
            "location": "/setup/build/build_errors/#apple-watch-loop-app-not-installing", 
            "text": "Error:  The Loop app appears on the list of app available to install on the watch, but when you press \"install\", and it goes through the animation of filling in the circle while it's installing, but then at the end it just toggles back to saying \"INSTALL\" .  Solution:  Plug your iPhone into the computer and start Xcode.  On your watch, look for a prompt that says \"Trust this computer\".  Scroll down on the watchface and select the \"Trust\" button.  Now rebuild your Loop app in Xcode, but look for a pop-up message that warns you that the Watch isn't registered with the Developer portal.  Click on the \"register\" button that is in the pop-up window and proceed with the Loop app building again.", 
            "title": "Apple Watch: Loop app not installing"
        }, 
        {
            "location": "/setup/build/code_customization/", 
            "text": "Code Customizations\n\u2301\n\n\nBased on Loop users\u2019 experience, there are some customizations that you may want to incorporate ahead of building your Loop app and Apple Watch app.  These customizations must be done prior to building the Loop app onto your iPhone, they cannot be done from within the app itself.\n\n\n\n\nNote: Every effort will be made to update the line numbers as the code is updated, but there may be times where the screenshots and line numbers are slightly different than the current version of Loop code.  These instructions have been updated for Loop v1.9.\n\n\n\n\nDisable TouchID for Bolus\n\u2301\n\n\nIf you have TouchID enabled as part of your iPhone security (thumbprint), you will have to confirm each bolus with a thumbprint as part of standard Loop build.  If you would like to disable the TouchID for bolusing (but still keep TouchID for the rest of your normal iPhone use), you can do that by modifying Line 191 in the Loop\nView Controllers\nBolusViewController.swift.  Add the \nfalse \n as shown in the screenshot below:\n\n\n\n\n\n\n\n\n\nWorkout Range Duration\n\u2301\n\n\n\nIf you\u2019d like more than just the standard 1 or 2 hour duration for the Workout Range, you can add or modify the code to add another time interval or edit the existing ones.\n\n\nGo to the Loop\nExtensions\nUIAlertController.swift and modify Line 30.  The default has 1 and 2 hours as shown where the arrow is pointing in the screenshot.  You can edit those to whatever duration you want (in units of hours) and add a duration if you prefer.  If you\u2019d like 1, 2, and 3 hours options...simply edit the numbers in the brackets to read [1, 2, 3]. It is possible to enter less than 1 hour intervals such as 15min, 30 min, 45 min by editing the brackets to read [0.25, 0.5, 0.75].\n\n\n\n\n\n\n\n\n\nDefault Carb Absorption Times\n\u2301\n\n\n\n\nLoop\u2019s default carb absorption times are based on the high, medium, and low glycemic index absorption curves presented in \nThink Like A Pancreas\n by Gary Scheiner.  Currently the lollipop icon is set for 2 hours, taco icon for 3 hours, and pizza icon for 4 hours.  \n\n\nYou can modify these defaults to suit your needs, however modification of these values it not as helpful/common as previous Loop versions.  Ever since Loop v1.4, Loop has included dynamic carb absorption means that Loop will start with your entered carb absoprtion time, mutliply it by 1.5, and then dynamically adjust the absorption time (either shorter or longer) based on the observed BG impacts.  So, typically, most people are finding that modification of the default carb absorption times is no longer necessary.\n\n\nIf you would like to modify those defaults, you can do so in the Loop\nManagers\nLoopDataManager.swift Lines 67-69.  Note the times are in hours, not minutes, in the code.\n\n\n\n\n\n\n\n\n\nNeutral Temp Basals\n\u2301\n\n\nWith the default installation, when Loop calculates that the recommended temp basal matches the basal rate in your Loop basal rate schedule (aka \"neutral temp basal\") rather than setting a temp basal, Loop will cancel any currently running temp basal and let the pump just run the scheduled basal.  Assuming you are using Loop v1.9 and the \"save to pump...\" command to make basal rate schedule edits, Loop and the pump will be matching and this will not cause any issues.\n\n\nIf you would like Loop to instead set neutral temp basals, you can edit lines 151 and 155 in the Loop\nManagers\nDoseMath.swift file to read \nreturn self\n as shown in screenshot below.  This will result in Loop setting neutral temp basals when the recommended temp basal matches the Loop's basal schedule.  The potential downsides are slightly more battery consumption, and slightly greater opportunity for temp basal failures as it is a longer pump communication than simply canceling a temp basal.\n\n\n\n\n\n\n\n\n\nExponential Insulin Curve\n\u2301\n\n\nThe Exponential Insulin Curve Models (Rapid-Acting Adult, Rapid-Acting Child, and Fiasp) are defaulted to an insulin duration of 360 minutes...but the peak activity of the various curves differs:\n\n\n\n\nRapid-acting adult curve peaks at 75 minutes\n\n\nRapid-acting child curve peaks at 65 minutes\n\n\nFiasp peaks curve peaks at 55 minutes\n\n\n\n\nIf you wish to customize these values, you can adjust them on Lines 22-38 in the Common\nModels\nInsulin\nExponentialInsulinModelPreset.swift file\n\n\n\n\n\n\n\n\n\nLoop Logo\n\u2301\n\n\nIf you want an app logo other than the default green circle for your Loop app, you can easily customize this.  To make it easy to generate the correct sizes of icons, you can use a site like \nappicon.build\n and just drag and drop your source image. The source image needs to be 1024 pixels x 1024 pixels.  The site will email you a zip file.  Double click the zip file, choose the \u201cios\u201d folder, and copy the contents of the Appicon.appiconset as shown highlighted below.\n\n\n\n\n\n\n\n\n\nNow navigate to the corresponding Loop folder as shown below.  Replace the contents of the Appicon.appiconset with your copied images.\n\n\n\n\n\n\n\n\n\nYou can confirm the successful change by looking in Xcode.  You should see your custom logo in the Appicon set now.  You will also likely see a yellow alert that there are \u201c5 unassigned children\u201d.  This alert will not prevent your app from building, it\u2019s simply because the zipfile contained more sizes of images than Loop app uses.  You can just leave the unassigned images as is.\n\n\n\n\n\n\n\n\n\nApple Watch Customizations\n\u2301\n\n\nRecommended Bolus Autofill\n\u2301\n\n\nThe Apple Watch's default is to autofill to 75% of the recommended bolus.  If you wish, you can customize so that the watch autofills a different percentage. To do this, the multiplier can be changed from 0.75 to a value of your choice. A value of 1 will autofill 100% of the recommended bolus. A value of 0 will autofill 0% of the recommended bolus.   Go to the Watchapp Extension\nControllers\nBolusInterfaceController.swift. Edit the section of line 96 for your customization.\n\n\n\n\n\n\n\n\n\nAdjust sensitivity of digital crown for carb and bolus entry\n\u2301\n\n\nThe rate of change of the carb and bolus entry pickers when using the digital crown can be altered. You'll need to edit two lines in files within the WatchApp Extension\nControllers folder.  In BolusInterfaceController.swift edit line 162, and in AddCarbsInterfaceController.swift edit line 194. The 1/24 value is the ratio of rotations of the crown to the amount of change in the value. Changing it to 1/12 would mean that twice as many turns would be needed for the same amount of carb or bolus entry.", 
            "title": "Code Customization"
        }, 
        {
            "location": "/setup/build/code_customization/#code-customizations", 
            "text": "Based on Loop users\u2019 experience, there are some customizations that you may want to incorporate ahead of building your Loop app and Apple Watch app.  These customizations must be done prior to building the Loop app onto your iPhone, they cannot be done from within the app itself.   Note: Every effort will be made to update the line numbers as the code is updated, but there may be times where the screenshots and line numbers are slightly different than the current version of Loop code.  These instructions have been updated for Loop v1.9.", 
            "title": "Code Customizations"
        }, 
        {
            "location": "/setup/build/code_customization/#disable-touchid-for-bolus", 
            "text": "If you have TouchID enabled as part of your iPhone security (thumbprint), you will have to confirm each bolus with a thumbprint as part of standard Loop build.  If you would like to disable the TouchID for bolusing (but still keep TouchID for the rest of your normal iPhone use), you can do that by modifying Line 191 in the Loop View Controllers BolusViewController.swift.  Add the  false   as shown in the screenshot below:", 
            "title": "Disable TouchID for Bolus"
        }, 
        {
            "location": "/setup/build/code_customization/#workout-range-duration", 
            "text": "If you\u2019d like more than just the standard 1 or 2 hour duration for the Workout Range, you can add or modify the code to add another time interval or edit the existing ones.  Go to the Loop Extensions UIAlertController.swift and modify Line 30.  The default has 1 and 2 hours as shown where the arrow is pointing in the screenshot.  You can edit those to whatever duration you want (in units of hours) and add a duration if you prefer.  If you\u2019d like 1, 2, and 3 hours options...simply edit the numbers in the brackets to read [1, 2, 3]. It is possible to enter less than 1 hour intervals such as 15min, 30 min, 45 min by editing the brackets to read [0.25, 0.5, 0.75].", 
            "title": "Workout Range Duration"
        }, 
        {
            "location": "/setup/build/code_customization/#default-carb-absorption-times", 
            "text": "Loop\u2019s default carb absorption times are based on the high, medium, and low glycemic index absorption curves presented in  Think Like A Pancreas  by Gary Scheiner.  Currently the lollipop icon is set for 2 hours, taco icon for 3 hours, and pizza icon for 4 hours.    You can modify these defaults to suit your needs, however modification of these values it not as helpful/common as previous Loop versions.  Ever since Loop v1.4, Loop has included dynamic carb absorption means that Loop will start with your entered carb absoprtion time, mutliply it by 1.5, and then dynamically adjust the absorption time (either shorter or longer) based on the observed BG impacts.  So, typically, most people are finding that modification of the default carb absorption times is no longer necessary.  If you would like to modify those defaults, you can do so in the Loop Managers LoopDataManager.swift Lines 67-69.  Note the times are in hours, not minutes, in the code.", 
            "title": "Default Carb Absorption Times"
        }, 
        {
            "location": "/setup/build/code_customization/#neutral-temp-basals", 
            "text": "With the default installation, when Loop calculates that the recommended temp basal matches the basal rate in your Loop basal rate schedule (aka \"neutral temp basal\") rather than setting a temp basal, Loop will cancel any currently running temp basal and let the pump just run the scheduled basal.  Assuming you are using Loop v1.9 and the \"save to pump...\" command to make basal rate schedule edits, Loop and the pump will be matching and this will not cause any issues.  If you would like Loop to instead set neutral temp basals, you can edit lines 151 and 155 in the Loop Managers DoseMath.swift file to read  return self  as shown in screenshot below.  This will result in Loop setting neutral temp basals when the recommended temp basal matches the Loop's basal schedule.  The potential downsides are slightly more battery consumption, and slightly greater opportunity for temp basal failures as it is a longer pump communication than simply canceling a temp basal.", 
            "title": "Neutral Temp Basals"
        }, 
        {
            "location": "/setup/build/code_customization/#exponential-insulin-curve", 
            "text": "The Exponential Insulin Curve Models (Rapid-Acting Adult, Rapid-Acting Child, and Fiasp) are defaulted to an insulin duration of 360 minutes...but the peak activity of the various curves differs:   Rapid-acting adult curve peaks at 75 minutes  Rapid-acting child curve peaks at 65 minutes  Fiasp peaks curve peaks at 55 minutes   If you wish to customize these values, you can adjust them on Lines 22-38 in the Common Models Insulin ExponentialInsulinModelPreset.swift file", 
            "title": "Exponential Insulin Curve"
        }, 
        {
            "location": "/setup/build/code_customization/#loop-logo", 
            "text": "If you want an app logo other than the default green circle for your Loop app, you can easily customize this.  To make it easy to generate the correct sizes of icons, you can use a site like  appicon.build  and just drag and drop your source image. The source image needs to be 1024 pixels x 1024 pixels.  The site will email you a zip file.  Double click the zip file, choose the \u201cios\u201d folder, and copy the contents of the Appicon.appiconset as shown highlighted below.     Now navigate to the corresponding Loop folder as shown below.  Replace the contents of the Appicon.appiconset with your copied images.     You can confirm the successful change by looking in Xcode.  You should see your custom logo in the Appicon set now.  You will also likely see a yellow alert that there are \u201c5 unassigned children\u201d.  This alert will not prevent your app from building, it\u2019s simply because the zipfile contained more sizes of images than Loop app uses.  You can just leave the unassigned images as is.", 
            "title": "Loop Logo"
        }, 
        {
            "location": "/setup/build/code_customization/#apple-watch-customizations", 
            "text": "", 
            "title": "Apple Watch Customizations"
        }, 
        {
            "location": "/setup/build/code_customization/#recommended-bolus-autofill", 
            "text": "The Apple Watch's default is to autofill to 75% of the recommended bolus.  If you wish, you can customize so that the watch autofills a different percentage. To do this, the multiplier can be changed from 0.75 to a value of your choice. A value of 1 will autofill 100% of the recommended bolus. A value of 0 will autofill 0% of the recommended bolus.   Go to the Watchapp Extension Controllers BolusInterfaceController.swift. Edit the section of line 96 for your customization.", 
            "title": "Recommended Bolus Autofill"
        }, 
        {
            "location": "/setup/build/code_customization/#adjust-sensitivity-of-digital-crown-for-carb-and-bolus-entry", 
            "text": "The rate of change of the carb and bolus entry pickers when using the digital crown can be altered. You'll need to edit two lines in files within the WatchApp Extension Controllers folder.  In BolusInterfaceController.swift edit line 162, and in AddCarbsInterfaceController.swift edit line 194. The 1/24 value is the ratio of rotations of the crown to the amount of change in the value. Changing it to 1/12 would mean that twice as many turns would be needed for the same amount of carb or bolus entry.", 
            "title": "Adjust sensitivity of digital crown for carb and bolus entry"
        }, 
        {
            "location": "/setup/loop-settings/settings/", 
            "text": "Configuring Loop\n\u2301\n\n\nNow that you have the Loop app installed on your iPhone, we need to input the settings so that the Loop can work for you. \n\n\nNormally, we would start by explaining the displays on an application, but your Loop won\u2019t have much showing initially until we get some basic settings input.  So, let\u2019s start by clicking on the Loop Settings button in the tool bar.  It looks like a little sprocket. On the settings screen that opens, click on Add Pump.\n\n\n\n\n\n\n\n\n\n\n\nHelpful tip:  Before you begin the rest of the setup process, go to your pump menu and turn off Patterns under the basal menu settings. Make sure your Standard basal rate schedule is up-to-date and accurate.  Make sure your pump's temp basal type is set to units/hour (not percent).  Make sure your maximum basal rate and maximum bolus settings in the pump are reasonably set for your particular needs.\n\n\nAdd Pump\n\u2301\n\n\nYou will now need to do a few simple steps:\n\n\n\n\nMake sure your RileyLink is turned on and nearby, then you will see a RileyLink listed in this area of the settings.  Actually, you will see a list of any RileyLinks that are in the nearby area. Slide on the toggle for your RileyLink.\n\n\nAdd your pump's region, color and serial number.\n\n\nClick the Continue button to finish the addition of your pump.\n\n\n\n\n\n\n\n\n\n\n\nOnce your pump is setup, you will be finishing these steps:\n\n\n\n\nChange your pump time using the Loop app (and reading all the info on that screen)\n\n\nImport your pump's Standard basal rate schedule, and the maxium basal rate \n maximum bolus (collectively called \"delivery limits\" in Loop)\n\n\nSelect your pump's battery type (lithium or alakine)\n\n\nLeave the Preferred Data Souce on Event History \n\n\n\n\nEvent History must be selected for Nightscout to display temp basals, carbs, and boluses from Loop.\n  Event History must also be selected in order for prime events to be detected and NOT contribute to iob during site changes. \n\n\n\n\n\n\n\n\n\nOnce you finish those steps, click on the Settings button in the upper left corner to take you back to the Loop's settings menu.  If you ever need to change the pump time or access the RileyLink menus, you will be clicking on the pump's image in Loop settings.\n\n\nCGM Selection\n\u2301\n\n\nSelect one of the options from the menu:\n\n\n\n\nSof-Sensor/Enlite\n\n\nG4 Share Receiver\n\n\nG5/G6 Transmitter\n\n\n\n\nIf you select the G5/G6 Transmitter, you will be prompted to enter the transmitter ID number.  Don't forget to update your transmitter ID when you change transmitters, otherwise Loop will not work offline.\n\n\nIf you are a Dexcom user, don't forget to enter your Dexcom Share information (this will be the same as your Nightscout Bridge username and password, too).  By entering your Dexcom Share account info, Loop will be able to fetch from the Dexcom servers via the internet when local BG readings from spying on the receiver/transmitter directly are not working.  The switch between local readings to server data pull will happen automatically when needed.  When Loop is using data from Dexcom servers, a small cloud will appear above the BG reading in Loop.\n\n\n\n\nThe Share account login is the same as what you used to login to your Dexcom app on your iPhone.  \nDexcom Share account is not always the same login info as your Dexcom Clarity account.\n  For G4 users, the Share account is found in the account tab on the app.  For G5/G6 users, unfortunately, there is no information in the app displaying what your account name is.  The information is entered when you first login to the app and then is never displayed again, nor visible under any information screens.  If you have forgotten your G5/G6 account info, you can delete the Dexcom app and redownload it to try logging in again.  This will not cause a restart of any sensor sessions in progress.\n\n\n\n\nCorrection Range\n\u2301\n\n\nThis is where you set your blood glucose range that you would like Loop to correct to. Correction Range is not necessarily what your target BG range that you have discussed with your endocrinologist; generally the doctor's range may be much wider.  For example, you may keep a correction target of 100-100 for Loop to aim to, but use a desired BG target range of 90-150 when discussing things with your endo about \"time in range\".\n\n\n\n\n\n\n\n\n\n\n\nClick the + in the upper right corner to add  correction BG range(s).  You can have multiple ranges based on time of day, but the first setting of the day needs to begin at midnight to be consistent with your Medtronic pump.\n\n\nRanges will be entered in mg/dl or mmoL automatically based upon how your BG values appear your BG chart. By default they are set to mg/dl, however once BG values arrive in mmoL these settings can be entered in mmoL. If you are planning to use mmoL, be sure to wait to set your correction range until after you have started to receive BG values. If you do these in the wrong order, then your chart may have incorrect Y axis. If you come across this issue, you can also remove all of your target ranges and enter them again. Once you are receiving BG values in mmoL, you can add your correction range(s) in mmoL.\n\n\nCorrection ranges can be a single number, such as 100-100 mg/dL.  Generally, you don't want to keep correction ranges too wide otherwise Loop will be sluggish to correct.  Most users keep correction range no wider than about 0 to 20 mg/dl between the min and max values.\n\n\nOverride Ranges\n\u2301\n\n\nSet the \u201coverride\u201d ranges for temporary alternate correction ranges.  These override ranges will only be enacted when you specifically activate \"Pre-Meal or \u201cWorkout Mode\u201d using the buttons on the main Loop display or watchface.  While active, they replace the correction range for Loop's recommendations.  If the override ranges are not entered in this section, the buttons will remain grey and unusable on the main screen.\n\n\nPre-Meal\n\nThe pre-meal target is designed to be used to as an easy way to get a small amount of insulin delivered before a meal (similar to the \"eating-soon\" mode discussed in OpenAPS) in order to help control post-meal BG spikes.\n\n\nIf your normal target is 100-100 and pre-meal target is 80-80 mg/dl, for example, Loop will give you an extra push to get you to the lower target number before the meal.  The pre-meal target, when activated by pressing on the icon, will stay active for one hour, until carbs are entered, or until it is manually cancelled...whichever comes first.\n\n\nLoop will adjust any insulin bolus as needed based on the insulin provided during this pre-meal time.\n\n\nWorkout Mode\n\nWorkout Mode override targets are designed to temporarily set targets higher in anticipation of exercise or other activities which tend to make the Looper more insulin sensitive or need less insulin.  By setting a higher temp target ahead of activity, Loop will recommend less basal rate(s) than normally scheduled in order to to bring BGs up to the higher target.\n\n\nThe success of this strategy will be dependent on how far in advance of activity the temp target is set.  Generally, users set the target approximately 1-2 hours in advance of planned activities...but the optimal timing will depend on the activity, duration, and intensity.  Additionally, any insulin on board from recent boluses may overwhelm the Loop's ability to counteract exercise-induced lows through lower temp basals alone.\n\n\nSuspend Threshold\n\u2301\n\n\nSuspend Threshold is a required data entry for successful configuration of Loop. \nYour Loop will not turn green without setting this value.\n  This value affects both bolus and basal recommendations by Loop.\n\n\nBolus\n\u2301\n\n\n\n\nIf you are trying to bolus a meal while any part of the predicted BG curve is below this suspend threshold value, Loop will not recommend a bolus.  Instead, you will need to wait until your prediction curve is above the suspend threshold value in order to bolus.\n\n\n\n\nBasal\n\u2301\n\n\n\n\nIf your current or forecasted BG is below the suspend threshold, Loop will always recommend a temp basal rate of 0 u/hr.\n\n\n\n\nBasal Rates\n\u2301\n\n\nYour basal rates have already been initially populated from the pump's standard basal schedule as part of your initial setup, above.  Only one basal schedule may be set in each Loop app.  If you need to edit your basal schedule, simply make the edits as needed and then click on \nSave to Pump...\n button.  As a safety precaution, Loop will not allow you to only save the edits to the Loop app alone...you must successfully save the changes back to the pump to ensure Loop and the pump are in sync.  \n\n\n\n\nIf you make any basal edits and simply use the \nSettings\n button to go back to the menu without successfully saving to pump, the changes you made will not be saved in Loop app.  Loop v1.9 makes saving to pump a mandatory step to successfully editing basal rates.\n\n\n\n\nDelivery Limits\n\u2301\n\n\nThe maximum basal rate and maximum bolus settings are collectively refered to as Delivery Limits.  Your Loop will read these from the pump as part of adding a new pump to Loop.  For safety, similar to basal schedule, you must keep these values the same on both the Loop app and within the pump settings.  If you edit these settings in Loop app, always use the \nSave to Pump...\n button similar to the basal rate edits discussed above.\n\n\nMaximum Basal Rate\n\u2301\n\n\nMaximum basal rate is the maximum temporary basal rate that the Loop is allowed to enact to meet your correction range.  See the Operation section discussion for \nClose Loop\n for some suggestions regarding appropriate Maximum Basal Rate.\n\n\nMaximum Bolus\n\u2301\n\n\nEnter your desired single bolus maximum here.  For safety, don't set a maximum bolus limit any higher than your typical large meal bolus.\n\n\nInsulin Model\n\u2301\n\n\nThere are four Insulin Models to choose from; Walsh, Rapid-Acting Adults, Rapid-Acting Children, and Fiasp.  If you want to read the nitty-gritty discussion that went into the development of these new curves, you can see that in GitHub \nhere\n.\n\n\nYou can click on each model and see what each model's insulin activity curve looks like.  If you select the Walsh model, and adjust the insulin action duration (DIA default is 6 hours), the curve will be adjusted accordingly based on your selection.\n\n\n\n\n\n\n\n\n\nThe differences between the new (Rapid-Acting and Fiasp) models have to do with the timing of the Peak Activity of the insulin.  Currently, all the models are defaulted [in the code]( to an insulin duration of 360 minutes...but the peak activity of the various curves differs:\n\n\n\n\nRapid-acting adult curve peaks at 75 minutes\n\n\nRapid-acting child curve peaks at 65 minutes\n\n\nFiasp peaks curve peaks at 55 minutes\n\n\n\n\nAs the peak time decreases, the Loop will expect a quicker insulin impact on BG AND the tail of the insulin dose will be slightly less agressive compared to a curve with a later peak time.  In other words, Fiasp will be more powerful soon after a bolus and less powerful 5 hours later than an equal amount of insulin modeled using the other models.\n\n\nThe Walsh model's insulin duration can be set by the user from within the app.  The peak time of the Walsh curve is 100 min at a DIA of 4 hours.  As user adjusts DIA, the peak time will be dynamically adjusted.\n\n\nCarb Ratios\n\u2301\n\n\nClick the + in the upper right to add carb ratios for various times of day. Loop works best if you have tested and optimized your carb ratio settings for accuracy.\n\n\n\n\nBeware of other apps writing carbs to Health app\n\n\nIf you are using a third-party app (such as Spike or MyFitness) that can write carbohydrates to the phone's Health app, you will need to edit the permissions to make sure Loop doesn't double carb entries.  You should disable the third-party app's permissions in Health so that it can only \nread\n and not \nwrite\n.  See \nCarb Entries with Third Party apps\n for more information about this setting.\n\n\n\n\nInsulin Sensitivities\n\u2301\n\n\nClick the + in the upper right to add insulin sensitivities for various times of day. Loop works best if you have tested and optimized your ISF settings for accuracy.  Insulin sensitivities can change for many reasons including waiting too long to change your infusion set.  Loop will not auto-detect changes in ISF.\n\n\nClosed Loop\n\u2301\n\n\nThe Closed Loop switch controls the Loop operation mode for the application. This operation mode determines whether Loop automatically enacts recommendations (i.e., sets temp basals) to the insulin pump.  \n\n\n\n\n\n\n\n\n\nWhen the Closed Loop switch is in the (Off\n   ) position, Loop WILL NOT enact recommended temp basals automatically.  Instead, it will display Recommended Temp Basals on the main status display, just above the Glucose graph.  This is called \nOpen Loop\n, and is a good way to understand how Loop will function, and what type of recommendations it would make.  If you click on the recommended temp basal line while in Open Loop mode, Loop will implement the temp basal.\n\n\n\n\n\n\n\n\n\nWhen the Closed Loop switch is in the (\n   On) position, Loop WILL automatically enact recommended temp basals on the configured insulin pump. This is known as \nClosed Loop\n.  Typically, Loop will show the recommended temp basal just above the Glucose graph prior to automatically enacting it.  It may take a minute or so for the Loop to enact the recommended basal.  Once the temp basal has been enacted successfully on the pump, the recommended temp basal will disappear from the screen and the new temp basal will be represented in the insulin delivery graphics.\n\n\nIssue Report\n\u2301\n\n\nIf you run into problems or errors with your Loop, the Issue Report can be used to help identify where the problem is occurring.  The Issue Report is automatically generated and you can share it via email.  Frequently, if you go to Gitter or Facebook for help with a technical problem, an Issue Report will provide insight to what the potential problem is.", 
            "title": "Loop Settings"
        }, 
        {
            "location": "/setup/loop-settings/settings/#configuring-loop", 
            "text": "Now that you have the Loop app installed on your iPhone, we need to input the settings so that the Loop can work for you.   Normally, we would start by explaining the displays on an application, but your Loop won\u2019t have much showing initially until we get some basic settings input.  So, let\u2019s start by clicking on the Loop Settings button in the tool bar.  It looks like a little sprocket. On the settings screen that opens, click on Add Pump.      Helpful tip:  Before you begin the rest of the setup process, go to your pump menu and turn off Patterns under the basal menu settings. Make sure your Standard basal rate schedule is up-to-date and accurate.  Make sure your pump's temp basal type is set to units/hour (not percent).  Make sure your maximum basal rate and maximum bolus settings in the pump are reasonably set for your particular needs.", 
            "title": "Configuring Loop"
        }, 
        {
            "location": "/setup/loop-settings/settings/#add-pump", 
            "text": "You will now need to do a few simple steps:   Make sure your RileyLink is turned on and nearby, then you will see a RileyLink listed in this area of the settings.  Actually, you will see a list of any RileyLinks that are in the nearby area. Slide on the toggle for your RileyLink.  Add your pump's region, color and serial number.  Click the Continue button to finish the addition of your pump.      Once your pump is setup, you will be finishing these steps:   Change your pump time using the Loop app (and reading all the info on that screen)  Import your pump's Standard basal rate schedule, and the maxium basal rate   maximum bolus (collectively called \"delivery limits\" in Loop)  Select your pump's battery type (lithium or alakine)  Leave the Preferred Data Souce on Event History    Event History must be selected for Nightscout to display temp basals, carbs, and boluses from Loop.   Event History must also be selected in order for prime events to be detected and NOT contribute to iob during site changes.      Once you finish those steps, click on the Settings button in the upper left corner to take you back to the Loop's settings menu.  If you ever need to change the pump time or access the RileyLink menus, you will be clicking on the pump's image in Loop settings.", 
            "title": "Add Pump"
        }, 
        {
            "location": "/setup/loop-settings/settings/#cgm-selection", 
            "text": "Select one of the options from the menu:   Sof-Sensor/Enlite  G4 Share Receiver  G5/G6 Transmitter   If you select the G5/G6 Transmitter, you will be prompted to enter the transmitter ID number.  Don't forget to update your transmitter ID when you change transmitters, otherwise Loop will not work offline.  If you are a Dexcom user, don't forget to enter your Dexcom Share information (this will be the same as your Nightscout Bridge username and password, too).  By entering your Dexcom Share account info, Loop will be able to fetch from the Dexcom servers via the internet when local BG readings from spying on the receiver/transmitter directly are not working.  The switch between local readings to server data pull will happen automatically when needed.  When Loop is using data from Dexcom servers, a small cloud will appear above the BG reading in Loop.   The Share account login is the same as what you used to login to your Dexcom app on your iPhone.   Dexcom Share account is not always the same login info as your Dexcom Clarity account.   For G4 users, the Share account is found in the account tab on the app.  For G5/G6 users, unfortunately, there is no information in the app displaying what your account name is.  The information is entered when you first login to the app and then is never displayed again, nor visible under any information screens.  If you have forgotten your G5/G6 account info, you can delete the Dexcom app and redownload it to try logging in again.  This will not cause a restart of any sensor sessions in progress.", 
            "title": "CGM Selection"
        }, 
        {
            "location": "/setup/loop-settings/settings/#correction-range", 
            "text": "This is where you set your blood glucose range that you would like Loop to correct to. Correction Range is not necessarily what your target BG range that you have discussed with your endocrinologist; generally the doctor's range may be much wider.  For example, you may keep a correction target of 100-100 for Loop to aim to, but use a desired BG target range of 90-150 when discussing things with your endo about \"time in range\".      Click the + in the upper right corner to add  correction BG range(s).  You can have multiple ranges based on time of day, but the first setting of the day needs to begin at midnight to be consistent with your Medtronic pump.  Ranges will be entered in mg/dl or mmoL automatically based upon how your BG values appear your BG chart. By default they are set to mg/dl, however once BG values arrive in mmoL these settings can be entered in mmoL. If you are planning to use mmoL, be sure to wait to set your correction range until after you have started to receive BG values. If you do these in the wrong order, then your chart may have incorrect Y axis. If you come across this issue, you can also remove all of your target ranges and enter them again. Once you are receiving BG values in mmoL, you can add your correction range(s) in mmoL.  Correction ranges can be a single number, such as 100-100 mg/dL.  Generally, you don't want to keep correction ranges too wide otherwise Loop will be sluggish to correct.  Most users keep correction range no wider than about 0 to 20 mg/dl between the min and max values.", 
            "title": "Correction Range"
        }, 
        {
            "location": "/setup/loop-settings/settings/#override-ranges", 
            "text": "Set the \u201coverride\u201d ranges for temporary alternate correction ranges.  These override ranges will only be enacted when you specifically activate \"Pre-Meal or \u201cWorkout Mode\u201d using the buttons on the main Loop display or watchface.  While active, they replace the correction range for Loop's recommendations.  If the override ranges are not entered in this section, the buttons will remain grey and unusable on the main screen.  Pre-Meal \nThe pre-meal target is designed to be used to as an easy way to get a small amount of insulin delivered before a meal (similar to the \"eating-soon\" mode discussed in OpenAPS) in order to help control post-meal BG spikes.  If your normal target is 100-100 and pre-meal target is 80-80 mg/dl, for example, Loop will give you an extra push to get you to the lower target number before the meal.  The pre-meal target, when activated by pressing on the icon, will stay active for one hour, until carbs are entered, or until it is manually cancelled...whichever comes first.  Loop will adjust any insulin bolus as needed based on the insulin provided during this pre-meal time.  Workout Mode \nWorkout Mode override targets are designed to temporarily set targets higher in anticipation of exercise or other activities which tend to make the Looper more insulin sensitive or need less insulin.  By setting a higher temp target ahead of activity, Loop will recommend less basal rate(s) than normally scheduled in order to to bring BGs up to the higher target.  The success of this strategy will be dependent on how far in advance of activity the temp target is set.  Generally, users set the target approximately 1-2 hours in advance of planned activities...but the optimal timing will depend on the activity, duration, and intensity.  Additionally, any insulin on board from recent boluses may overwhelm the Loop's ability to counteract exercise-induced lows through lower temp basals alone.", 
            "title": "Override Ranges"
        }, 
        {
            "location": "/setup/loop-settings/settings/#suspend-threshold", 
            "text": "Suspend Threshold is a required data entry for successful configuration of Loop.  Your Loop will not turn green without setting this value.   This value affects both bolus and basal recommendations by Loop.", 
            "title": "Suspend Threshold"
        }, 
        {
            "location": "/setup/loop-settings/settings/#bolus", 
            "text": "If you are trying to bolus a meal while any part of the predicted BG curve is below this suspend threshold value, Loop will not recommend a bolus.  Instead, you will need to wait until your prediction curve is above the suspend threshold value in order to bolus.", 
            "title": "Bolus"
        }, 
        {
            "location": "/setup/loop-settings/settings/#basal", 
            "text": "If your current or forecasted BG is below the suspend threshold, Loop will always recommend a temp basal rate of 0 u/hr.", 
            "title": "Basal"
        }, 
        {
            "location": "/setup/loop-settings/settings/#basal-rates", 
            "text": "Your basal rates have already been initially populated from the pump's standard basal schedule as part of your initial setup, above.  Only one basal schedule may be set in each Loop app.  If you need to edit your basal schedule, simply make the edits as needed and then click on  Save to Pump...  button.  As a safety precaution, Loop will not allow you to only save the edits to the Loop app alone...you must successfully save the changes back to the pump to ensure Loop and the pump are in sync.     If you make any basal edits and simply use the  Settings  button to go back to the menu without successfully saving to pump, the changes you made will not be saved in Loop app.  Loop v1.9 makes saving to pump a mandatory step to successfully editing basal rates.", 
            "title": "Basal Rates"
        }, 
        {
            "location": "/setup/loop-settings/settings/#delivery-limits", 
            "text": "The maximum basal rate and maximum bolus settings are collectively refered to as Delivery Limits.  Your Loop will read these from the pump as part of adding a new pump to Loop.  For safety, similar to basal schedule, you must keep these values the same on both the Loop app and within the pump settings.  If you edit these settings in Loop app, always use the  Save to Pump...  button similar to the basal rate edits discussed above.", 
            "title": "Delivery Limits"
        }, 
        {
            "location": "/setup/loop-settings/settings/#maximum-basal-rate", 
            "text": "Maximum basal rate is the maximum temporary basal rate that the Loop is allowed to enact to meet your correction range.  See the Operation section discussion for  Close Loop  for some suggestions regarding appropriate Maximum Basal Rate.", 
            "title": "Maximum Basal Rate"
        }, 
        {
            "location": "/setup/loop-settings/settings/#maximum-bolus", 
            "text": "Enter your desired single bolus maximum here.  For safety, don't set a maximum bolus limit any higher than your typical large meal bolus.", 
            "title": "Maximum Bolus"
        }, 
        {
            "location": "/setup/loop-settings/settings/#insulin-model", 
            "text": "There are four Insulin Models to choose from; Walsh, Rapid-Acting Adults, Rapid-Acting Children, and Fiasp.  If you want to read the nitty-gritty discussion that went into the development of these new curves, you can see that in GitHub  here .  You can click on each model and see what each model's insulin activity curve looks like.  If you select the Walsh model, and adjust the insulin action duration (DIA default is 6 hours), the curve will be adjusted accordingly based on your selection.     The differences between the new (Rapid-Acting and Fiasp) models have to do with the timing of the Peak Activity of the insulin.  Currently, all the models are defaulted [in the code]( to an insulin duration of 360 minutes...but the peak activity of the various curves differs:   Rapid-acting adult curve peaks at 75 minutes  Rapid-acting child curve peaks at 65 minutes  Fiasp peaks curve peaks at 55 minutes   As the peak time decreases, the Loop will expect a quicker insulin impact on BG AND the tail of the insulin dose will be slightly less agressive compared to a curve with a later peak time.  In other words, Fiasp will be more powerful soon after a bolus and less powerful 5 hours later than an equal amount of insulin modeled using the other models.  The Walsh model's insulin duration can be set by the user from within the app.  The peak time of the Walsh curve is 100 min at a DIA of 4 hours.  As user adjusts DIA, the peak time will be dynamically adjusted.", 
            "title": "Insulin Model"
        }, 
        {
            "location": "/setup/loop-settings/settings/#carb-ratios", 
            "text": "Click the + in the upper right to add carb ratios for various times of day. Loop works best if you have tested and optimized your carb ratio settings for accuracy.   Beware of other apps writing carbs to Health app  If you are using a third-party app (such as Spike or MyFitness) that can write carbohydrates to the phone's Health app, you will need to edit the permissions to make sure Loop doesn't double carb entries.  You should disable the third-party app's permissions in Health so that it can only  read  and not  write .  See  Carb Entries with Third Party apps  for more information about this setting.", 
            "title": "Carb Ratios"
        }, 
        {
            "location": "/setup/loop-settings/settings/#insulin-sensitivities", 
            "text": "Click the + in the upper right to add insulin sensitivities for various times of day. Loop works best if you have tested and optimized your ISF settings for accuracy.  Insulin sensitivities can change for many reasons including waiting too long to change your infusion set.  Loop will not auto-detect changes in ISF.", 
            "title": "Insulin Sensitivities"
        }, 
        {
            "location": "/setup/loop-settings/settings/#closed-loop", 
            "text": "The Closed Loop switch controls the Loop operation mode for the application. This operation mode determines whether Loop automatically enacts recommendations (i.e., sets temp basals) to the insulin pump.       When the Closed Loop switch is in the (Off    ) position, Loop WILL NOT enact recommended temp basals automatically.  Instead, it will display Recommended Temp Basals on the main status display, just above the Glucose graph.  This is called  Open Loop , and is a good way to understand how Loop will function, and what type of recommendations it would make.  If you click on the recommended temp basal line while in Open Loop mode, Loop will implement the temp basal.     When the Closed Loop switch is in the (    On) position, Loop WILL automatically enact recommended temp basals on the configured insulin pump. This is known as  Closed Loop .  Typically, Loop will show the recommended temp basal just above the Glucose graph prior to automatically enacting it.  It may take a minute or so for the Loop to enact the recommended basal.  Once the temp basal has been enacted successfully on the pump, the recommended temp basal will disappear from the screen and the new temp basal will be represented in the insulin delivery graphics.", 
            "title": "Closed Loop"
        }, 
        {
            "location": "/setup/loop-settings/settings/#issue-report", 
            "text": "If you run into problems or errors with your Loop, the Issue Report can be used to help identify where the problem is occurring.  The Issue Report is automatically generated and you can share it via email.  Frequently, if you go to Gitter or Facebook for help with a technical problem, an Issue Report will provide insight to what the potential problem is.", 
            "title": "Issue Report"
        }, 
        {
            "location": "/setup/loop-settings/services/", 
            "text": "Configuring Loop - Services\n\u2301\n\n\n\n\nThe services listed in this section are \nOPTIONAL\n.  You can choose to leave them empty and your Loop will still work.\n\n\n\n\nNightscout\n\u2301\n\n\nIf you have an existing Nightscout site, add the Site URL and API Secret to have your Loop data transmitted to your Nightscout site. If you can\u2019t remember your API Secret, it can be found under Settings, Reveal Config Vars for Heroku sites (or Application Settings, Connection Strings for Azure sites). \n\n\nThe two most common errors in filling out this section are:\n\n\n\n\nFailure to use \nhttps://\n  in the site URL.  If you use \nhttp://\n (see how that doesn't have the \"s\" at the end?), you will get an error message about a App Transport Security policy.  Take a look at the example site in the field before you start filling in that line, if you want an example.\n\n\nHaving a trailing slash on the end of the URL.  If you copy and paste from a web browser, make sure to delete the trailing slash on the URL entry.\n\n\n\n\nLoggly\n\u2301\n\n\nLoggly\n is a free logging service.  If you sign up for an account, you'll need to go under Source Setup and then Customer Tokens.  Copy and paste your customer token into your Loop App settings for Loggly.\n\n\n\n\n\n\n\n\n\nAmplitude\n\u2301\n\n\nAmplitude\n is a remote event monitoring service and can be used to quickly identify errors and events with Loop.  Amplitude stores the events and allows you to view those events as points in time.  To retrieve the details of the events you will need to look at corresponding mLab data entries to get a complete picture of the issues.  If you sign up for a free account with Amplitude, you will be given an API Key that you can enter here to have Loop integration setup.", 
            "title": "Loop Services"
        }, 
        {
            "location": "/setup/loop-settings/services/#configuring-loop-services", 
            "text": "The services listed in this section are  OPTIONAL .  You can choose to leave them empty and your Loop will still work.", 
            "title": "Configuring Loop - Services"
        }, 
        {
            "location": "/setup/loop-settings/services/#nightscout", 
            "text": "If you have an existing Nightscout site, add the Site URL and API Secret to have your Loop data transmitted to your Nightscout site. If you can\u2019t remember your API Secret, it can be found under Settings, Reveal Config Vars for Heroku sites (or Application Settings, Connection Strings for Azure sites).   The two most common errors in filling out this section are:   Failure to use  https://   in the site URL.  If you use  http://  (see how that doesn't have the \"s\" at the end?), you will get an error message about a App Transport Security policy.  Take a look at the example site in the field before you start filling in that line, if you want an example.  Having a trailing slash on the end of the URL.  If you copy and paste from a web browser, make sure to delete the trailing slash on the URL entry.", 
            "title": "Nightscout"
        }, 
        {
            "location": "/setup/loop-settings/services/#loggly", 
            "text": "Loggly  is a free logging service.  If you sign up for an account, you'll need to go under Source Setup and then Customer Tokens.  Copy and paste your customer token into your Loop App settings for Loggly.", 
            "title": "Loggly"
        }, 
        {
            "location": "/setup/loop-settings/services/#amplitude", 
            "text": "Amplitude  is a remote event monitoring service and can be used to quickly identify errors and events with Loop.  Amplitude stores the events and allows you to view those events as points in time.  To retrieve the details of the events you will need to look at corresponding mLab data entries to get a complete picture of the issues.  If you sign up for a free account with Amplitude, you will be given an API Key that you can enter here to have Loop integration setup.", 
            "title": "Amplitude"
        }, 
        {
            "location": "/setup/loop-settings/rileylink_menu/", 
            "text": "Configuring Loop - RileyLink Menu\n\u2301\n\n\nRileyLink has a little switch on the side of the circuit board that is the power switch.  The \u201con\u201d position is with the switch towards the antenna (the black cylinder on the RileyLink).  Your RileyLink will have a solid green light showing when the device is on and connected to the iPhone's BT.  A blue light will flash briefly during pump communications.\n\n\nThe RileyLink menu is accessed by clicking on the name of the connected RileyLink in the Loop Settings.  There are several important commands in the RileyLink menu that you should be aware of.\n\n\nSide Note: The device searching indicator (circle on the right of Devices line) will always be spinning, even after a RileyLink is successfully connected.  That is an indicator of a healthy Loop app operation.\n\n\nIf you are ever going to be near other Loop users, you may want to consider renaming your RileyLink to a new name (like this one is renamed ToughRL) so that you can pick it out of a crowd.  Click on the RileyLink line, and the RileyLink's menu will be displayed.  At the top of this menu is a line for the device name.  Click on the that line and you will be able to change the name of your RileyLink.  (The new name may need to sit for a few seconds before exiting back out of the naming screen for it to save itself. RileyLink must be connected and on to change the name.)\n\n\nDevice\n\u2301\n\n\nThe settings under the Device section are mostly for your information only.  However, you can rename your RileyLink to something more unique.  This is a good idea if you own more than one or are ever in the presence of more than one RileyLink...you will be able to pick out your connection easier amongst a crowd of \u201cRileyLinks\u201d.\n\n\nThe \nSignal Strength\n showing under this area of the menu is the signal strength of the BT with the iPhone.  It is \nnot\n the signal strength of the radio communications with the pump.  The lower the number, the stronger the BT.  As you move the RL and iPhone closer/farther apart, you will be able to see the signal strength change.\n\n\nThe Connections Status should say \nconnected\n if the RileyLink is connected to the iPhone BT.  If the status says \nconnecting\n then you may want to try toggling the iPhone's BT and/or RileyLink's power off/on to help reconnect.\n\n\n\n\n\n\n\n\n\nPump\n\u2301\n\n\nThe Pump ID and Pump Model should be automatically filled in as part of the initial pump setup. \n\n\nCommands\n\u2301\n\n\nThere are many useful commands that the RileyLink can issue to the pump.  Most are simply for gathering information from the pump, but several are important commands to getting your Loop to turn and stay green.\n\n\nTune Radio Frequency\n\u2301\n\n\nThe pump and RileyLink communicate via radio frequency.  In order to have the best possible communications, RileyLink will test a range of frequencies in order to see which provides the strongest response with the pump.  In the event that pump comms fail for over 14 minutes, Loop will automatically retune the RileyLink to see if perhaps the strongest frequency has changed since it was last tuned.\n\n\nWhen you first setup your Loop app, RileyLink will automatically perform a  \nTune Radio Frequency\n to get pump comms started.  You can manually tune your radio frequency at any time by clicking on the command.  It may take about a minute, but soon you will see a list of frequencies with the tuning strength results beside each frequency.  The signal with the lowest value is the strongest and RileyLink will use that frequency (read more about that \nhere\n).  Exit out of that screen and the command line will now show the frequency (916.xx MHz for North American pumps) and the timestamp of the tune.  Now your pump and RileyLink are tuned to talk to each other.  When people suggest \"did you (re)tune your RileyLink?\" they are referring to this line's command.\n\n\n\n\nA common troubleshooting recommendation is to tune your RL when you have poor pump communications.  Just keep in mind that the Loop code has a function that it will automatically retune in the event of poor pump communications within 14 minutes.  Loop does this automatically.  Manually retuning is only useful for impatience purposes.  If Loop has failed longer than 20 minutes, it will have already likely tried a retune...but knock yourself out if you want to try it again manually.\n\n\n\n\nChange Time\n\u2301\n\n\nLoop automatically prompts you to set your pump time using the Loop app as part of initial Loop setup.  It is important that Loop and your pump share a common time setting, otherwise Looping will fail.  If you are traveling through timezones or dealing with daylight savings time, please read up on \nhow to safely change your pump time\n.\n\n\n\n\nAlways use the RileyLink's \nChange Time\n command to change pump time.  If you fail to set the pump time by using the RileyLink, Loop will not function properly.  Do not use the pump menus to change your pump's time when Looping.\n\n\n\n\nMySentry Pair\n\u2301\n\n\nMySentry Pairing\n is for x23 and x54 pumps only.  Follow the directions as shown in the RileyLink command screen for MySentry pairing.  You do not have to worry about this command if you are using an x15 or x22 model pump, as they do not have MySentry.\n\n\n\n\nIf you do not perform a MySentry pairing and have an x23 or x54 pump, your loop will only turn green every 15 minutes.\n\n\n\n\nOther commands\n\u2301\n\n\nFetch Recent History, Fetch Enlite Glucose, Get Pump Model, Send Button Press, Read Pump Status, and Read Basal Schedule are all ways of asking the pump for information you might be interested in.  They are not part of setting up the Loop and will not affect Loop operations.  Enable Diagnostic LEDs, Discover Commands, and RileyLink Statistics are commands that are sometimes used by developers to aid in app troubleshooting and debugging.  They don't impact Loop operations.\n\n\nFetch Recent History\n polls the pump for recent pump events such as boluses, temp basals, primes, rewinds, etc.  The amount of information transmitted for a Fetch Recent History is usually quite large and, as a result, may be more prone to an early failure before it succeeds.  If the first Fetch Recent History fails, sometimes it is helpful to use the Send Button Press command to sort of \"wake up\" the pump in preparation for communications.\n\n\nFetch Enlite Glucose\n is only useful for Medtronic CGM users.  The Fetch Enlite Glucose command will pull the recent glucose values saved in the pump history.  Dexcom users do not store any glucose data in the pump.\n\n\nGet Pump Model\n simply returns the pump's model.\n\n\nSend Button Press\n can be useful to see if the communication between the RileyLink and pump is working.  If successful, the screen on the pump will light up and Loop will confirm the button press with a \nsuccess\n message.  If pump comms are failing, sending a successful button press can help \"wake up\" a pump that perhaps has not been communicating well.\n\n\nRead Pump Status\n is also nice quick pump read for reservoir volume, pump battery voltage, and pump status (bolusing or suspending).  For x23 and x54 pump users, this command will provide the exact pump battery voltage instead of the 25/50/75/100% levels that are reported otherwise.\n\n\nRead Basal Schedule\n will pull the active basal pattern from the pump so you can review what the current settings are without using pump menu.\n\n\nEnable Diagnostic LEDs\n will turn on more LED flashes on the RileyLink while it is operating.  You will see more blue flashing lights as the RileyLink communicates with the pump.  If you tried turning on this feature and decide later that you just don't want to see so many flashing lights, simply reboot the RileyLink by turning the power switch off/on.  This will reset the LEDs.\n\n\nDiscover Commands\n just ignore this menu item.\n\n\nRileyLink Statistics\n tracks how long your RileyLink has stayed successfully operating and gives the developers some useful information about the stability of the RL operations.  It really doesn't provide much to the average Loop user, however.", 
            "title": "RileyLink menu"
        }, 
        {
            "location": "/setup/loop-settings/rileylink_menu/#configuring-loop-rileylink-menu", 
            "text": "RileyLink has a little switch on the side of the circuit board that is the power switch.  The \u201con\u201d position is with the switch towards the antenna (the black cylinder on the RileyLink).  Your RileyLink will have a solid green light showing when the device is on and connected to the iPhone's BT.  A blue light will flash briefly during pump communications.  The RileyLink menu is accessed by clicking on the name of the connected RileyLink in the Loop Settings.  There are several important commands in the RileyLink menu that you should be aware of.  Side Note: The device searching indicator (circle on the right of Devices line) will always be spinning, even after a RileyLink is successfully connected.  That is an indicator of a healthy Loop app operation.  If you are ever going to be near other Loop users, you may want to consider renaming your RileyLink to a new name (like this one is renamed ToughRL) so that you can pick it out of a crowd.  Click on the RileyLink line, and the RileyLink's menu will be displayed.  At the top of this menu is a line for the device name.  Click on the that line and you will be able to change the name of your RileyLink.  (The new name may need to sit for a few seconds before exiting back out of the naming screen for it to save itself. RileyLink must be connected and on to change the name.)", 
            "title": "Configuring Loop - RileyLink Menu"
        }, 
        {
            "location": "/setup/loop-settings/rileylink_menu/#device", 
            "text": "The settings under the Device section are mostly for your information only.  However, you can rename your RileyLink to something more unique.  This is a good idea if you own more than one or are ever in the presence of more than one RileyLink...you will be able to pick out your connection easier amongst a crowd of \u201cRileyLinks\u201d.  The  Signal Strength  showing under this area of the menu is the signal strength of the BT with the iPhone.  It is  not  the signal strength of the radio communications with the pump.  The lower the number, the stronger the BT.  As you move the RL and iPhone closer/farther apart, you will be able to see the signal strength change.  The Connections Status should say  connected  if the RileyLink is connected to the iPhone BT.  If the status says  connecting  then you may want to try toggling the iPhone's BT and/or RileyLink's power off/on to help reconnect.", 
            "title": "Device"
        }, 
        {
            "location": "/setup/loop-settings/rileylink_menu/#pump", 
            "text": "The Pump ID and Pump Model should be automatically filled in as part of the initial pump setup.", 
            "title": "Pump"
        }, 
        {
            "location": "/setup/loop-settings/rileylink_menu/#commands", 
            "text": "There are many useful commands that the RileyLink can issue to the pump.  Most are simply for gathering information from the pump, but several are important commands to getting your Loop to turn and stay green.", 
            "title": "Commands"
        }, 
        {
            "location": "/setup/loop-settings/rileylink_menu/#tune-radio-frequency", 
            "text": "The pump and RileyLink communicate via radio frequency.  In order to have the best possible communications, RileyLink will test a range of frequencies in order to see which provides the strongest response with the pump.  In the event that pump comms fail for over 14 minutes, Loop will automatically retune the RileyLink to see if perhaps the strongest frequency has changed since it was last tuned.  When you first setup your Loop app, RileyLink will automatically perform a   Tune Radio Frequency  to get pump comms started.  You can manually tune your radio frequency at any time by clicking on the command.  It may take about a minute, but soon you will see a list of frequencies with the tuning strength results beside each frequency.  The signal with the lowest value is the strongest and RileyLink will use that frequency (read more about that  here ).  Exit out of that screen and the command line will now show the frequency (916.xx MHz for North American pumps) and the timestamp of the tune.  Now your pump and RileyLink are tuned to talk to each other.  When people suggest \"did you (re)tune your RileyLink?\" they are referring to this line's command.   A common troubleshooting recommendation is to tune your RL when you have poor pump communications.  Just keep in mind that the Loop code has a function that it will automatically retune in the event of poor pump communications within 14 minutes.  Loop does this automatically.  Manually retuning is only useful for impatience purposes.  If Loop has failed longer than 20 minutes, it will have already likely tried a retune...but knock yourself out if you want to try it again manually.", 
            "title": "Tune Radio Frequency"
        }, 
        {
            "location": "/setup/loop-settings/rileylink_menu/#change-time", 
            "text": "Loop automatically prompts you to set your pump time using the Loop app as part of initial Loop setup.  It is important that Loop and your pump share a common time setting, otherwise Looping will fail.  If you are traveling through timezones or dealing with daylight savings time, please read up on  how to safely change your pump time .   Always use the RileyLink's  Change Time  command to change pump time.  If you fail to set the pump time by using the RileyLink, Loop will not function properly.  Do not use the pump menus to change your pump's time when Looping.", 
            "title": "Change Time"
        }, 
        {
            "location": "/setup/loop-settings/rileylink_menu/#mysentry-pair", 
            "text": "MySentry Pairing  is for x23 and x54 pumps only.  Follow the directions as shown in the RileyLink command screen for MySentry pairing.  You do not have to worry about this command if you are using an x15 or x22 model pump, as they do not have MySentry.   If you do not perform a MySentry pairing and have an x23 or x54 pump, your loop will only turn green every 15 minutes.", 
            "title": "MySentry Pair"
        }, 
        {
            "location": "/setup/loop-settings/rileylink_menu/#other-commands", 
            "text": "Fetch Recent History, Fetch Enlite Glucose, Get Pump Model, Send Button Press, Read Pump Status, and Read Basal Schedule are all ways of asking the pump for information you might be interested in.  They are not part of setting up the Loop and will not affect Loop operations.  Enable Diagnostic LEDs, Discover Commands, and RileyLink Statistics are commands that are sometimes used by developers to aid in app troubleshooting and debugging.  They don't impact Loop operations.  Fetch Recent History  polls the pump for recent pump events such as boluses, temp basals, primes, rewinds, etc.  The amount of information transmitted for a Fetch Recent History is usually quite large and, as a result, may be more prone to an early failure before it succeeds.  If the first Fetch Recent History fails, sometimes it is helpful to use the Send Button Press command to sort of \"wake up\" the pump in preparation for communications.  Fetch Enlite Glucose  is only useful for Medtronic CGM users.  The Fetch Enlite Glucose command will pull the recent glucose values saved in the pump history.  Dexcom users do not store any glucose data in the pump.  Get Pump Model  simply returns the pump's model.  Send Button Press  can be useful to see if the communication between the RileyLink and pump is working.  If successful, the screen on the pump will light up and Loop will confirm the button press with a  success  message.  If pump comms are failing, sending a successful button press can help \"wake up\" a pump that perhaps has not been communicating well.  Read Pump Status  is also nice quick pump read for reservoir volume, pump battery voltage, and pump status (bolusing or suspending).  For x23 and x54 pump users, this command will provide the exact pump battery voltage instead of the 25/50/75/100% levels that are reported otherwise.  Read Basal Schedule  will pull the active basal pattern from the pump so you can review what the current settings are without using pump menu.  Enable Diagnostic LEDs  will turn on more LED flashes on the RileyLink while it is operating.  You will see more blue flashing lights as the RileyLink communicates with the pump.  If you tried turning on this feature and decide later that you just don't want to see so many flashing lights, simply reboot the RileyLink by turning the power switch off/on.  This will reset the LEDs.  Discover Commands  just ignore this menu item.  RileyLink Statistics  tracks how long your RileyLink has stayed successfully operating and gives the developers some useful information about the stability of the RL operations.  It really doesn't provide much to the average Loop user, however.", 
            "title": "Other commands"
        }, 
        {
            "location": "/setup/loop-settings/pump/", 
            "text": "Configuring Loop - Pump Setup\n\u2301\n\n\nNow that you are done with your Loop's version of your pump settings, you also need to setup your pump similarly.  Generally, the setup of the pump is similar to setting up any pump for non-looping use.  One notable exception: you will need to change those batteries more often with Looping.  Loop will drain pump batteries much faster than regular pump regimes, and Loop failures will increase in frequency as the pump battery gets low.  Roughly, a lithium AAA battery lasts about 15-16 days on an x23 or x54 pump using Loop.\n\n\nWhile not every setting NEEDS to match between Loop and pump, it is safer to have them match in case your Loop fails and you revert back to normal pump use.  You should program the pump settings to match for:\n\n\n\n\nCarb ratio\n\n\nBasal rates (Standard schedule)\n\n\nInsulin Sensitivity Factor (ISF)\n\n\nMaximum bolus\n\n\nMaximum basal rate\n\n\nBG targets\n\n\n\n\nBasal schedule is the one pump setting that is occassionally used by Loop app during normal looping.  When your Loop app decides that the basal rate scheduled in the Loop app is sufficient (i.e., Loop doesn't need to set a temp basal different than the regularly scheduled basal), Loop will cancel any currently running temp basals and let the pump just implement the scheduled basal.  This method works best when the pump and Loop are consistent with their basal rate schedules.  Loop v1.9 maintains consistency between the two by (1) automatically populating Loop's initial basal rates by reading the pump's existing Standard basal rate schedule when you setup Loop app and (2) any subsequent edits to Loop's basal schedule will need to be saved by writing those changes to the pump at the same time.  This ensures that Loop and the pump are always working on the same information for basal rates.  \nTherefore, if you change basal rates later...make sure to do those changes in the Loop app and use Loop to save them to the pump.  If you make changes directly in the pump, Loop will not automatically know about those changes and you will cause a mismatch.\n\n\nKeep \nmax basal and max bolus\n consistent between the pump and Loop.  Loop will initially read these Delivery Limits as part of Loop setup, and so consistency will be maintained so long as you use Loop app to make changes to those settings and use Loop to save the changes to the pump.  If you manually lower those settings directly in the pump, bypassing Loop, you will likely cause a Loop failure later when Loop tries to set a maximum basal/bolus higher than the edited pump setting.\n\n\n\n\nThree settings in particular need to be done, OR ELSE YOUR LOOP WON'T WORK:\n\n    * Set \ntemp basal type\n to \ninsulin rate (u/h)\n\n    * Set \nRemote Devices\n to \nON\n and enter any random ID (000000 will work). This settings is found in the pump's Utilities menu (for x23 continue to Connect Devices, Remotes) and turn \nON\n the Remote Options.\n\n    * Cancel any currently running extended or dual wave boluses.  Loop cannot loop with those running.", 
            "title": "Pump Setup"
        }, 
        {
            "location": "/setup/loop-settings/pump/#configuring-loop-pump-setup", 
            "text": "Now that you are done with your Loop's version of your pump settings, you also need to setup your pump similarly.  Generally, the setup of the pump is similar to setting up any pump for non-looping use.  One notable exception: you will need to change those batteries more often with Looping.  Loop will drain pump batteries much faster than regular pump regimes, and Loop failures will increase in frequency as the pump battery gets low.  Roughly, a lithium AAA battery lasts about 15-16 days on an x23 or x54 pump using Loop.  While not every setting NEEDS to match between Loop and pump, it is safer to have them match in case your Loop fails and you revert back to normal pump use.  You should program the pump settings to match for:   Carb ratio  Basal rates (Standard schedule)  Insulin Sensitivity Factor (ISF)  Maximum bolus  Maximum basal rate  BG targets   Basal schedule is the one pump setting that is occassionally used by Loop app during normal looping.  When your Loop app decides that the basal rate scheduled in the Loop app is sufficient (i.e., Loop doesn't need to set a temp basal different than the regularly scheduled basal), Loop will cancel any currently running temp basals and let the pump just implement the scheduled basal.  This method works best when the pump and Loop are consistent with their basal rate schedules.  Loop v1.9 maintains consistency between the two by (1) automatically populating Loop's initial basal rates by reading the pump's existing Standard basal rate schedule when you setup Loop app and (2) any subsequent edits to Loop's basal schedule will need to be saved by writing those changes to the pump at the same time.  This ensures that Loop and the pump are always working on the same information for basal rates.   Therefore, if you change basal rates later...make sure to do those changes in the Loop app and use Loop to save them to the pump.  If you make changes directly in the pump, Loop will not automatically know about those changes and you will cause a mismatch.  Keep  max basal and max bolus  consistent between the pump and Loop.  Loop will initially read these Delivery Limits as part of Loop setup, and so consistency will be maintained so long as you use Loop app to make changes to those settings and use Loop to save the changes to the pump.  If you manually lower those settings directly in the pump, bypassing Loop, you will likely cause a Loop failure later when Loop tries to set a maximum basal/bolus higher than the edited pump setting.   Three settings in particular need to be done, OR ELSE YOUR LOOP WON'T WORK: \n    * Set  temp basal type  to  insulin rate (u/h) \n    * Set  Remote Devices  to  ON  and enter any random ID (000000 will work). This settings is found in the pump's Utilities menu (for x23 continue to Connect Devices, Remotes) and turn  ON  the Remote Options. \n    * Cancel any currently running extended or dual wave boluses.  Loop cannot loop with those running.", 
            "title": "Configuring Loop - Pump Setup"
        }, 
        {
            "location": "/setup/update/updating/", 
            "text": "How to Update Loop\n\u2301\n\n\nWhen a new version of Loop is released, you can click \nHERE\n to read what features or fixes were a part of the new release.\n\n\n\n\nThe process to update is very similar to the original building of Loop app, except you get to skip several of the first steps.  The basic steps are:\n\n\n\n\nUpdate iOS, macOS, Xcode, and/or watchOS\n\n\nDownload new Loop source code\n\n\nAdd any customizations\n\n\nSign all four targets\n\n\nBuild app\n\n\n\n\n\n\nUpdate Apple devices\n\u2301\n\n\nBetween Loop app builds, there's a high liklihood that Apple has updated one or more of the systems involved in your Loop app; your Apple Developer license agreement, your iPhone's iOS, your computer's macOS, your Xcode app, and/or your watchOS.  \nIf you miss some of the updates, you may run into build problems.\n  You can check for macOS and Xcode updates using the App Store link under the apple logo in your computer display's upper left corner.  Check below to make sure your equipment is running the current versions of the various OS.\n\n\n\n\nmacOS High Sierra\n: macOS 10.13.6\n\n\nXcode\n: Xcode 9.4.1\n\n\niPhone\n: iOS 11.4\n\n\n\n\nDownload new Loop source code\n\u2301\n\n\nYou can use these links to download new versions of the Loop source code.  These links will always provide the most recent version of Loop:\n\n\n\n\n\nLoop: Master branch source code\n\n\n\n\n\n\nOR\n\n\nLoop: Dev branch source code\n\n\n\n\nFYI: The Loop source code resides in \nGitHub\n within a repository.  A repository is kind of like a project's bookshelf, holding various books (aka branches) of a project.  The master branch is considered a stable version.  Any new features or options are first tested in a dev (short for \"development\") branch of the Loop.  New or inexperienced users should not build from the dev branch of Loop.  So if you hear of \"new features in dev\", these are things that may be eventually merged into the master branch once any bugs are worked out.\n\n\n\n\nIMPORTANT NOTES: Best practice is to leave your Loop source code in your Downloads folder.  If you store your Loop code a different folder than Downloads (such as your Documents folder or Desktop), make sure the specified folder is \nnot\n an iCloud drive.  Storing your Loop code in an iCloud drive folder will prevent Loop from building successfully.  How do you know if a folder is an iCloud drive?  Check your System Preferences.  If your System Preferences for iCloud is set as shown below, your Documents and Desktop folders are iCloud drives and \nNOT\n appropriate places to save your Loop download.\n\n\n\n\n\n\nDepending on your browser and settings, your Loop download may or may not automatically unzip.  If it does not unzip automatically, you can right-click on the zip file and choose to \"Open With\" Archive Utility.  This will create a blue folder called \nLoop-master\n.  HOWEVER, if you already have an existing \nLoop-master\n folder from a previous download, the name of the next download will be something like \nLoop-master (1)\n.  The problem with that folder name is that it contains a space...and spaces in the name will cause your Loop build to fail.  So, either delete old copies of Loop before downloading/unzipping or rename the folder(s) to ensure that NO SPACES are in the folder name.\n\n\n\n\n\n\n\n\n\nAdd customizations\n\u2301\n\n\nAdd or redo any customizations, if needed.  These will not be carried over automatically from the old app.  Be sure to read up in the \ncode customizations section\n before building, as there may be new customizations available since the previous build.\n\n\nSign Targets and Build\n\u2301\n\n\nSign the four targets and rebuild.  Just make sure to pick your paid developer team, if you have one.\n\n\nBuild Errors\n\u2301\n\n\nIf you get any build errors, please check \nthis section\n for fixes.", 
            "title": "Updating"
        }, 
        {
            "location": "/setup/update/updating/#how-to-update-loop", 
            "text": "When a new version of Loop is released, you can click  HERE  to read what features or fixes were a part of the new release.   The process to update is very similar to the original building of Loop app, except you get to skip several of the first steps.  The basic steps are:   Update iOS, macOS, Xcode, and/or watchOS  Download new Loop source code  Add any customizations  Sign all four targets  Build app", 
            "title": "How to Update Loop"
        }, 
        {
            "location": "/setup/update/updating/#update-apple-devices", 
            "text": "Between Loop app builds, there's a high liklihood that Apple has updated one or more of the systems involved in your Loop app; your Apple Developer license agreement, your iPhone's iOS, your computer's macOS, your Xcode app, and/or your watchOS.   If you miss some of the updates, you may run into build problems.   You can check for macOS and Xcode updates using the App Store link under the apple logo in your computer display's upper left corner.  Check below to make sure your equipment is running the current versions of the various OS.   macOS High Sierra : macOS 10.13.6  Xcode : Xcode 9.4.1  iPhone : iOS 11.4", 
            "title": "Update Apple devices"
        }, 
        {
            "location": "/setup/update/updating/#download-new-loop-source-code", 
            "text": "You can use these links to download new versions of the Loop source code.  These links will always provide the most recent version of Loop:   Loop: Master branch source code    OR  Loop: Dev branch source code   FYI: The Loop source code resides in  GitHub  within a repository.  A repository is kind of like a project's bookshelf, holding various books (aka branches) of a project.  The master branch is considered a stable version.  Any new features or options are first tested in a dev (short for \"development\") branch of the Loop.  New or inexperienced users should not build from the dev branch of Loop.  So if you hear of \"new features in dev\", these are things that may be eventually merged into the master branch once any bugs are worked out.   IMPORTANT NOTES: Best practice is to leave your Loop source code in your Downloads folder.  If you store your Loop code a different folder than Downloads (such as your Documents folder or Desktop), make sure the specified folder is  not  an iCloud drive.  Storing your Loop code in an iCloud drive folder will prevent Loop from building successfully.  How do you know if a folder is an iCloud drive?  Check your System Preferences.  If your System Preferences for iCloud is set as shown below, your Documents and Desktop folders are iCloud drives and  NOT  appropriate places to save your Loop download.   \nDepending on your browser and settings, your Loop download may or may not automatically unzip.  If it does not unzip automatically, you can right-click on the zip file and choose to \"Open With\" Archive Utility.  This will create a blue folder called  Loop-master .  HOWEVER, if you already have an existing  Loop-master  folder from a previous download, the name of the next download will be something like  Loop-master (1) .  The problem with that folder name is that it contains a space...and spaces in the name will cause your Loop build to fail.  So, either delete old copies of Loop before downloading/unzipping or rename the folder(s) to ensure that NO SPACES are in the folder name.", 
            "title": "Download new Loop source code"
        }, 
        {
            "location": "/setup/update/updating/#add-customizations", 
            "text": "Add or redo any customizations, if needed.  These will not be carried over automatically from the old app.  Be sure to read up in the  code customizations section  before building, as there may be new customizations available since the previous build.", 
            "title": "Add customizations"
        }, 
        {
            "location": "/setup/update/updating/#sign-targets-and-build", 
            "text": "Sign the four targets and rebuild.  Just make sure to pick your paid developer team, if you have one.", 
            "title": "Sign Targets and Build"
        }, 
        {
            "location": "/setup/update/updating/#build-errors", 
            "text": "If you get any build errors, please check  this section  for fixes.", 
            "title": "Build Errors"
        }, 
        {
            "location": "/setup/update/new-version/", 
            "text": "Loop v1.9 Features\n\u2301\n\n\nAs always, there is a \nGitHub page\n with release notes about the features and changes since the previous Loop release.  This page provides a bit more in-depth information and practical tips about the new release. \n\n\nMinimum OS updates required\n\u2301\n\n\nBefore you start the update process, please make sure you update your devices to the minimum required versions.\n\n\n\n\nmacOS Sierra\n: macOS 10.3.2 High Sierra\n\n\nXcode\n: Xcode 9.4 \n\n\niPhone\n: iOS 11.1 at a minimum\n\n\nwatchOS\n: watchOS 4.3\n\n\n\n\nAutomatic Carthage Installation\n\u2301\n\n\nThe preparation steps to build Loop have changed.  Older versions of Loop required the manual installation of Homebrew and Carthage before you began the installation of Loop.  Loop v1.9 only requires you to install Homebrew, Xcode will automatically install Carthage in the background if it is not already installed on your computer.  So if you are building on a new computer and think \"Wait, aren't I missing a step in the directions?  I thought I had to install Carthage somewhere.\"...don't worry.  You haven't missed a step, Loop is just going to do it for you.\n\n\n\n\n\n\n\n\n\n\n\nAutomatic Main App Bundle ID\n\u2301\n\n\nRemember how the first step used to be that you had to change the \ncom.loopkit\n to something unique-to-you?  And if you updated you had to remember what you used last time so that your settings remained with the update?  No longer.\n\n\nThe Main App Bundle Identifier is now going use your unique development team ID that Apple has assigned using your developer account.  You don't have to change anything now.  Just leave that as is and go straight to applying any customizations, if you want any.  When you sign your targets, Loop will automatically populate all the necessary bundle IDs with the needed information. \n\n\n\n\n\n\n\n\n\n\n\nThis does mean that you will have to re-enter your settings in this new app for initial use, but subesquent rebuilds will be easier because the Main App Bundle Identifier will always be consistent and settings will be saved on updates using this new automated ID.  \n\n\nTo prevent any conflicts, please remove your old app from your phone when you are done setting up this new app.\n\n\nInitial Loop Build Slower\n\u2301\n\n\nThe new Loop will take longer to build than you are used to.  You may even be tempted to think that it has glitched out and stopped (it hasn't).  This is due to some changes in the way Loop deals with underlying frameworks that Loop builds.  BE PATIENT.  Depending on the speed of the computer and internet, your initial build could take between 15-40 mins or so.  Subsequent builds will be fast again, it is just the first build that will take awhile.\n\n\nYou will see this step take the longest...\nBuilding Loop: Cartfile  |  Running 2 of 2 custom shell scripts\n  Just wait it out.  Eventually, Loop will move past that and finish the build.\n\n\n\n\n\n\n\n\n\n\n\nInitial Pump Setup\n\u2301\n\n\nYou'll notice one of the changes in the update almost immediately when you go to the Loop settings and see an \nAdd Pump\n prompt.\n\n\n\n\n\n\n\n\n\nThe new pump setup has pretty self-explanatory steps for setting up your pump in Loop.\n\n\n\n\nBasal Rates and Delivery Limits (save to pump...)\n\u2301\n\n\nLoop now automatically reads and imports the following settings from the pump during initial setup:\n\n\n\n\nBasal Rate Schedule\n\n\nDelivery Limits (maximum basal rate and maximum bolus)\n\n\n\n\n\n\n\n\n\n\n\n\n\nEven better news?  Loop now saves edits to those settings back to the pump.  There's a new \"Save to pump...\" button that must be used after you edit those settings in Loop.  \nIf you don't use that button, the edits you make to those Loop settings will not be saved in Loop nor in the pump.\n  Therefore, please confirm the edits have been successfully saved before exiting the basal rates screen.  The purpose is to keep Loop and your pump in-snyc.  Now if Loop fails for whatever reason, you can be sure that the basal rate in the pump will match what you've been using in your Loop.  \n\n\n\n\n\n\n\n\n\n\n\nStandard Basal Rate Schedule\n\u2301\n\n\nAs mentioned above, Loop now has the ability to read/write your basal rate schedule from/to the pump.  There is one important fact about this new (amazing) feature.  \nThe code is written to interact with the \"Standard\" basal rate schedule in the pump only, not the Pattern A/B basal rate schedules.\n  So, practical tip when updating to and using this new Loop app:\n\n\n\n\nTurn Patterns off on the pump menu and use only the Stanard basal rate schedule.\n\n\nDouble-check your Standard basal rate schedule is up-to-date\n\n\n\n\nWhat happens if you accidentally have Pattern A/B active?  Loop will be saving any edits you make in the Loop app's basal schedule back to the pump's Standard schedule.  In instances where Loop fails or cancels a temp basal, your Loop would fall back to Pattern A/B operation which would not have been updated like you had thought.  Therefore, turning Patterns off on the pump will prevent any accidental confusion or mismatch between pump and Loop.\n\n\nPump Clock integration\n\u2301\n\n\nAs part of the initial setup, Loop will now automatically prompt you to set your pump's time to exactly match your Loop's time.  Additionally, if you forget the warnings and set the pump time manually using the pump's menu, Loop app will now have RileyLink automatically get the pump back in-sync with Loop.  Loop will fix your mistake.  \n\n\nAs always, you will not have to worry about pump time changes if you travel.  You do not have to change your pump's time when you travel, unless you want to.  If you decide to, remember to use your Loop to set the pump's time...don't actually use the pump buttons for time changes.\n\n\n\n\n\n\n\n\n\n\n\nLanguage Translations\n\u2301\n\n\nThis release includes several new language translations.  If the user has their iPhone's language set to one of the following languages, the Loop app will match.\n\n\n\n\n\n\n\n\n\n\n\nMiscellaneous\n\u2301\n\n\nBecause I know you will ask:\n\n\n\n\n\n\nThe uploading of meterBG checks to NS using pump-linked Contour Next meters is temporarily not working.  There is an open ticket to get this restored.  We miss our red dots, too.  \n\n\n\n\n\n\nThere is no integral retrospective correction (IRC) or new watch face merged into this release.  The developers are still working out how/what the best form of those features need to be before potentially merging into a release.\n\n\n\n\n\n\nSome x15 pumps will get erroneous \"Bolus may not have succeeded.  Pump responded unexpectedly.  Check your pump before retrying\" notifications .  This is a known issue, even since before the release of v1.9, discussed \nhere\n.  You can read the thread and implement the suggested solution until one has been merged into a Loop release.", 
            "title": "New Version Info"
        }, 
        {
            "location": "/setup/update/new-version/#loop-v19-features", 
            "text": "As always, there is a  GitHub page  with release notes about the features and changes since the previous Loop release.  This page provides a bit more in-depth information and practical tips about the new release.", 
            "title": "Loop v1.9 Features"
        }, 
        {
            "location": "/setup/update/new-version/#minimum-os-updates-required", 
            "text": "Before you start the update process, please make sure you update your devices to the minimum required versions.   macOS Sierra : macOS 10.3.2 High Sierra  Xcode : Xcode 9.4   iPhone : iOS 11.1 at a minimum  watchOS : watchOS 4.3", 
            "title": "Minimum OS updates required"
        }, 
        {
            "location": "/setup/update/new-version/#automatic-carthage-installation", 
            "text": "The preparation steps to build Loop have changed.  Older versions of Loop required the manual installation of Homebrew and Carthage before you began the installation of Loop.  Loop v1.9 only requires you to install Homebrew, Xcode will automatically install Carthage in the background if it is not already installed on your computer.  So if you are building on a new computer and think \"Wait, aren't I missing a step in the directions?  I thought I had to install Carthage somewhere.\"...don't worry.  You haven't missed a step, Loop is just going to do it for you.", 
            "title": "Automatic Carthage Installation"
        }, 
        {
            "location": "/setup/update/new-version/#automatic-main-app-bundle-id", 
            "text": "Remember how the first step used to be that you had to change the  com.loopkit  to something unique-to-you?  And if you updated you had to remember what you used last time so that your settings remained with the update?  No longer.  The Main App Bundle Identifier is now going use your unique development team ID that Apple has assigned using your developer account.  You don't have to change anything now.  Just leave that as is and go straight to applying any customizations, if you want any.  When you sign your targets, Loop will automatically populate all the necessary bundle IDs with the needed information.       This does mean that you will have to re-enter your settings in this new app for initial use, but subesquent rebuilds will be easier because the Main App Bundle Identifier will always be consistent and settings will be saved on updates using this new automated ID.    To prevent any conflicts, please remove your old app from your phone when you are done setting up this new app.", 
            "title": "Automatic Main App Bundle ID"
        }, 
        {
            "location": "/setup/update/new-version/#initial-loop-build-slower", 
            "text": "The new Loop will take longer to build than you are used to.  You may even be tempted to think that it has glitched out and stopped (it hasn't).  This is due to some changes in the way Loop deals with underlying frameworks that Loop builds.  BE PATIENT.  Depending on the speed of the computer and internet, your initial build could take between 15-40 mins or so.  Subsequent builds will be fast again, it is just the first build that will take awhile.  You will see this step take the longest... Building Loop: Cartfile  |  Running 2 of 2 custom shell scripts   Just wait it out.  Eventually, Loop will move past that and finish the build.", 
            "title": "Initial Loop Build Slower"
        }, 
        {
            "location": "/setup/update/new-version/#initial-pump-setup", 
            "text": "You'll notice one of the changes in the update almost immediately when you go to the Loop settings and see an  Add Pump  prompt.     The new pump setup has pretty self-explanatory steps for setting up your pump in Loop.", 
            "title": "Initial Pump Setup"
        }, 
        {
            "location": "/setup/update/new-version/#basal-rates-and-delivery-limits-save-to-pump", 
            "text": "Loop now automatically reads and imports the following settings from the pump during initial setup:   Basal Rate Schedule  Delivery Limits (maximum basal rate and maximum bolus)       Even better news?  Loop now saves edits to those settings back to the pump.  There's a new \"Save to pump...\" button that must be used after you edit those settings in Loop.   If you don't use that button, the edits you make to those Loop settings will not be saved in Loop nor in the pump.   Therefore, please confirm the edits have been successfully saved before exiting the basal rates screen.  The purpose is to keep Loop and your pump in-snyc.  Now if Loop fails for whatever reason, you can be sure that the basal rate in the pump will match what you've been using in your Loop.", 
            "title": "Basal Rates and Delivery Limits (save to pump...)"
        }, 
        {
            "location": "/setup/update/new-version/#standard-basal-rate-schedule", 
            "text": "As mentioned above, Loop now has the ability to read/write your basal rate schedule from/to the pump.  There is one important fact about this new (amazing) feature.   The code is written to interact with the \"Standard\" basal rate schedule in the pump only, not the Pattern A/B basal rate schedules.   So, practical tip when updating to and using this new Loop app:   Turn Patterns off on the pump menu and use only the Stanard basal rate schedule.  Double-check your Standard basal rate schedule is up-to-date   What happens if you accidentally have Pattern A/B active?  Loop will be saving any edits you make in the Loop app's basal schedule back to the pump's Standard schedule.  In instances where Loop fails or cancels a temp basal, your Loop would fall back to Pattern A/B operation which would not have been updated like you had thought.  Therefore, turning Patterns off on the pump will prevent any accidental confusion or mismatch between pump and Loop.", 
            "title": "Standard Basal Rate Schedule"
        }, 
        {
            "location": "/setup/update/new-version/#pump-clock-integration", 
            "text": "As part of the initial setup, Loop will now automatically prompt you to set your pump's time to exactly match your Loop's time.  Additionally, if you forget the warnings and set the pump time manually using the pump's menu, Loop app will now have RileyLink automatically get the pump back in-sync with Loop.  Loop will fix your mistake.    As always, you will not have to worry about pump time changes if you travel.  You do not have to change your pump's time when you travel, unless you want to.  If you decide to, remember to use your Loop to set the pump's time...don't actually use the pump buttons for time changes.", 
            "title": "Pump Clock integration"
        }, 
        {
            "location": "/setup/update/new-version/#language-translations", 
            "text": "This release includes several new language translations.  If the user has their iPhone's language set to one of the following languages, the Loop app will match.", 
            "title": "Language Translations"
        }, 
        {
            "location": "/setup/update/new-version/#miscellaneous", 
            "text": "Because I know you will ask:    The uploading of meterBG checks to NS using pump-linked Contour Next meters is temporarily not working.  There is an open ticket to get this restored.  We miss our red dots, too.      There is no integral retrospective correction (IRC) or new watch face merged into this release.  The developers are still working out how/what the best form of those features need to be before potentially merging into a release.    Some x15 pumps will get erroneous \"Bolus may not have succeeded.  Pump responded unexpectedly.  Check your pump before retrying\" notifications .  This is a known issue, even since before the release of v1.9, discussed  here .  You can read the thread and implement the suggested solution until one has been merged into a Loop release.", 
            "title": "Miscellaneous"
        }, 
        {
            "location": "/operation/overview/", 
            "text": "Loop Displays\n\u2301\n\n\nThis section of the docs will go over the Loop displays available and what information they offer.  Information about your Loop's actions (or inactions) can often be found simply by looking at the visuals presented in the app.  \n\n\nStatus Screen\n\u2301\n\n\nThe Status Screen is the main root navigation screen in Loop.  It is broken up into 3 main display areas; Heads Up display (HUD), Charts, and Toolbar. The HUD is the top area of the screen.  This shows status of the last time loop ran, current BG Reading, current temp basal, current insulin reservoir volume remaining, and current pump percentage battery remaining. The next area is the charting area. This includes, glucose trend and prediction, Active Insulin, Insulin Delivery, and Carbohydrates.  The final display area is the toolbar which has buttons for Carbs, Pre-Meal, Bolus, Workout Mode, and Settings.\n\n\n\n\nHeads Up Display\n\u2301\n\n\nLoop Status\n\u2301\n\n\nThe Loop Status is the colored circle in the upper left corner of the main Loop display.  There are four colors that are typically displayed.\n\n\n\n\n\n\n\n\nA grey circle indicates the Loop is warming up and hasn\u2019t yet completed its initial loop.  When the Loop is first activated, it may take about 15-20 minutes to complete the first Loop, and the grey circle will be displayed.  It needs CGM data to be gathered, so be patient.  When it finally completes its first loop, the circle will turn green.  If you can't get your grey loop to turn green, please see the \nGrey Loop troubleshooting page\n for tips.\n\n\n\n\n\n\n\n\nA green circle indicates the Loop has been successfully completed within the last 5 minutes.  The time since the loop last completed will be displayed under the circle.\n\n\n\n\n\n\n\n\nA yellow circle indicates the Loop has not completed in the last 5-15 minutes.  It is not unusual to have a few instances of yellow circles throughout a day of looping.  They can be caused by temporarily getting too far away from RileyLink or iPhone (more than about 3-10 feet depending on conditions), CGM failing to read or being in ???, radio frequency \u201cnoise\u201d interference, and such.  Generally, most yellow circles will self-resolve without needing any special troubleshooting.\n\n\n\n\n\n\n\n\nA red circle indicates the Loop has not completed in over 15 minutes.  This is not a typical state, and you should troubleshoot why Loop is not completing.  Please review the \nYellow and Red Loop troubleshooting page\n for tips on how to get your green Loop back.  Clicking on the red circle will also pop-up the last error message to help guide your troubleshooting.\n\n\n\n\n\n\n\n\nWhen the circle is notched and not complete, that means the Loop is operating in \u201copen loop\u201d mode.  When the \u201cclosed loop\u201d setting is turned on, the loop status will show a completed circle.\n\n\n\n\n\n\n\nThe loop status circle will pulse slightly when RileyLink is giving the pump a new temp basal setting.  The pulsing will stop when the temp basal has been set by the pump.\n\n\nGlucose\n\u2301\n\n\n\n\n\n\n\n\nThe current BG reading from the CGM will display, including trending arrow and time the reading was taken.  If the BG is being read straight from the G5 transmitter or G4 receiver, no special symbols will appear.\n\n\n\n\n\n\n\n\nIf the BG is being read from the Dexcom Share Servers, a small cloud icon will be in the corner of the BG reading.  Internet access is required to run in this mode.\n\n\n\n\n\n\n\n\nWhen you first start Loop, there may be a small yellow alert next to the BG.  This should go away within a short period of time (around 5 minutes or less).  If the yellow alert remains, something may be wrong with fetching BG data.  You can try restarting the Loop app (double tap home button, upswipe on app to close) to see if BG data will resume.  \nSpecial note for Dexcom G5 users\n, a yellow alert will appear when a calibration is needed.  The alert will clear once the calibration is given, but typically Loop will work IF the yellow alert is only for a needed G5 calibration.\n\n\n\n\n\n\n\nTemp Basal\n\u2301\n\n\n\n\n\n\n\n\nThe temp basal will display the enacted temp basal change relative to the scheduled basal.  So if the scheduled basal was 1.0 units per hour and Loop has set a temp basal of 0.2 units per hour, the temp basal icon will display -0.8 U, as shown in graphic to the left.\n\n\n\n\n\n\n\nReservoir\n\u2301\n\n\n\n\n\n\n\n\nThe reservoir icon will remain grey and plain until insulin volume decreases.  At 25% reservoir volume remaining, the reservoir icon will turn yellow.  At 10% reservoir volume remaining, the reservoir icon will turn red.  The remaining units will be displayed when it gets to these lower thresholds.\n\n\n\n\n\n\n\nBattery\n\u2301\n\n\n\n\n\n\n\n\nFor x23, x54 pumps, the battery icon will show 100/75/50/25% increments just as the pump does.  As the battery level decreases, the icon will turn from grey to yellow to red.  For x22 pumps, the battery icon will read discrete % values.  \nThe warning colors/levels on Loop's battery indicator work in conjunction with the type of battery selected.  If you change battery types, please make sure to update your battery selection in the Loop app settings.   \nThe pump's on-screen battery indicator is not a good indicator of remaining battery life for the purposes of looping.  Loop's pump communications will fail from low battery levels sooner than the insulin delivery will fail.  The Loop's battery level warnings are designed to give you approximately 8 hours of notice before the pump battery will need changing.\n\n\n\n\n\n\n\nCharts\n\u2301\n\n\nThere are several charts that help you navigate your Loop actions.  Clicking on each of the charts will also open up additional information.\n\n\nGlucose Chart\n\u2301\n\n\n\n\n\n\n\n\n\nThe glucose chart displays BG values in your preferred units. The vertical scale of the chart is calculated on the fly by Loop to be as useful as possible while including the highest and lowest readings in the chart.\n\n\nThe horizontal axis is set to go forward from the current time until your DIA forward (so you can see what Loop eventually thinks BG will be). It then goes back in time as far as it can based upon the width in pixels of your screen. Note, if you turn your device to landscape mode you will have more screen real estate and thus will be able to see further back in time. If you would like to see further back in time you can use Nightscout or you can modify your \nLoop Graph hours\n.\n\n\nThe BG correction range is shown as a blue bar on the glucose chart.  Single-value target BG range (such as 100-100 mg/dl), will have a narrower blue range.  When a temporary override range is enabled, a darker blue bar where the overrides are set will be displayed, as well as the normal correction target in lighter blue.\n\n\nThe eventual BG displayed in the right side of the chart does NOT take into account a recently enacted temp basal.  In other words, if you are above BG target and Loop just enacted a high temp basal to help, the eventual BG does not reflect the expected lowering of BGs that would result from that recently enacted temp basal.  Loop waits until the insulin has actually been delivery before it \"uses\" the insulin in its calculations for BG impacts.  If you suspended your pump or had a \"no delivery\" alarm shortly after the temp basal was started, you would want that accurately reflected in the insulin on board and associated eventual BG.\n\n\nIf you tap on the Glucose Chart itself, it will open the Predicted Glucose chart described below.\n\n\nPredicted Glucose Chart\n\u2301\n\n\n\n\n\n\n\n\n\nThe predicted glucose view is a great way to gain insight into the various components\u2019 importance in Loop\u2019s prediction of eventual BG. The graph at the top of this view will match your Glucose Chart. Below this chart you will see a very detailed explanation of all of the variables that Loop takes into account in predicting your future BG value. Each of those effects (including Carbohydrates, Insulin, Glucose Momentum and Retrospective Correction) includes details of the calculation use. You can tap on any of the entries to turn them off and on for visualization. The resulting changes can be viewed by the changes in the dashed lines.\n\n\nAdditionally, at the bottom of this screen there is a setting to \nEnable Retrospective Correction\n. By enabling it, it will more aggressively increase or decrease basal delivery when BG movement doesn\u2019t match the carbohydrates and insulin-based model.  Most Loopers have found this setting to be quite useful and keep the slider on.\n\n\nActive Insulin Chart\n\u2301\n\n\n\n\n\n\n\n\n\nThe Active Insulin chart displays the total insulin contribution from both temp basals and boluses.  Active IOB can be either positive and negative IOB.  Negative IOB results from the suspension of normally scheduled basals.  The active insulin displayed in the upper right corner of the chart does NOT include insulin contributions from a recently enacted temp basal or bolus until the pump\u2019s reservoir volume is read and confirms a drop in reservoir volume (confirming the insulin has actually been delivered).  So long as you have Event History as the Preferred Data Source in Loop settings, primed insulin deliveries (e.g., cannula fills or manual primes) will not be counted towards IOB.\n\n\nInsulin Delivery Chart\n\u2301\n\n\n\n\n\n\n\n\n\nThe Insulin Delivery chart displays a history of the temp basals enacted by Loop.  The display is relative to the scheduled basal rates entered in the Loop settings.  So, a rate displayed in this chart as \n+0 units\n would indicate no temp basal was set, and Loop defaulted to the scheduled basal rate.  Individual boluses are indicated by an orange triangle on the chart (shown in the graphic above, near the left-most time).  The total insulin delivered since midnight, including all basals and boluses \nAND priming insulin\n, is given in the upper right corner of the graph.\n\n\nPlease be patient for a bolus delivery to appear.  There is a lag time from when you press the \u201cdeliver\u201d bolus button to when the orange triangle is drawn sometimes.  The insulin has to be delivered and then the pump reservoir needs to be read to confirm delivery, before the triangle will appear and IOB will be added.  Occassionally, the bolus may be temporarily rendered (drawn) as a very high temp basal rate vs. a (triangle) discrete bolus event.  This does NOT mean that the Loop actually enacted a high temp basal rate...only that the bolus is being \ndrawn\n on the chart in the equivalent of a high temp basal rate.\n\n\nReservoir and Event History\n\u2301\n\n\n\n\n\n\n\n\n\nClicking on either the Active Insulin or Insulin Delivery charts will open your Insulin Delivery history.  The top of the screen will display the current IOB and the total insulin delivered for the day since midnight (or since the time the loop became active if you started Loop after midnight).  There are two viewing options; Reservoir or Event History.  \n\n\nLoop\u2019s default is to use actual reservoir volumes for determining the insulin delivered.  When there is a gap of 30 minutes or more in reservoir history, Loop classifies these readings as \u201cnot continuous\u201d and therefore unreliable for the purposes of determining insulin deliveries.  Therefore in those instances, Loop will rely on the event histories to determine insulin deliveries during the non-continuous times.\n\n\nCarbohydrate Chart\n\u2301\n\n\n\n\n\n\n\n\n\nThe Carbohydrate chart displays the carbs used by Loop to predict BG changes.  The active COB is displayed in the upper right corner of the chart.  Clicking on the chart will open the Carb Entries history and you can edit/delete any previous entries through that screen.  Please read the \nCarb Entries page\n for more information about editing carb entries.\n\n\n\n\n\n\n\n\n\nFor more information about the Insulin Counteraction Effects information found in the Carb History, please see here (to do: insert link).\n\n\nTool Bar\n\u2301\n\n\n\n\n\n\n\n\n\nThe tool bar is where your inputs to the Loop behavior take place.  The individual components of the tool bar are, left to right:\n\n\n\n\n\n\nCarb entry tool \n- click on this tool to enter carbs into the Loop app.  Loop will not read carb entries from the pump or Nightscout, so you must use the carb entry tool in Loop app in order to have carbs accounted for by the Loop.  Detailed info regarding how to enter, save, and edit carb entries can be found in the \nCarb Entries page\n.\n\n\n\n\n\n\nPre-meal target \n - click this tool to set the \nPre-Meal temporary override target\n.  This target will remain in effect (1) for 60 minutes, (2) until a carb entry is saved, or (3) until target is toggled off manually, whichever comes first.  The background coloring of the Pre-Meal target will turn green when active and there will be a dark blue line on the BG chart indicating where the override target is enabled.  For more information about use of the Pre-Meal target, see the \nBolus Entries page\n.\n\n\n\n\n\n\nBolus tool \n - click on this tool to bring up the bolus tool.  Normally, this screen will automatically open on it's own and function as a bolus wizard when a meal is saved on the carb entry tool screen.  The only time the bolus tool will not automatically open is if the amount of carbs saved is determined to be adequately covered by the insulin on board already.  During rapidly rising BGs, where Loop doesn't have an adequate temp basal rate to cover the pace at which BGs are rising, you may try clicking on the bolus tool to see if Loop is recommending a correction bolus to help control the BG spike.  For more information about the Bolus tool features and use, see the \nBolus Entries page\n.\n\n\n\n\n\n\nWorkout Target \n- click this tool to set the \nWorkout temporary override target\n.  This target will remain in effect for the duration you select.  The standard duration selections available are 1 hour, 2 hour, or indefinitely.  You can add or modify those options, before building the Loop app, by using the \nWorkout mode customization option\n.  For more information about using the Workout Mode, see \nhere\n.\n\n\n\n\n\n\nLoop Settings \n- click on this tool to make changes to any of your \nLoop settings\n or to enact your \nRileyLink commands\n.", 
            "title": "Loop Displays"
        }, 
        {
            "location": "/operation/overview/#loop-displays", 
            "text": "This section of the docs will go over the Loop displays available and what information they offer.  Information about your Loop's actions (or inactions) can often be found simply by looking at the visuals presented in the app.", 
            "title": "Loop Displays"
        }, 
        {
            "location": "/operation/overview/#status-screen", 
            "text": "The Status Screen is the main root navigation screen in Loop.  It is broken up into 3 main display areas; Heads Up display (HUD), Charts, and Toolbar. The HUD is the top area of the screen.  This shows status of the last time loop ran, current BG Reading, current temp basal, current insulin reservoir volume remaining, and current pump percentage battery remaining. The next area is the charting area. This includes, glucose trend and prediction, Active Insulin, Insulin Delivery, and Carbohydrates.  The final display area is the toolbar which has buttons for Carbs, Pre-Meal, Bolus, Workout Mode, and Settings.", 
            "title": "Status Screen"
        }, 
        {
            "location": "/operation/overview/#heads-up-display", 
            "text": "", 
            "title": "Heads Up Display"
        }, 
        {
            "location": "/operation/overview/#loop-status", 
            "text": "The Loop Status is the colored circle in the upper left corner of the main Loop display.  There are four colors that are typically displayed.     A grey circle indicates the Loop is warming up and hasn\u2019t yet completed its initial loop.  When the Loop is first activated, it may take about 15-20 minutes to complete the first Loop, and the grey circle will be displayed.  It needs CGM data to be gathered, so be patient.  When it finally completes its first loop, the circle will turn green.  If you can't get your grey loop to turn green, please see the  Grey Loop troubleshooting page  for tips.     A green circle indicates the Loop has been successfully completed within the last 5 minutes.  The time since the loop last completed will be displayed under the circle.     A yellow circle indicates the Loop has not completed in the last 5-15 minutes.  It is not unusual to have a few instances of yellow circles throughout a day of looping.  They can be caused by temporarily getting too far away from RileyLink or iPhone (more than about 3-10 feet depending on conditions), CGM failing to read or being in ???, radio frequency \u201cnoise\u201d interference, and such.  Generally, most yellow circles will self-resolve without needing any special troubleshooting.     A red circle indicates the Loop has not completed in over 15 minutes.  This is not a typical state, and you should troubleshoot why Loop is not completing.  Please review the  Yellow and Red Loop troubleshooting page  for tips on how to get your green Loop back.  Clicking on the red circle will also pop-up the last error message to help guide your troubleshooting.     When the circle is notched and not complete, that means the Loop is operating in \u201copen loop\u201d mode.  When the \u201cclosed loop\u201d setting is turned on, the loop status will show a completed circle.    The loop status circle will pulse slightly when RileyLink is giving the pump a new temp basal setting.  The pulsing will stop when the temp basal has been set by the pump.", 
            "title": "Loop Status"
        }, 
        {
            "location": "/operation/overview/#glucose", 
            "text": "The current BG reading from the CGM will display, including trending arrow and time the reading was taken.  If the BG is being read straight from the G5 transmitter or G4 receiver, no special symbols will appear.     If the BG is being read from the Dexcom Share Servers, a small cloud icon will be in the corner of the BG reading.  Internet access is required to run in this mode.     When you first start Loop, there may be a small yellow alert next to the BG.  This should go away within a short period of time (around 5 minutes or less).  If the yellow alert remains, something may be wrong with fetching BG data.  You can try restarting the Loop app (double tap home button, upswipe on app to close) to see if BG data will resume.   Special note for Dexcom G5 users , a yellow alert will appear when a calibration is needed.  The alert will clear once the calibration is given, but typically Loop will work IF the yellow alert is only for a needed G5 calibration.", 
            "title": "Glucose"
        }, 
        {
            "location": "/operation/overview/#temp-basal", 
            "text": "The temp basal will display the enacted temp basal change relative to the scheduled basal.  So if the scheduled basal was 1.0 units per hour and Loop has set a temp basal of 0.2 units per hour, the temp basal icon will display -0.8 U, as shown in graphic to the left.", 
            "title": "Temp Basal"
        }, 
        {
            "location": "/operation/overview/#reservoir", 
            "text": "The reservoir icon will remain grey and plain until insulin volume decreases.  At 25% reservoir volume remaining, the reservoir icon will turn yellow.  At 10% reservoir volume remaining, the reservoir icon will turn red.  The remaining units will be displayed when it gets to these lower thresholds.", 
            "title": "Reservoir"
        }, 
        {
            "location": "/operation/overview/#battery", 
            "text": "For x23, x54 pumps, the battery icon will show 100/75/50/25% increments just as the pump does.  As the battery level decreases, the icon will turn from grey to yellow to red.  For x22 pumps, the battery icon will read discrete % values.   The warning colors/levels on Loop's battery indicator work in conjunction with the type of battery selected.  If you change battery types, please make sure to update your battery selection in the Loop app settings.    The pump's on-screen battery indicator is not a good indicator of remaining battery life for the purposes of looping.  Loop's pump communications will fail from low battery levels sooner than the insulin delivery will fail.  The Loop's battery level warnings are designed to give you approximately 8 hours of notice before the pump battery will need changing.", 
            "title": "Battery"
        }, 
        {
            "location": "/operation/overview/#charts", 
            "text": "There are several charts that help you navigate your Loop actions.  Clicking on each of the charts will also open up additional information.", 
            "title": "Charts"
        }, 
        {
            "location": "/operation/overview/#glucose-chart", 
            "text": "The glucose chart displays BG values in your preferred units. The vertical scale of the chart is calculated on the fly by Loop to be as useful as possible while including the highest and lowest readings in the chart.  The horizontal axis is set to go forward from the current time until your DIA forward (so you can see what Loop eventually thinks BG will be). It then goes back in time as far as it can based upon the width in pixels of your screen. Note, if you turn your device to landscape mode you will have more screen real estate and thus will be able to see further back in time. If you would like to see further back in time you can use Nightscout or you can modify your  Loop Graph hours .  The BG correction range is shown as a blue bar on the glucose chart.  Single-value target BG range (such as 100-100 mg/dl), will have a narrower blue range.  When a temporary override range is enabled, a darker blue bar where the overrides are set will be displayed, as well as the normal correction target in lighter blue.  The eventual BG displayed in the right side of the chart does NOT take into account a recently enacted temp basal.  In other words, if you are above BG target and Loop just enacted a high temp basal to help, the eventual BG does not reflect the expected lowering of BGs that would result from that recently enacted temp basal.  Loop waits until the insulin has actually been delivery before it \"uses\" the insulin in its calculations for BG impacts.  If you suspended your pump or had a \"no delivery\" alarm shortly after the temp basal was started, you would want that accurately reflected in the insulin on board and associated eventual BG.  If you tap on the Glucose Chart itself, it will open the Predicted Glucose chart described below.", 
            "title": "Glucose Chart"
        }, 
        {
            "location": "/operation/overview/#predicted-glucose-chart", 
            "text": "The predicted glucose view is a great way to gain insight into the various components\u2019 importance in Loop\u2019s prediction of eventual BG. The graph at the top of this view will match your Glucose Chart. Below this chart you will see a very detailed explanation of all of the variables that Loop takes into account in predicting your future BG value. Each of those effects (including Carbohydrates, Insulin, Glucose Momentum and Retrospective Correction) includes details of the calculation use. You can tap on any of the entries to turn them off and on for visualization. The resulting changes can be viewed by the changes in the dashed lines.  Additionally, at the bottom of this screen there is a setting to  Enable Retrospective Correction . By enabling it, it will more aggressively increase or decrease basal delivery when BG movement doesn\u2019t match the carbohydrates and insulin-based model.  Most Loopers have found this setting to be quite useful and keep the slider on.", 
            "title": "Predicted Glucose Chart"
        }, 
        {
            "location": "/operation/overview/#active-insulin-chart", 
            "text": "The Active Insulin chart displays the total insulin contribution from both temp basals and boluses.  Active IOB can be either positive and negative IOB.  Negative IOB results from the suspension of normally scheduled basals.  The active insulin displayed in the upper right corner of the chart does NOT include insulin contributions from a recently enacted temp basal or bolus until the pump\u2019s reservoir volume is read and confirms a drop in reservoir volume (confirming the insulin has actually been delivered).  So long as you have Event History as the Preferred Data Source in Loop settings, primed insulin deliveries (e.g., cannula fills or manual primes) will not be counted towards IOB.", 
            "title": "Active Insulin Chart"
        }, 
        {
            "location": "/operation/overview/#insulin-delivery-chart", 
            "text": "The Insulin Delivery chart displays a history of the temp basals enacted by Loop.  The display is relative to the scheduled basal rates entered in the Loop settings.  So, a rate displayed in this chart as  +0 units  would indicate no temp basal was set, and Loop defaulted to the scheduled basal rate.  Individual boluses are indicated by an orange triangle on the chart (shown in the graphic above, near the left-most time).  The total insulin delivered since midnight, including all basals and boluses  AND priming insulin , is given in the upper right corner of the graph.  Please be patient for a bolus delivery to appear.  There is a lag time from when you press the \u201cdeliver\u201d bolus button to when the orange triangle is drawn sometimes.  The insulin has to be delivered and then the pump reservoir needs to be read to confirm delivery, before the triangle will appear and IOB will be added.  Occassionally, the bolus may be temporarily rendered (drawn) as a very high temp basal rate vs. a (triangle) discrete bolus event.  This does NOT mean that the Loop actually enacted a high temp basal rate...only that the bolus is being  drawn  on the chart in the equivalent of a high temp basal rate.", 
            "title": "Insulin Delivery Chart"
        }, 
        {
            "location": "/operation/overview/#reservoir-and-event-history", 
            "text": "Clicking on either the Active Insulin or Insulin Delivery charts will open your Insulin Delivery history.  The top of the screen will display the current IOB and the total insulin delivered for the day since midnight (or since the time the loop became active if you started Loop after midnight).  There are two viewing options; Reservoir or Event History.    Loop\u2019s default is to use actual reservoir volumes for determining the insulin delivered.  When there is a gap of 30 minutes or more in reservoir history, Loop classifies these readings as \u201cnot continuous\u201d and therefore unreliable for the purposes of determining insulin deliveries.  Therefore in those instances, Loop will rely on the event histories to determine insulin deliveries during the non-continuous times.", 
            "title": "Reservoir and Event History"
        }, 
        {
            "location": "/operation/overview/#carbohydrate-chart", 
            "text": "The Carbohydrate chart displays the carbs used by Loop to predict BG changes.  The active COB is displayed in the upper right corner of the chart.  Clicking on the chart will open the Carb Entries history and you can edit/delete any previous entries through that screen.  Please read the  Carb Entries page  for more information about editing carb entries.     For more information about the Insulin Counteraction Effects information found in the Carb History, please see here (to do: insert link).", 
            "title": "Carbohydrate Chart"
        }, 
        {
            "location": "/operation/overview/#tool-bar", 
            "text": "The tool bar is where your inputs to the Loop behavior take place.  The individual components of the tool bar are, left to right:    Carb entry tool  - click on this tool to enter carbs into the Loop app.  Loop will not read carb entries from the pump or Nightscout, so you must use the carb entry tool in Loop app in order to have carbs accounted for by the Loop.  Detailed info regarding how to enter, save, and edit carb entries can be found in the  Carb Entries page .    Pre-meal target   - click this tool to set the  Pre-Meal temporary override target .  This target will remain in effect (1) for 60 minutes, (2) until a carb entry is saved, or (3) until target is toggled off manually, whichever comes first.  The background coloring of the Pre-Meal target will turn green when active and there will be a dark blue line on the BG chart indicating where the override target is enabled.  For more information about use of the Pre-Meal target, see the  Bolus Entries page .    Bolus tool   - click on this tool to bring up the bolus tool.  Normally, this screen will automatically open on it's own and function as a bolus wizard when a meal is saved on the carb entry tool screen.  The only time the bolus tool will not automatically open is if the amount of carbs saved is determined to be adequately covered by the insulin on board already.  During rapidly rising BGs, where Loop doesn't have an adequate temp basal rate to cover the pace at which BGs are rising, you may try clicking on the bolus tool to see if Loop is recommending a correction bolus to help control the BG spike.  For more information about the Bolus tool features and use, see the  Bolus Entries page .    Workout Target  - click this tool to set the  Workout temporary override target .  This target will remain in effect for the duration you select.  The standard duration selections available are 1 hour, 2 hour, or indefinitely.  You can add or modify those options, before building the Loop app, by using the  Workout mode customization option .  For more information about using the Workout Mode, see  here .    Loop Settings  - click on this tool to make changes to any of your  Loop settings  or to enact your  RileyLink commands .", 
            "title": "Tool Bar"
        }, 
        {
            "location": "/operation/features/carbs/", 
            "text": "Carb Entry\n\u2301\n\n\n\n\n\n\n\n\n\nNew carb entries can be made by using the green carb tool in the toolbar at the bottom of the status screen.  Do not use your pump's bolus wizard or pump's carb entry to record carbs into the Loop app.  Nor should you use Nightscout's careportal to enter carbs, as Loop does not read carb entries remotely.\n\n\nNew Carbs\n\u2301\n\n\nTo begin a new meal entry, simply enter the number of carbs to be eaten in the \namount consumed\n line.  By default, the carb absorption time for a new carb entry will correspond to the taco icon.  If you haven't made any customizations to the lollipop, taco, or pizza icons during your Loop build, then the default carb absorption time will display as 3 hours.  The default time entry is for the current time and date.  Once you press \nSave\n on the carb entry screen, the Loop's bolus tool will open to provide a recommended bolus.\n\n\n\n\n\n\n\n\n\nAvoid Double Carb Entries\n\u2301\n\n\n\n\nBe Aware\n\n\nWhen you press \nSave\n for a carb entry, Loop will consider that carb entry saved and use it for calculating temp basals and recommended boluses.  Be cautious about repeated attempts to enter the same meal...Loop will continue to save the carb entries UNLESS you push cancel on the carb entry screen.\n\n\nSimply canceling a bolus does not cancel the carb entry.\n\nIf you have accidentally made multiple entries for the same carbs, click on the Carbs Chart in the main Loop display and you can delete the redundent carb entries by swiping left on the entries.\n\n\n\n\nCarb Absorption Time\n\u2301\n\n\n\n\n\n\n\n\n\nTo select your carb entry's absorption time, you can either click on the default food emojis or manually enter carb absoprtion time by selecting the \nabsorption time\n line in the carb entry tool.\n\n\nThe plate emoji, found to the right of the pizza emoji, can also be used if you are unsure of a new food.  There are other food emojis grouped into fast, medium, and slow absorbing foods.  This may be particularly useful for teens that are trying to learn new foods/meals.  Additionally, if you select the plate icon, you can add text to your \nfood type\n by selecting the \nabc\n button in the bottom left corner of the screen.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe default carb absorption times in Loop app are average representations for high, medium, and low glycemic index foods.  Ever since Loop v1.4.0, the algorithm incorporates dynamic carb absorption.  Previous Loop versions were based on a curve that assumed the rate of carb absorption would start out slow, increase to a mid-point, and then taper off.  However, in the real world, carb absorption is quite variable.  Dynamic carb absorption model is able to model some of this variability and allow Loop to respond more reasonably when actual carb absorption is not matching well with the selected carb absorption time for a meal.  In short, while entering a carb absorption time is still part of recording meals in Loop, it is much less critical to get it right.  Now your entry serves more as a guideline, than a rule, for Loop to model carb absorption.  For a more detailed explanation of the new dynamic carb absorption model, please read about it \nhere\n.\n\n\nTo help Loop adjust for carbs that may digest slower than your original estimate, Loop will initially apply a 1.5x multiplier to your entered carb absorption time.  So, a meal entered using the taco icon will initially be treated as a 4.5 hour absorption meal.  As Loop observes the BG impacts of the meal, Loop will shorten the meal's absorption time if BGs are showing quicker impacts than expected, as well as adjust insulin deliveries (e.g., increase temp basals).  You can watch the progression of the Loop's observations of your meal by clicking on the Carbs Chart and watching the insulin counteraction effects.\n\n\nMixed Carb Meals\n\u2301\n\n\nYou do not have to enter all carbs for a meal at the same absoption or eating time.  If you want to enter some of the meal's carbs as faster, and some slower, you can log the meal over several individual carb entries.  For example, for meals that have sugary carbs as well as slow acting carbs (Chinese food), you may wish to do part of the carbs as lollipop and part of the carbs as pizza.\n\n\nPressing the \nSave\n button in the top right corner will save the carbs into the Loop app and bring up the Loop's bolus tool.  When entering multiple carb absorption durations for a single meal, press save on the carb entry and then press cancel on the bolus tool when it appears.  When you have entered your last carb entry for the meal, then use the bolus tool to deliver the bolus for the entire meal.  Loop will provide a recommendation based on all the saved carbs and their respective absorption durations in total.\n\n\nPrebolus\n\u2301\n\n\nYou can let Loop know you are going to prebolus a meal by adjusting the time of the carb entry on the \u201cdate\u201d line of the carb entry.  If you are prebolusing by 20 minutes, simply add 20 minutes to the carb entry time.  \n\n\nEdit Carbs\n\u2301\n\n\nClicking on the Carbohydrate chart in the Loop's main status screen will open the carb entry history and previous entries can be modified or deleted through this screen.  If you need to change a prebolus time, add/subtract carbs, adjust carb absorption times (even mid-meal), just go into that edit screen and tap on the carb entry you'd like to edit, or left-swipe to delete the entry entirely.  This can be a particularly useful tool when:\n\n\n\n\nYou did not finish an entire meal that you bolused for,\n\n\nYou did not get to eat meal at the time you originally expected,\n\n\nYou ate more servings than originally entered, or\n\n\nYou suspect your carb count was in error because BGs are rising more/less than expected.\n\n\n\n\n\n\n\n\n\n\n\nThird Party Apps\n\u2301\n\n\nIf you use a 3rd party app, such as My Fitness Pal, to enter and track carbs and that app also stores the carb values in HealthKit, Loop will read those values from Apple HealthKit and display and use them in calculating temp basal rates. Entries from 3rd party apps can not be removed from within Loop.  You will have to edit them in the third party app, or from the Health app. Because of this potential for confusion, it is recommended to turn off Loop's ability to read other apps' carbohydrate data from HealthKit. You are asked if you want to enable this when Loop is first installed. After installation, you can also go to the Settings App -\n Privacy -\n Health -\n Loop and turn off \nRead Data for Carbohydrates\n.", 
            "title": "Carb Entries"
        }, 
        {
            "location": "/operation/features/carbs/#carb-entry", 
            "text": "New carb entries can be made by using the green carb tool in the toolbar at the bottom of the status screen.  Do not use your pump's bolus wizard or pump's carb entry to record carbs into the Loop app.  Nor should you use Nightscout's careportal to enter carbs, as Loop does not read carb entries remotely.", 
            "title": "Carb Entry"
        }, 
        {
            "location": "/operation/features/carbs/#new-carbs", 
            "text": "To begin a new meal entry, simply enter the number of carbs to be eaten in the  amount consumed  line.  By default, the carb absorption time for a new carb entry will correspond to the taco icon.  If you haven't made any customizations to the lollipop, taco, or pizza icons during your Loop build, then the default carb absorption time will display as 3 hours.  The default time entry is for the current time and date.  Once you press  Save  on the carb entry screen, the Loop's bolus tool will open to provide a recommended bolus.", 
            "title": "New Carbs"
        }, 
        {
            "location": "/operation/features/carbs/#avoid-double-carb-entries", 
            "text": "Be Aware  When you press  Save  for a carb entry, Loop will consider that carb entry saved and use it for calculating temp basals and recommended boluses.  Be cautious about repeated attempts to enter the same meal...Loop will continue to save the carb entries UNLESS you push cancel on the carb entry screen.  Simply canceling a bolus does not cancel the carb entry. \nIf you have accidentally made multiple entries for the same carbs, click on the Carbs Chart in the main Loop display and you can delete the redundent carb entries by swiping left on the entries.", 
            "title": "Avoid Double Carb Entries"
        }, 
        {
            "location": "/operation/features/carbs/#carb-absorption-time", 
            "text": "To select your carb entry's absorption time, you can either click on the default food emojis or manually enter carb absoprtion time by selecting the  absorption time  line in the carb entry tool.  The plate emoji, found to the right of the pizza emoji, can also be used if you are unsure of a new food.  There are other food emojis grouped into fast, medium, and slow absorbing foods.  This may be particularly useful for teens that are trying to learn new foods/meals.  Additionally, if you select the plate icon, you can add text to your  food type  by selecting the  abc  button in the bottom left corner of the screen.        The default carb absorption times in Loop app are average representations for high, medium, and low glycemic index foods.  Ever since Loop v1.4.0, the algorithm incorporates dynamic carb absorption.  Previous Loop versions were based on a curve that assumed the rate of carb absorption would start out slow, increase to a mid-point, and then taper off.  However, in the real world, carb absorption is quite variable.  Dynamic carb absorption model is able to model some of this variability and allow Loop to respond more reasonably when actual carb absorption is not matching well with the selected carb absorption time for a meal.  In short, while entering a carb absorption time is still part of recording meals in Loop, it is much less critical to get it right.  Now your entry serves more as a guideline, than a rule, for Loop to model carb absorption.  For a more detailed explanation of the new dynamic carb absorption model, please read about it  here .  To help Loop adjust for carbs that may digest slower than your original estimate, Loop will initially apply a 1.5x multiplier to your entered carb absorption time.  So, a meal entered using the taco icon will initially be treated as a 4.5 hour absorption meal.  As Loop observes the BG impacts of the meal, Loop will shorten the meal's absorption time if BGs are showing quicker impacts than expected, as well as adjust insulin deliveries (e.g., increase temp basals).  You can watch the progression of the Loop's observations of your meal by clicking on the Carbs Chart and watching the insulin counteraction effects.", 
            "title": "Carb Absorption Time"
        }, 
        {
            "location": "/operation/features/carbs/#mixed-carb-meals", 
            "text": "You do not have to enter all carbs for a meal at the same absoption or eating time.  If you want to enter some of the meal's carbs as faster, and some slower, you can log the meal over several individual carb entries.  For example, for meals that have sugary carbs as well as slow acting carbs (Chinese food), you may wish to do part of the carbs as lollipop and part of the carbs as pizza.  Pressing the  Save  button in the top right corner will save the carbs into the Loop app and bring up the Loop's bolus tool.  When entering multiple carb absorption durations for a single meal, press save on the carb entry and then press cancel on the bolus tool when it appears.  When you have entered your last carb entry for the meal, then use the bolus tool to deliver the bolus for the entire meal.  Loop will provide a recommendation based on all the saved carbs and their respective absorption durations in total.", 
            "title": "Mixed Carb Meals"
        }, 
        {
            "location": "/operation/features/carbs/#prebolus", 
            "text": "You can let Loop know you are going to prebolus a meal by adjusting the time of the carb entry on the \u201cdate\u201d line of the carb entry.  If you are prebolusing by 20 minutes, simply add 20 minutes to the carb entry time.", 
            "title": "Prebolus"
        }, 
        {
            "location": "/operation/features/carbs/#edit-carbs", 
            "text": "Clicking on the Carbohydrate chart in the Loop's main status screen will open the carb entry history and previous entries can be modified or deleted through this screen.  If you need to change a prebolus time, add/subtract carbs, adjust carb absorption times (even mid-meal), just go into that edit screen and tap on the carb entry you'd like to edit, or left-swipe to delete the entry entirely.  This can be a particularly useful tool when:   You did not finish an entire meal that you bolused for,  You did not get to eat meal at the time you originally expected,  You ate more servings than originally entered, or  You suspect your carb count was in error because BGs are rising more/less than expected.", 
            "title": "Edit Carbs"
        }, 
        {
            "location": "/operation/features/carbs/#third-party-apps", 
            "text": "If you use a 3rd party app, such as My Fitness Pal, to enter and track carbs and that app also stores the carb values in HealthKit, Loop will read those values from Apple HealthKit and display and use them in calculating temp basal rates. Entries from 3rd party apps can not be removed from within Loop.  You will have to edit them in the third party app, or from the Health app. Because of this potential for confusion, it is recommended to turn off Loop's ability to read other apps' carbohydrate data from HealthKit. You are asked if you want to enable this when Loop is first installed. After installation, you can also go to the Settings App -  Privacy -  Health -  Loop and turn off  Read Data for Carbohydrates .", 
            "title": "Third Party Apps"
        }, 
        {
            "location": "/operation/features/bolus/", 
            "text": "Bolus\n\u2301\n\n\n\n\n\n\n\n\n\nBolus entries can be made manually through the bolus tool (double orange triangles) in the toolbar, either as part of a meal bolus or as a correction for a high BG.\n\n\nMeal Bolus\n\u2301\n\n\nLoop has a Bolus Wizard, similar to a pump\u2019s bolus wizard.  After a carb entry is saved, Loop will provide a bolus screen with a recommended bolus amount.  The only time the bolus screen wouldn't appear is if Loop believes the insulin-on-board is already sufficient to cover the added carbs.  If you want to deliver the total amount of the recommended bolus, simply tap on the recommended amount of units and the bolus delivery line will automatically be filled-in with the same units.  If you want to give fewer units than the recommended amount, you can manually enter the desired amount to be delivered.\n\n\nThe Bolus Wizard will not offer a recommended bolus if your BG is predicted to go below your specified Suspend Threshold.  A screen will appear letting you know the reason no bolus is being recommended as well as the status of your active COB and IOB.  You can choose to override that warning and give a bolus, or treat the low BG and come back to the bolus tool when your BG has recovered.\n\n\n\n\n\n\n\n\n\nCorrection Bolus\n\u2301\n\n\nOccasionally, a recommended bolus will be offered in the bolus tool unrelated to a newly saved carb entry.  In those cases, Loop is calculating that it will not be able to stay in the BG correction range through the use of high temp basals alone and is offering a \u201ccorrection bolus\u201d.  Correction boluses will not be delivered automatically by Loop, they must be delivered by the user.  Loop will also not give an alert when a correction bolus is being offered, the bolus entry tool must be clicked to check for one.  The Loop pill in Nightscout will also display when Loop has a recommended bolus calculated.  In a well-tuned loop with decent carb counting, correction boluses should be infrequently needed.\n\n\nPart of Loop's predictions for future BG changes include a component called BG momentum.  Loop does not use BG momentum component of predicted BGs for bolusing recommendations.  The omission of BG momentum from bolus recommendations helps Loop not over-correct when bolusing during times of rapidly increasing BGs.\n\n\nStarting Bolus Notification\n\u2301\n\n\nA new status line will appear when Loop is sending a bolus command to the pump.  Just above the Glucose Chart, you will see a \"stating bolus\" indicator.\n\n\n\n\n\n\n\n\n\nBolus Failure Notifications\n\u2301\n\n\nOn occasion, you will receive notification that a bolus may have failed. In some of these cases, the bolus actually will begin delivery. Therefore, you should always check the pump screen to verify the bolus status before attempting to redeliver a failed bolus.\n\n\n\n\nThere is a known issue with some x15 WW pumps falsely stating bolus failure notifications with every bolus.  Please read \nhere\n for additional information about how to fix the issue until Loop code is updated with a permanent fix.\n\n\n\n\nPre-Meal\n\u2301\n\n\nThe pre-meal override target can be used prior to bolusing in order to help control post-prandial BGs.  For example, by setting an 80 mg/dl - 80 mg/dl pre-meal target an hour before a meal, Loop to deliver additional insulin to bring BGs down to 80 mg/dL instead of the usual correction range.  By getting the insulin in a little sooner, there will be more active insulin awaiting the carb absoprtion when the meal is eaten.\n\n\nIf you are using the pre-meal target, when you save the carbs for the meal entry, Loop will cancel the pre-meal target and revert back to your normal correction range.  The Loop will account for the amount of insulin it has prebolused and use your normal correction range when making the bolus recommendation.\n\n\nSquare or Dual Waves\n\u2301\n\n\nUnfortunately, Loop cannot enact temp basals while the pump is delivering a square- or dual-wave bolus.  Therefore, you will need to use alternate bolusing strategies for situation where you would've previously used those extended bolusing techniques.\n\n\nThe good news is that Loop has the only \"smart\" bolus wizard available in any DIY or commercial loop.  Because you are entering a carb absorption time with each carb entry, Loop is also using that information to predict how well your insulin bolusing and carb absorption will align.  So when Loop offers you a bolus, it may actually offer less of a bolus upfront for long, slow carb meals...and will make up the remaining bolus amount via high temp basals later.\n\n\nIn understanding Loop's smart bolusing, it may help to think back to the reason you originally used square- or dual-wave boluses.  Typically you used those extended bolusing strategies because if you had entered all the insulin, based on carb ratio alone, upfront at the beginning of the meal...you would have gone low shortly after bolusing.  The food would simply be absorbing too slow and the whole amount of insulin working too fast...and you'd go low until the rest of the meal would kick in later.  The extended bolusing was a way of avoiding the early low and also addressing the later high for meals like pizza or chinese food.\n\n\nLoop emmulates that extended bolusing when you enter long duration carb absorptions.  Let's use an example of a pizza meal where carb ratios alone would've required a 10 unit bolus for the meal.  By telling Loop the meal will take a long (aka 4+ hours) carb absorption time, Loop may only offer 6 units up front as an initial bolus.  After you eat though, Loop knows that it has not provided all the insulin that will be necessary to account for the carbs.  Loop will provide the remaining 4 units via high temp basals as soon as predicted BGs are showing that there is no danger of a post-prandial low.  In other words, Loop waits until the danger of a quick low is over and then will high temp to cover the late digesting carbs.  If you don't want to wait for Loop to deliver the remaining \"second\" bolus via high temps, you can click on the bolus tool when BGs start to rise and deliver the remaining bolus needed.  Loop will have a recommended bolus awaiting when the predicted BGs are above correction range.\n\n\nWhile you adapt to new bolusing techniques, it is important to monitor closely to see what works for you.  It will take some trial and error to get it right.  For meals like Chinese food, where there is a mix of fast carbs and slow carbs, you may want to break the total meal entry into a couple mixed carb entries to help Loop provide the best bolus recommendation upfront.  Additionally, some people account for the fats/proteins that digest by adding slow carbs with long absorption times for meals that cause late BG rises.\n\n\nA very useful tool is to check back on your Insulin Counteraction Effects graph to see how your original entry compared to how Loop perceived your final meal impacts.  You can read more about that tool here (to do: insert link).\n\n\nGlucodyn\n\u2301\n\n\nUsing the \nGlucodyn\n model can help you simulate new bolusing strategies.  Glucodyn allows you to simulate your post-prandial BGs based on your particular ISF, carb ratio, and carbs.  You can simulate split boluses and watch their impact on simulated BG responses.  The underlying math of the Glucodyn model was the basis of Loop's insulin/carb calculations in early Loop versions.  The math has changed since then, however the model still provides a useful visualization about the interactions between DIA, carb absorption times and insulin dosing.", 
            "title": "Bolus"
        }, 
        {
            "location": "/operation/features/bolus/#bolus", 
            "text": "Bolus entries can be made manually through the bolus tool (double orange triangles) in the toolbar, either as part of a meal bolus or as a correction for a high BG.", 
            "title": "Bolus"
        }, 
        {
            "location": "/operation/features/bolus/#meal-bolus", 
            "text": "Loop has a Bolus Wizard, similar to a pump\u2019s bolus wizard.  After a carb entry is saved, Loop will provide a bolus screen with a recommended bolus amount.  The only time the bolus screen wouldn't appear is if Loop believes the insulin-on-board is already sufficient to cover the added carbs.  If you want to deliver the total amount of the recommended bolus, simply tap on the recommended amount of units and the bolus delivery line will automatically be filled-in with the same units.  If you want to give fewer units than the recommended amount, you can manually enter the desired amount to be delivered.  The Bolus Wizard will not offer a recommended bolus if your BG is predicted to go below your specified Suspend Threshold.  A screen will appear letting you know the reason no bolus is being recommended as well as the status of your active COB and IOB.  You can choose to override that warning and give a bolus, or treat the low BG and come back to the bolus tool when your BG has recovered.", 
            "title": "Meal Bolus"
        }, 
        {
            "location": "/operation/features/bolus/#correction-bolus", 
            "text": "Occasionally, a recommended bolus will be offered in the bolus tool unrelated to a newly saved carb entry.  In those cases, Loop is calculating that it will not be able to stay in the BG correction range through the use of high temp basals alone and is offering a \u201ccorrection bolus\u201d.  Correction boluses will not be delivered automatically by Loop, they must be delivered by the user.  Loop will also not give an alert when a correction bolus is being offered, the bolus entry tool must be clicked to check for one.  The Loop pill in Nightscout will also display when Loop has a recommended bolus calculated.  In a well-tuned loop with decent carb counting, correction boluses should be infrequently needed.  Part of Loop's predictions for future BG changes include a component called BG momentum.  Loop does not use BG momentum component of predicted BGs for bolusing recommendations.  The omission of BG momentum from bolus recommendations helps Loop not over-correct when bolusing during times of rapidly increasing BGs.", 
            "title": "Correction Bolus"
        }, 
        {
            "location": "/operation/features/bolus/#starting-bolus-notification", 
            "text": "A new status line will appear when Loop is sending a bolus command to the pump.  Just above the Glucose Chart, you will see a \"stating bolus\" indicator.", 
            "title": "Starting Bolus Notification"
        }, 
        {
            "location": "/operation/features/bolus/#bolus-failure-notifications", 
            "text": "On occasion, you will receive notification that a bolus may have failed. In some of these cases, the bolus actually will begin delivery. Therefore, you should always check the pump screen to verify the bolus status before attempting to redeliver a failed bolus.   There is a known issue with some x15 WW pumps falsely stating bolus failure notifications with every bolus.  Please read  here  for additional information about how to fix the issue until Loop code is updated with a permanent fix.", 
            "title": "Bolus Failure Notifications"
        }, 
        {
            "location": "/operation/features/bolus/#pre-meal", 
            "text": "The pre-meal override target can be used prior to bolusing in order to help control post-prandial BGs.  For example, by setting an 80 mg/dl - 80 mg/dl pre-meal target an hour before a meal, Loop to deliver additional insulin to bring BGs down to 80 mg/dL instead of the usual correction range.  By getting the insulin in a little sooner, there will be more active insulin awaiting the carb absoprtion when the meal is eaten.  If you are using the pre-meal target, when you save the carbs for the meal entry, Loop will cancel the pre-meal target and revert back to your normal correction range.  The Loop will account for the amount of insulin it has prebolused and use your normal correction range when making the bolus recommendation.", 
            "title": "Pre-Meal"
        }, 
        {
            "location": "/operation/features/bolus/#square-or-dual-waves", 
            "text": "Unfortunately, Loop cannot enact temp basals while the pump is delivering a square- or dual-wave bolus.  Therefore, you will need to use alternate bolusing strategies for situation where you would've previously used those extended bolusing techniques.  The good news is that Loop has the only \"smart\" bolus wizard available in any DIY or commercial loop.  Because you are entering a carb absorption time with each carb entry, Loop is also using that information to predict how well your insulin bolusing and carb absorption will align.  So when Loop offers you a bolus, it may actually offer less of a bolus upfront for long, slow carb meals...and will make up the remaining bolus amount via high temp basals later.  In understanding Loop's smart bolusing, it may help to think back to the reason you originally used square- or dual-wave boluses.  Typically you used those extended bolusing strategies because if you had entered all the insulin, based on carb ratio alone, upfront at the beginning of the meal...you would have gone low shortly after bolusing.  The food would simply be absorbing too slow and the whole amount of insulin working too fast...and you'd go low until the rest of the meal would kick in later.  The extended bolusing was a way of avoiding the early low and also addressing the later high for meals like pizza or chinese food.  Loop emmulates that extended bolusing when you enter long duration carb absorptions.  Let's use an example of a pizza meal where carb ratios alone would've required a 10 unit bolus for the meal.  By telling Loop the meal will take a long (aka 4+ hours) carb absorption time, Loop may only offer 6 units up front as an initial bolus.  After you eat though, Loop knows that it has not provided all the insulin that will be necessary to account for the carbs.  Loop will provide the remaining 4 units via high temp basals as soon as predicted BGs are showing that there is no danger of a post-prandial low.  In other words, Loop waits until the danger of a quick low is over and then will high temp to cover the late digesting carbs.  If you don't want to wait for Loop to deliver the remaining \"second\" bolus via high temps, you can click on the bolus tool when BGs start to rise and deliver the remaining bolus needed.  Loop will have a recommended bolus awaiting when the predicted BGs are above correction range.  While you adapt to new bolusing techniques, it is important to monitor closely to see what works for you.  It will take some trial and error to get it right.  For meals like Chinese food, where there is a mix of fast carbs and slow carbs, you may want to break the total meal entry into a couple mixed carb entries to help Loop provide the best bolus recommendation upfront.  Additionally, some people account for the fats/proteins that digest by adding slow carbs with long absorption times for meals that cause late BG rises.  A very useful tool is to check back on your Insulin Counteraction Effects graph to see how your original entry compared to how Loop perceived your final meal impacts.  You can read more about that tool here (to do: insert link).", 
            "title": "Square or Dual Waves"
        }, 
        {
            "location": "/operation/features/bolus/#glucodyn", 
            "text": "Using the  Glucodyn  model can help you simulate new bolusing strategies.  Glucodyn allows you to simulate your post-prandial BGs based on your particular ISF, carb ratio, and carbs.  You can simulate split boluses and watch their impact on simulated BG responses.  The underlying math of the Glucodyn model was the basis of Loop's insulin/carb calculations in early Loop versions.  The math has changed since then, however the model still provides a useful visualization about the interactions between DIA, carb absorption times and insulin dosing.", 
            "title": "Glucodyn"
        }, 
        {
            "location": "/operation/features/workout/", 
            "text": "Workout Targets\n\u2301\n\n\n\n\n\n\n\n\n\nWorkout mode enables a temporary override target from what would normally be scheduled. The default durations for the workout mode override target are 1 hour, 2 hours, or indefinitely. If you want more options for duration, you can \ncustomize them during your Loop build\n.\n\n\nWorkout mode is used to temporarily set higher BG targets ahead of exercise that would normally cause BG to drop.  This should give the user less chance of going low during exercise because Loop will be less aggressive on setting high temp basals.  The success of the workout targets to control/prevent exercise-related BG drops will depend on the type, duration, and intensity of the activity.  Generally the more intense the workout, the farther in advance you would want to set a workout target.\n\n\nIf you find that workout targets alone aren't sufficient to prevent exercise related lows, try to implement ways of decreasing the IOB you are carrying into the workout:\n\n\n\n\nSet the workout target farther in advance of workout activity,\n\n\nSet the workout target higher than previously set, and/or\n\n\nDecrease meal boluses prior to workout.\n\n\n\n\nIf you are the type to experience lows after workouts due to increased insulin sensitivity, you may want to extend your workout override target for a period of time after workout to help prevent lows.", 
            "title": "Workout Targets"
        }, 
        {
            "location": "/operation/features/workout/#workout-targets", 
            "text": "Workout mode enables a temporary override target from what would normally be scheduled. The default durations for the workout mode override target are 1 hour, 2 hours, or indefinitely. If you want more options for duration, you can  customize them during your Loop build .  Workout mode is used to temporarily set higher BG targets ahead of exercise that would normally cause BG to drop.  This should give the user less chance of going low during exercise because Loop will be less aggressive on setting high temp basals.  The success of the workout targets to control/prevent exercise-related BG drops will depend on the type, duration, and intensity of the activity.  Generally the more intense the workout, the farther in advance you would want to set a workout target.  If you find that workout targets alone aren't sufficient to prevent exercise related lows, try to implement ways of decreasing the IOB you are carrying into the workout:   Set the workout target farther in advance of workout activity,  Set the workout target higher than previously set, and/or  Decrease meal boluses prior to workout.   If you are the type to experience lows after workouts due to increased insulin sensitivity, you may want to extend your workout override target for a period of time after workout to help prevent lows.", 
            "title": "Workout Targets"
        }, 
        {
            "location": "/operation/features/ice/", 
            "text": "Insulin Counteraction Effects\n\u2301\n\n\nTapping on your Carbohydrates graph will open up a page that tracks your carb entries for the day (since midnight).  At the top of the page is a useful graphic called Insulin Counteraction Effects (ICE for short).  What is it?  Bascially, a graphical representation of \npredicted\n upward-BG effects vs. \nencountered\n upward-BG effects.\n\n\nConsider the possible sources of triggers that counteract insulin (in other words, make BGs go up)\n\n\n\n\nfood\n\n\nstress\n\n\nillness\n\n\nsomeone sat too close to you\n\n\n\n\nAs we all know, this list can be long but, on \"normal\" days FOOD will be the single strongest \"insulin counteracter\".  Food will be the most influence on making BGs go up.  There are also other reasons that BGs climb when we may have expected them to be steady; basals being set too low, failed infusion site, etc.\n\n\nIf we assume that it's a \"normal\" day (basals are close to correct, illness is not an issue, site is good), Loop will expect most of the UPWARD pressure on BGs are from food.  Loop is calling that upward pressure Insulin Counteraction Effect (ICE).  This is a pretty reasonable assumption so let's use that for the rest of this discussion.\n\n\nICE display\n\u2301\n\n\nLet's take a look at an example day using the screenshot below.  The graph at the top of your ICE page represents that upward pressure Loop expects from the food entries.  The predicted ICE is shown as grey bars.  As a meal is tracked by Loop, you'll see green bars of observed ICE.\n\n\n\n\n\n\n\n\n\nWhen you make a food entry originally, Loop will save your entry as you've made it.  On the line below your original entry, Loop will also start tracking your food entry assuming a 1.5 times longer carb absorption time.  This helps Loop track carbs that may actually be absorbing longer than you expected (part of that whole dynamic carb absorption modelling).  Loop will be updating that value of \"observed\" carb absorption time as well as absorbed carbs as your meal goes on.\n\n\nPractical use\n\u2301\n\n\nSo how can we use this information to make our Looping experience better?  The answer is probably best illustrated using a real world example.  Chinese food...in fact, THIS chinese dish.  General Tso's chicken.  As you can see in the recipe, loads of fast carbs with ingredients like hoisin sauce, brown sugar, and cornstarch.  But also slower carbs like chicken.  Rice can be a difficult one because for us, it acts fast but also seems to have a long tail.\n\n\n\n\n\n\n\n\n\nIt was a busy day and I really didn't want to count carbs.  Ok, even on the slow days I don't want to count carbs.  I just eyeballed the bowl of food and guessed.  As I entered the food in originally, I was still trying to come up with a good guess on the ratio of fast:slow carbs but kid was in a hurry to eat.  My initial guess around 3:30pm was 70g of carbs at 5 hours absorption (note: it gets edited to 80g in a little bit), we bolused for that and she started to eat.  About 10 minutes later, I decided to add 10g of fast acting carbs at 1 hour absorption to help with the sauce's speedy carbs.\n\n\n\n\n\n\n\n\n\nWatching what was going on a little later...BGs were rising at a decent clip and I had a feeling I really didn't cover things super well...so I edited the original 70g entry, adding 10g and making it 80g instead.  (That's why there is a 2U bolus around 4:20pm.)  And of course around 5:40pm there was a little bit of nibbling on the leftovers as we put them into the fridge.  We gave 10g for that.  BGs climbed a bit more, not suprising given how we were underestimating fast carbs at this point...but still not so bad at 180 peak BG.  (Anna gave 2 units correction at the peak because there was dessert coming later that night and she wanted to be ready for it without too much prebolus.)\n\n\n\n\n\n\n\n\n\nSo, how can I use the ICE info to make this meal better?  I can look at the observed ICE information and the observed carb entry Loop has recorded to adjust my insulin bolusing the next time we eat this meal.\n\n\nFor example, the biggest weakness I had in this (and suspected it even as I did the initial bolus) was that I underestimated the sauce's fast carbs.  I can see this in the observed ICE graph having the early green peaks after the meal, and in the way that the observed carb distribution was more like 7:2 vs my original guess of 8:1 (slow:fast carbs).  Overall looks like I guess on overall carb content pretty close (90g vs. 89g observed).  Next time we have General Tso's chicken, I will likely bolus it as 70g at 5 hours and 20g at 2 hours.\n\n\n\n\n\n\n\n\n\nSo remember to check your ICE page at the end of a meal's absorption.  By checking in on the meal's observed behaviors, you'll have a good starting point to fine-tuning any new or unknown carb breakdown.\n\n\nSide note:  remember this conversation is assuming you have basals fairly well set and are not sick.  If other factors could be significantly causing your BGs to swing that Loop doesn't know about (bad sites, illness, or basal rates that need to be adjusted), they may be attributed to ICE when they really aren't food related.  In those cases, address the underlying cause and then use the ICE pages when you've come back to \"normal\".", 
            "title": "Using ICE info"
        }, 
        {
            "location": "/operation/features/ice/#insulin-counteraction-effects", 
            "text": "Tapping on your Carbohydrates graph will open up a page that tracks your carb entries for the day (since midnight).  At the top of the page is a useful graphic called Insulin Counteraction Effects (ICE for short).  What is it?  Bascially, a graphical representation of  predicted  upward-BG effects vs.  encountered  upward-BG effects.  Consider the possible sources of triggers that counteract insulin (in other words, make BGs go up)   food  stress  illness  someone sat too close to you   As we all know, this list can be long but, on \"normal\" days FOOD will be the single strongest \"insulin counteracter\".  Food will be the most influence on making BGs go up.  There are also other reasons that BGs climb when we may have expected them to be steady; basals being set too low, failed infusion site, etc.  If we assume that it's a \"normal\" day (basals are close to correct, illness is not an issue, site is good), Loop will expect most of the UPWARD pressure on BGs are from food.  Loop is calling that upward pressure Insulin Counteraction Effect (ICE).  This is a pretty reasonable assumption so let's use that for the rest of this discussion.", 
            "title": "Insulin Counteraction Effects"
        }, 
        {
            "location": "/operation/features/ice/#ice-display", 
            "text": "Let's take a look at an example day using the screenshot below.  The graph at the top of your ICE page represents that upward pressure Loop expects from the food entries.  The predicted ICE is shown as grey bars.  As a meal is tracked by Loop, you'll see green bars of observed ICE.     When you make a food entry originally, Loop will save your entry as you've made it.  On the line below your original entry, Loop will also start tracking your food entry assuming a 1.5 times longer carb absorption time.  This helps Loop track carbs that may actually be absorbing longer than you expected (part of that whole dynamic carb absorption modelling).  Loop will be updating that value of \"observed\" carb absorption time as well as absorbed carbs as your meal goes on.", 
            "title": "ICE display"
        }, 
        {
            "location": "/operation/features/ice/#practical-use", 
            "text": "So how can we use this information to make our Looping experience better?  The answer is probably best illustrated using a real world example.  Chinese food...in fact, THIS chinese dish.  General Tso's chicken.  As you can see in the recipe, loads of fast carbs with ingredients like hoisin sauce, brown sugar, and cornstarch.  But also slower carbs like chicken.  Rice can be a difficult one because for us, it acts fast but also seems to have a long tail.     It was a busy day and I really didn't want to count carbs.  Ok, even on the slow days I don't want to count carbs.  I just eyeballed the bowl of food and guessed.  As I entered the food in originally, I was still trying to come up with a good guess on the ratio of fast:slow carbs but kid was in a hurry to eat.  My initial guess around 3:30pm was 70g of carbs at 5 hours absorption (note: it gets edited to 80g in a little bit), we bolused for that and she started to eat.  About 10 minutes later, I decided to add 10g of fast acting carbs at 1 hour absorption to help with the sauce's speedy carbs.     Watching what was going on a little later...BGs were rising at a decent clip and I had a feeling I really didn't cover things super well...so I edited the original 70g entry, adding 10g and making it 80g instead.  (That's why there is a 2U bolus around 4:20pm.)  And of course around 5:40pm there was a little bit of nibbling on the leftovers as we put them into the fridge.  We gave 10g for that.  BGs climbed a bit more, not suprising given how we were underestimating fast carbs at this point...but still not so bad at 180 peak BG.  (Anna gave 2 units correction at the peak because there was dessert coming later that night and she wanted to be ready for it without too much prebolus.)     So, how can I use the ICE info to make this meal better?  I can look at the observed ICE information and the observed carb entry Loop has recorded to adjust my insulin bolusing the next time we eat this meal.  For example, the biggest weakness I had in this (and suspected it even as I did the initial bolus) was that I underestimated the sauce's fast carbs.  I can see this in the observed ICE graph having the early green peaks after the meal, and in the way that the observed carb distribution was more like 7:2 vs my original guess of 8:1 (slow:fast carbs).  Overall looks like I guess on overall carb content pretty close (90g vs. 89g observed).  Next time we have General Tso's chicken, I will likely bolus it as 70g at 5 hours and 20g at 2 hours.     So remember to check your ICE page at the end of a meal's absorption.  By checking in on the meal's observed behaviors, you'll have a good starting point to fine-tuning any new or unknown carb breakdown.  Side note:  remember this conversation is assuming you have basals fairly well set and are not sick.  If other factors could be significantly causing your BGs to swing that Loop doesn't know about (bad sites, illness, or basal rates that need to be adjusted), they may be attributed to ICE when they really aren't food related.  In those cases, address the underlying cause and then use the ICE pages when you've come back to \"normal\".", 
            "title": "Practical use"
        }, 
        {
            "location": "/operation/features/watch/", 
            "text": "Apple Watch\n\u2301\n\n\n\n\n\n\n\n\n\nIf you add an Apple Watch after building Loop, you will need to pair your watch to your iPhone and then rebuild Loop to enable the Loop watch app to show up as an available watch app.\n\n\nLoop is currently supported with all released versions of the Apple Watch and Apple watchOS 4.  Cool factor is increased since the Loop user can directly enter carbs and boluses straight from the watch, without needing to access the iPhone.  The Loop watch app shows the Loop status, current BG, eventual BG, carb tool, and bolus tool.\n\n\nBy tapping on the carb or bolus tools, you can adjust the entries using the crown to dial in more/less.  The default installation of the Loop's watch app autofills in 75% of the recommended bolus, and you can manually scroll to get the full bolus amount.  Please check the \nApple Watch customizations section\n if you wish to change that to 100% recommended bolus as the initial autofill.\n\n\nA loop complication exists to show BG on the watchface but the update rate is limited to ~30mins due to limitations imposed by apple to increase battery life. If constant, real-time monitoring is desired, you should use the Loop app as the main screen. This can be achieved by setting the watch to always show last opened app on wake. Loop will always have to be the last app opened for this to work.  (Note: recent watchOS seems to be a bit flakey on actually bringing up the last app used, and instead often defaults to the user's watchface instead.  If you have a Loop complication installed in the watchface, you can simply tap the complication to open Loop's watch app.)", 
            "title": "Apple Watch"
        }, 
        {
            "location": "/operation/features/watch/#apple-watch", 
            "text": "If you add an Apple Watch after building Loop, you will need to pair your watch to your iPhone and then rebuild Loop to enable the Loop watch app to show up as an available watch app.  Loop is currently supported with all released versions of the Apple Watch and Apple watchOS 4.  Cool factor is increased since the Loop user can directly enter carbs and boluses straight from the watch, without needing to access the iPhone.  The Loop watch app shows the Loop status, current BG, eventual BG, carb tool, and bolus tool.  By tapping on the carb or bolus tools, you can adjust the entries using the crown to dial in more/less.  The default installation of the Loop's watch app autofills in 75% of the recommended bolus, and you can manually scroll to get the full bolus amount.  Please check the  Apple Watch customizations section  if you wish to change that to 100% recommended bolus as the initial autofill.  A loop complication exists to show BG on the watchface but the update rate is limited to ~30mins due to limitations imposed by apple to increase battery life. If constant, real-time monitoring is desired, you should use the Loop app as the main screen. This can be achieved by setting the watch to always show last opened app on wake. Loop will always have to be the last app opened for this to work.  (Note: recent watchOS seems to be a bit flakey on actually bringing up the last app used, and instead often defaults to the user's watchface instead.  If you have a Loop complication installed in the watchface, you can simply tap the complication to open Loop's watch app.)", 
            "title": "Apple Watch"
        }, 
        {
            "location": "/operation/features/widget/", 
            "text": "iPhone Widget\n\u2301\n\n\nThe Loop app will automatically build a widget that will be available on your iPhone.  The widget is available in the Today view of your iPhone.  Swipe right on your iPhone homescreen and your widgets will be available.  The Loop widget maybe at the bottom of your widget list.  Scroll down to the bottom of the screen and press the \nedit\n button.  That opens an \"Add Widgets\" screen.  If you hold and drag the three horizontal lines on the Loop widget row, you can drag it up to the order you'd like it to appear on your widget list.", 
            "title": "iPhone widget"
        }, 
        {
            "location": "/operation/features/widget/#iphone-widget", 
            "text": "The Loop app will automatically build a widget that will be available on your iPhone.  The widget is available in the Today view of your iPhone.  Swipe right on your iPhone homescreen and your widgets will be available.  The Loop widget maybe at the bottom of your widget list.  Scroll down to the bottom of the screen and press the  edit  button.  That opens an \"Add Widgets\" screen.  If you hold and drag the three horizontal lines on the Loop widget row, you can drag it up to the order you'd like it to appear on your widget list.", 
            "title": "iPhone Widget"
        }, 
        {
            "location": "/operation/features/healthapp/", 
            "text": "Health App\n\u2301\n\n\nLoop app uses the iPhone's Health app to store BGs, insulin, and carbohydrate data.  Insulin Data is a new feature with iOS 11.  You can check your Health App settings for Loop by opening the Health App, clicking on Sources at the bottom bar, and then clicking on the Loop app.\n\n\n\n\n\n\n\n\n\nSummaries of your carbohydrates, insulin, and BG results can be found by clicking on the Health Data at the bottom bar, and then selecting either the large Nutrition box (for carbohydrates) or smaller Results line (for insulin deliveries and BG results).\n\n\n\n\n\n\n\n\n\nIf you toggle on the \"add to favorites\" slider for the individual data categories (insulin, BGs, carbohydrates), the data from those categories will be added to your Today view for easy quick reference and access.\n\n\n\n\n\n\n\n\n\nThe summary data for the categories can help you follow monthly trends, help identify periods of insulin sensitivity/resistance, evaluate total daily insulin use, breakdown of basal vs bolus insulin, and carbohydrate consumptions.  You can sort your data trends by day, week, month, or year views and scroll back through time in each of those data trends.  You can even quickly use these data for endocrinology appointments discussions...as they provide the endocrinologist with a very quick and useful set of data points directly from your Loop system.", 
            "title": "Health App"
        }, 
        {
            "location": "/operation/features/healthapp/#health-app", 
            "text": "Loop app uses the iPhone's Health app to store BGs, insulin, and carbohydrate data.  Insulin Data is a new feature with iOS 11.  You can check your Health App settings for Loop by opening the Health App, clicking on Sources at the bottom bar, and then clicking on the Loop app.     Summaries of your carbohydrates, insulin, and BG results can be found by clicking on the Health Data at the bottom bar, and then selecting either the large Nutrition box (for carbohydrates) or smaller Results line (for insulin deliveries and BG results).     If you toggle on the \"add to favorites\" slider for the individual data categories (insulin, BGs, carbohydrates), the data from those categories will be added to your Today view for easy quick reference and access.     The summary data for the categories can help you follow monthly trends, help identify periods of insulin sensitivity/resistance, evaluate total daily insulin use, breakdown of basal vs bolus insulin, and carbohydrate consumptions.  You can sort your data trends by day, week, month, or year views and scroll back through time in each of those data trends.  You can even quickly use these data for endocrinology appointments discussions...as they provide the endocrinologist with a very quick and useful set of data points directly from your Loop system.", 
            "title": "Health App"
        }, 
        {
            "location": "/operation/features/notifications/", 
            "text": "Notifications in Loop\n\u2301\n\n\n\n\n\n\n\n\n\nLoop provides the following local notifications on the Loop iPhone:\n\n\n\n\n\n\nLoop failure\n  At 20, 40, 60, and 120 minutes, there is a Loop Failure notification.\n\n\n\n\n\n\nLow Reservoir\n  At 20% and 10% remaining reservoir volume, there is a Low Reservoir notification.\n\n\n\n\n\n\nEmpty Reservoir\n  Loop will notify when reservoir is empty.\n\n\n\n\n\n\nLow Battery\n Loop will notify when battery levels have approximately 8-10 hours of battery life remaining.\n\n\n\n\n\n\nBolus failure\n  If Loop detects that a bolus was not able to be delivered, it will provide a notification.  Bolus failures are usually due to stale pump data.  Try fetching recent history from the RileyLink menu to update pump data.  Loop will also notify of partial bolus deliveries.\n\n\n\n\n\n\nLoop does not have remote notification to other devices.  If you are a remotely monitoring parent, you will want to read \nhere\n about setting up pushover alerts using your Nightscout site if you want proactive notifications of looping related information.", 
            "title": "Loop Notifications"
        }, 
        {
            "location": "/operation/features/notifications/#notifications-in-loop", 
            "text": "Loop provides the following local notifications on the Loop iPhone:    Loop failure   At 20, 40, 60, and 120 minutes, there is a Loop Failure notification.    Low Reservoir   At 20% and 10% remaining reservoir volume, there is a Low Reservoir notification.    Empty Reservoir   Loop will notify when reservoir is empty.    Low Battery  Loop will notify when battery levels have approximately 8-10 hours of battery life remaining.    Bolus failure   If Loop detects that a bolus was not able to be delivered, it will provide a notification.  Bolus failures are usually due to stale pump data.  Try fetching recent history from the RileyLink menu to update pump data.  Loop will also notify of partial bolus deliveries.    Loop does not have remote notification to other devices.  If you are a remotely monitoring parent, you will want to read  here  about setting up pushover alerts using your Nightscout site if you want proactive notifications of looping related information.", 
            "title": "Notifications in Loop"
        }, 
        {
            "location": "/operation/features/battery/", 
            "text": "Pump Battery\n\u2301\n\n\nOne common confusion point for new Loop users is how to interpret their pump's battery levels and whether they need to change their pump batteries based on which pieces of information.\n\n\nDischarge Curves\n\u2301\n\n\nThere are generally two different types of AAA batteries that we use in these Medtronic pumps; alkaline or lithium.\n\n\nTo understand pump battery levels, you first need to know a little about \nbattery discharge curves\n.  It's not a hard concept...basically how a battery dies over time as it is used or sits in a drawer.  More technically said, a battery discharge curve is the measure of volts that a battery puts out over time.  Batteries start at a higher voltage output and slowly that volatge output degrades over time (or use) until the battery no longer provides enough \"ummph\" to keep the electronic gadget going.  BUT, alkaline batteries and lithium batteries have different discharge curves due to the chemistry inside them, and the curves can be slightly different depending on environment (temperature) and battery manufacturer.\n\n\nAlkaline batteries have a relatively steady voltage drop over time, as shown below.  Notice the shape of the curve has a significant amount of time in the 1.3 to 1.2 volts range, and a relatively smooth decline to about 1.2 volts.\n\n\n\n\n\n\n\n\n\nLithium batteries have a much steadier voltage output over time, as shown below.  Notice how the shape of the curve is relatively flat for a large portion of the battery life before suddenly off around 1.3 volts.\n\n\n\n\n\n\n\n\n\nWhat does the above information mean in terms of Looping?  A lithium battery at 1.3v is going to have a much quicker time to death than an alkaline battery sitting at 1.3v.  You might only get a couple hours of looping left when a lithium battery is at 1.3v, but a alkaline battery at 1.3v might go another several days.  So when we talk about setting alarm levels in either system, your battery type is an important consideration.\n\n\nMedtronic Pump Battery Level Indicator\n\u2301\n\n\nIf you read Medtronic's literature, it will tell you to use Energizer alkaline batteries in their pumps.  Why would that be?  Hint: the answer doesn't mean that Duracell batteries are inherently worse than Energizer or that lithium batteries won't work in Medtronic pumps.\n\n\nThe answer is all about the accuracy of their little pump battery level indicator on their pump's screen.\n  Medtronic calibrated their pump battery level indicator to:\n\n\n\n\nEnergizer alkaline batteries\n\n\nNormal (non-Loop) uses\n\n\nTemperatures between 37\u00b0F (3\u00b0C) to 104\u00b0F (40\u00b0C).\n\n\n\n\nIn other words, Medtronic ran experiments to see exactly how long an Energizer alkaline battery will last in normal pump use and made their own discharge curve.  They programmed their pump battery level indicator to change from 4 bars to 3 bars to 2 bars to 1 bar based on that particular discharge curve.\n\n\nHowever, Loop users are slightly more demanding on the pump's battery/voltage than simply having the insulin delivery.  We are also asking for the pump to perform radio communications, in addition to delivering insulin.  That radio communications needs a slightly higher voltage than the typical \"normal\" pump use.  So while a non-Looper might be ok running their pump until a voltage of about 1.12 for insulin delivery, radio communications might stop at a voltage output of about 1.17.  If you experiment with your Looping pump, you'll find Loop will turn red from failed pump comms before the pump actually fails at insulin delivery.  This difference between \"failure\" voltages needs to be considered when determining how much useful battery life is left for a pump battery.\n\n\nIn summary, that little pump battery indicator on the Medtronic pump screen is ONLY useful if you are:\n\n\n\n\nnot using the pump for Looping,\n\n\nusing Energizer alkaline batteries, and\n\n\nin the temperature environment similar to their testing.\n\n\n\n\n\n\nLoop users should not rely on their Medtronic pump screen's pump battery indicator, and instead use the Loop's pump battery level indicator.\n\n\n\n\nLoop's Pump Battery Level Indicator\n\u2301\n\n\nKeeping the information about battery discharge curves in mind, Loop developers tested various battery brands and types to develop discharge curves for Loop users.  These discharge curves form the basis of the pump battery level indicator found in the top right of the Loop's main display screen and the pump battery notifications provided by the Loop app.  The pump battery level indicator will also report in %.\n\n\n\n\nFor x23 and x54 model users, the Loop's pump battery level will move in 25% increments.\n\n\nFor x15 and x22 model users, the Loop's pump battery level will move in discrete % increments.\n\n\n\n\nUsing information of the battery type selected and the pump model being used, the Loop's pump battery level notifications are designed to give the user about 8 hours of notice before pump communications are likely to fail.  The Loop user should have some additional time after pump comms fail before actual insulin delivery would stop.\n\n\nNightscout Pump Battery Display\n\u2301\n\n\nThe Nightscout information regarding pump battery levels will depend on pump model being used.\n\n\n\n\nIf you use an x23 or x54 pump and MySentry, the pump levels are reported as \npercent\n to NS, because that's how MySentry reports the data to Loop.  The packets use 100%, 75%, 50%, and 25% increments, and the Loop's main display matches the NS pump display.\n\n\nIf you use an x22 or x15 pump, the pump levels are reported as \nvoltage\n readings to NS because Loop has to specifically ask the pump for its voltage reading.  The Loop's main display will show pump battery level as discrete %, not the individual voltage measurement.\n\n\nNo matter what pump you are using, you can always get a the current pump battery's voltage by using the RileyLink's \nRead Pump Status\n command.\n\n\nThe extra communications effort for non-MySentry model pumps will mean slightly shorter battery life vs. MySentry model pumps.\n\n\n\n\nNightscout Pump Battery Alarms\n\u2301\n\n\nThe Nightscout alarms are based on the Heroku settings that you have input specifically.  If you don't specifically set them, Nightscout will use the default settings for pump battery alerts as shown below:\n\n\n\n\n\n\n\n\n\nNightscout pump battery levels, if you leave things at default installation, will not trigger alarms.  If however you add an setting of \nPUMP_ENABLE_ALERTS\n to \ntrue\n, you will receive pump battery notifications according to the levels shown in the parenthesis above.  For example, your x23 pump is reporting its levels in percent, therefore you'd receive a warning yellow alarm at 30% and an urgent red alarm at 20%.  Your x22 pump however is reporting its levels at voltage readings, therefore you'd receive a warning yellow alarm at 1.35v and an urgent red alarm at 1.30v.\n\n\n\n\nAre the default NS alarm levels going to work for you?  The answer depends on what type of battery level you are using, what model pump you are using, and how much advance notification you want to receive before needing to change a pump battery.  There is a bit of personal preference and experimentation to finding what works for you.\n\n\n\n\n\n\nFor x22 or x15 pump users, the NS alert settings that may need to be adjusted are the ones based on voltage.\n\n\n\n\n\nGenerally speaking, for a x22 or x15 pump using alkaline batteries, the default NS alarm levels will be too early to be useful and lead you to changing out your battery too frequently.  Alkaline batteries can go to low 1.2s or high 1.1s before Looping starts to have communication problems.  How much lower than the default voltage 1.35/1.30 alarm levels you want to go will depend on how far in advance you want to be warned about an upcoming battery change.\n\n\nIf however, you are using a x22 or x15 pump with lithium batteries, the default 1.35v/1.30v alarm levels may be completely appropriate.  Remember how the lithium battery curves at the start of this discussion died off quickly around 1.3v?  You won't get hardly any heads-up notice for a lithium battery if you set the alarm below 1.3v.\n\n\n\n\nFor x23 or x54 pump users, the NS alert settings that may need to be adjusted are the ones based on percentage settings.\n\n\n\n\n\nAlkaline and lithium batteries should have automatically had their percentage-remaining based on the correct battery type in your Loop settings.  So, generally speaking the default NS alert levels don't generally need adjusting.  However, if you are using lithium batteries, the drop off between 75% to 25% can be quite dramatic and not be easy to anticipate (especially if the drop happens overnight).\n\n\nAs an alternate method of tracking pump battery changes, you could use the insulin age (IAGE) plug-in to anticipate your pump battery changes as well.  For example, after tracking pump battery life on my 723 using energizer batteries lithium batteries for the last several months, I know that we get about 15 days plus a handful of hours.  The amount of hours more beyond 15 days varies depending on how much we've interacted with the pump buttons directly, whether we've looped the full 15 days solid, and if the pump has been in extreme weather (cold weather can sap pump battery life).  By tracking the pump battery changes with NS's careportal \"insulin cartridge change\", I can see in advance if we are nearing an overnight on a 15 day battery and decide to change batteries before overnight to prevent any middle-of-night battery issues.\n\n\n\n\n\n\nLithium batteries will get signifcantly longer life than an alkaline battery.\n\n\nExperiment and track your particular pump model and battery type to understand what NS settings will work best for you.\n\n\nDo not rely on the pump's on-screen pump battery indicator, especially when using lithium batteries.", 
            "title": "Pump Battery"
        }, 
        {
            "location": "/operation/features/battery/#pump-battery", 
            "text": "One common confusion point for new Loop users is how to interpret their pump's battery levels and whether they need to change their pump batteries based on which pieces of information.", 
            "title": "Pump Battery"
        }, 
        {
            "location": "/operation/features/battery/#discharge-curves", 
            "text": "There are generally two different types of AAA batteries that we use in these Medtronic pumps; alkaline or lithium.  To understand pump battery levels, you first need to know a little about  battery discharge curves .  It's not a hard concept...basically how a battery dies over time as it is used or sits in a drawer.  More technically said, a battery discharge curve is the measure of volts that a battery puts out over time.  Batteries start at a higher voltage output and slowly that volatge output degrades over time (or use) until the battery no longer provides enough \"ummph\" to keep the electronic gadget going.  BUT, alkaline batteries and lithium batteries have different discharge curves due to the chemistry inside them, and the curves can be slightly different depending on environment (temperature) and battery manufacturer.  Alkaline batteries have a relatively steady voltage drop over time, as shown below.  Notice the shape of the curve has a significant amount of time in the 1.3 to 1.2 volts range, and a relatively smooth decline to about 1.2 volts.     Lithium batteries have a much steadier voltage output over time, as shown below.  Notice how the shape of the curve is relatively flat for a large portion of the battery life before suddenly off around 1.3 volts.     What does the above information mean in terms of Looping?  A lithium battery at 1.3v is going to have a much quicker time to death than an alkaline battery sitting at 1.3v.  You might only get a couple hours of looping left when a lithium battery is at 1.3v, but a alkaline battery at 1.3v might go another several days.  So when we talk about setting alarm levels in either system, your battery type is an important consideration.", 
            "title": "Discharge Curves"
        }, 
        {
            "location": "/operation/features/battery/#medtronic-pump-battery-level-indicator", 
            "text": "If you read Medtronic's literature, it will tell you to use Energizer alkaline batteries in their pumps.  Why would that be?  Hint: the answer doesn't mean that Duracell batteries are inherently worse than Energizer or that lithium batteries won't work in Medtronic pumps.  The answer is all about the accuracy of their little pump battery level indicator on their pump's screen.   Medtronic calibrated their pump battery level indicator to:   Energizer alkaline batteries  Normal (non-Loop) uses  Temperatures between 37\u00b0F (3\u00b0C) to 104\u00b0F (40\u00b0C).   In other words, Medtronic ran experiments to see exactly how long an Energizer alkaline battery will last in normal pump use and made their own discharge curve.  They programmed their pump battery level indicator to change from 4 bars to 3 bars to 2 bars to 1 bar based on that particular discharge curve.  However, Loop users are slightly more demanding on the pump's battery/voltage than simply having the insulin delivery.  We are also asking for the pump to perform radio communications, in addition to delivering insulin.  That radio communications needs a slightly higher voltage than the typical \"normal\" pump use.  So while a non-Looper might be ok running their pump until a voltage of about 1.12 for insulin delivery, radio communications might stop at a voltage output of about 1.17.  If you experiment with your Looping pump, you'll find Loop will turn red from failed pump comms before the pump actually fails at insulin delivery.  This difference between \"failure\" voltages needs to be considered when determining how much useful battery life is left for a pump battery.  In summary, that little pump battery indicator on the Medtronic pump screen is ONLY useful if you are:   not using the pump for Looping,  using Energizer alkaline batteries, and  in the temperature environment similar to their testing.    Loop users should not rely on their Medtronic pump screen's pump battery indicator, and instead use the Loop's pump battery level indicator.", 
            "title": "Medtronic Pump Battery Level Indicator"
        }, 
        {
            "location": "/operation/features/battery/#loops-pump-battery-level-indicator", 
            "text": "Keeping the information about battery discharge curves in mind, Loop developers tested various battery brands and types to develop discharge curves for Loop users.  These discharge curves form the basis of the pump battery level indicator found in the top right of the Loop's main display screen and the pump battery notifications provided by the Loop app.  The pump battery level indicator will also report in %.   For x23 and x54 model users, the Loop's pump battery level will move in 25% increments.  For x15 and x22 model users, the Loop's pump battery level will move in discrete % increments.   Using information of the battery type selected and the pump model being used, the Loop's pump battery level notifications are designed to give the user about 8 hours of notice before pump communications are likely to fail.  The Loop user should have some additional time after pump comms fail before actual insulin delivery would stop.", 
            "title": "Loop's Pump Battery Level Indicator"
        }, 
        {
            "location": "/operation/features/battery/#nightscout-pump-battery-display", 
            "text": "The Nightscout information regarding pump battery levels will depend on pump model being used.   If you use an x23 or x54 pump and MySentry, the pump levels are reported as  percent  to NS, because that's how MySentry reports the data to Loop.  The packets use 100%, 75%, 50%, and 25% increments, and the Loop's main display matches the NS pump display.  If you use an x22 or x15 pump, the pump levels are reported as  voltage  readings to NS because Loop has to specifically ask the pump for its voltage reading.  The Loop's main display will show pump battery level as discrete %, not the individual voltage measurement.  No matter what pump you are using, you can always get a the current pump battery's voltage by using the RileyLink's  Read Pump Status  command.  The extra communications effort for non-MySentry model pumps will mean slightly shorter battery life vs. MySentry model pumps.", 
            "title": "Nightscout Pump Battery Display"
        }, 
        {
            "location": "/operation/features/battery/#nightscout-pump-battery-alarms", 
            "text": "The Nightscout alarms are based on the Heroku settings that you have input specifically.  If you don't specifically set them, Nightscout will use the default settings for pump battery alerts as shown below:     Nightscout pump battery levels, if you leave things at default installation, will not trigger alarms.  If however you add an setting of  PUMP_ENABLE_ALERTS  to  true , you will receive pump battery notifications according to the levels shown in the parenthesis above.  For example, your x23 pump is reporting its levels in percent, therefore you'd receive a warning yellow alarm at 30% and an urgent red alarm at 20%.  Your x22 pump however is reporting its levels at voltage readings, therefore you'd receive a warning yellow alarm at 1.35v and an urgent red alarm at 1.30v.   Are the default NS alarm levels going to work for you?  The answer depends on what type of battery level you are using, what model pump you are using, and how much advance notification you want to receive before needing to change a pump battery.  There is a bit of personal preference and experimentation to finding what works for you.    For x22 or x15 pump users, the NS alert settings that may need to be adjusted are the ones based on voltage.   Generally speaking, for a x22 or x15 pump using alkaline batteries, the default NS alarm levels will be too early to be useful and lead you to changing out your battery too frequently.  Alkaline batteries can go to low 1.2s or high 1.1s before Looping starts to have communication problems.  How much lower than the default voltage 1.35/1.30 alarm levels you want to go will depend on how far in advance you want to be warned about an upcoming battery change.  If however, you are using a x22 or x15 pump with lithium batteries, the default 1.35v/1.30v alarm levels may be completely appropriate.  Remember how the lithium battery curves at the start of this discussion died off quickly around 1.3v?  You won't get hardly any heads-up notice for a lithium battery if you set the alarm below 1.3v.   For x23 or x54 pump users, the NS alert settings that may need to be adjusted are the ones based on percentage settings.   Alkaline and lithium batteries should have automatically had their percentage-remaining based on the correct battery type in your Loop settings.  So, generally speaking the default NS alert levels don't generally need adjusting.  However, if you are using lithium batteries, the drop off between 75% to 25% can be quite dramatic and not be easy to anticipate (especially if the drop happens overnight).  As an alternate method of tracking pump battery changes, you could use the insulin age (IAGE) plug-in to anticipate your pump battery changes as well.  For example, after tracking pump battery life on my 723 using energizer batteries lithium batteries for the last several months, I know that we get about 15 days plus a handful of hours.  The amount of hours more beyond 15 days varies depending on how much we've interacted with the pump buttons directly, whether we've looped the full 15 days solid, and if the pump has been in extreme weather (cold weather can sap pump battery life).  By tracking the pump battery changes with NS's careportal \"insulin cartridge change\", I can see in advance if we are nearing an overnight on a 15 day battery and decide to change batteries before overnight to prevent any middle-of-night battery issues.    Lithium batteries will get signifcantly longer life than an alkaline battery.  Experiment and track your particular pump model and battery type to understand what NS settings will work best for you.  Do not rely on the pump's on-screen pump battery indicator, especially when using lithium batteries.", 
            "title": "Nightscout Pump Battery Alarms"
        }, 
        {
            "location": "/operation/loop/open-loop/", 
            "text": "Open Loop\n\u2301\n\n\nOpen loop is a great place to start with Loop. When you are operating in open loop mode, Loop is offering recommedendations for temp basals and will display them on the main screen.  The recommendations will not be enacted unless you specifically choose to enact the temp basal.  Usually in open loop mode, you aren't really enacting the recommended basals but instead watching how the recommendations come in and figuring out WHY they are being recommended.\n\n\nIt is understandable to want to jump straight away into close loop mode, but a lot can be learned by watching Loop operate in open mode.  Becoming familiar with the algorithm can be easier by watching it in action rather than only reading about it in docs.\n\n\nTesting\n\u2301\n\n\nA great benefit of open loop mode is that you can establish a baseline of BG trends without the influence of temp basals from Loop.  This is particularly helpful if you haven't used Medtronic sites/pumps prior to Loop.  You may find that your basal rates change significantly coming from other brands of pumps.  Taking the time to establish a good Medtronic pump basal profile will set you up for a smoother transition to close loop mode.  Test your ISF during open loop time too, as ISF is an important component for every Loop calculation for temp basals.  Every 5 minutes, Loop uses your ISF...so it's worth testing it ahead of close loop mode.\n\n\nEventual BG\n\u2301\n\n\nOne of the best things you can do is to train yourself to watch the eventual BG rather than the current BG for helping understand Loop recommendations for temp basals.  So many of us have become accustomed to dealing with current BGs and perhaps IOB at the same time...but Loop is also looking at BG momentum, carbs on board, restrospective trends.  Loop is utilizing all of those variables to predict an eventual BG.  It's current decisions are based on that eventual BG.  Training yourself to watch that eventual BG will help you understand the temp basals being offered at any given time.\n\n\nCarb Absorption\n\u2301\n\n\nProbably the next most difficult transition involves using carb absorption as a component to every meal bolus.  Understand that the default carb absorption times in Loop may not work for your particular body.  Similar to how you perhaps had used extended boluses for meals that impacted BGs longer than the duration of your insulin...that same idea applies to estimating your carb absorption times.  Watch your meals and try to estimate how long they are impacting your BG for various types of food.  Watch the times when Loop would've wanted to suspend or high temp basal...ask yourself why it would be doing that.  Especially ask yourself if that is the same decision as you would've made at that time in a meal normally.  Would you be worried that you might go low later if you see Loop offering high temp basal early after a meal?  Would you be worried about going high later if Loop wants to suspend basals instead?  If you put some effort into this effort before closing the loop, it will pay off with a smoother transition to closed loop.\n\n\nTroubleshooting\n\u2301\n\n\nGet used to carrying the RileyLink around.  Find how far your connectivity stretches before you have pump communication problems.  Get used to troubleshooting yellow and red loops, finding out the pattern/cause of any potential loop issues.  You'll be less frustrated starting on closed loop if you aren't dealing with learning new electronics at the same time as you are learning carb absorption times in a closed loop.  Learn how to retune your RL. \n\n\nBolus\n\u2301\n\n\nBolus meals from the Loop, rather than the pump.  Become familiar with entering carbs into the Loop, as well as editing them.  Watch how long it takes for Loop app to display the bolus after you enact it (hint: there's a delay until the bolus finishes delivery and the pump gets read).  Familiarize yourself with the \"Bolus May Have Failed\" notifications and how to handle them.  Double check the pump and watch to see if the bolus indeed didn't enact before trying to give the bolus again.  \n\n\nCaregiver training\n\u2301\n\n\nIf you are the parent of a t1d kid using Loop, make sure you take the time to educate caregivers around your family and school for how to use Loop.  Perhaps you want to draft individualized quick info sheets for those caregivers to use with Loop.  If your child needs a site change at school, school staff or your child need to know how to delete reservoir history or change to open loop for the duration of DIA.  Try to watch Nightscout while you get to know Loop so that you can become better at remote troubleshooting of any problems that you might encounter.", 
            "title": "Open Loop"
        }, 
        {
            "location": "/operation/loop/open-loop/#open-loop", 
            "text": "Open loop is a great place to start with Loop. When you are operating in open loop mode, Loop is offering recommedendations for temp basals and will display them on the main screen.  The recommendations will not be enacted unless you specifically choose to enact the temp basal.  Usually in open loop mode, you aren't really enacting the recommended basals but instead watching how the recommendations come in and figuring out WHY they are being recommended.  It is understandable to want to jump straight away into close loop mode, but a lot can be learned by watching Loop operate in open mode.  Becoming familiar with the algorithm can be easier by watching it in action rather than only reading about it in docs.", 
            "title": "Open Loop"
        }, 
        {
            "location": "/operation/loop/open-loop/#testing", 
            "text": "A great benefit of open loop mode is that you can establish a baseline of BG trends without the influence of temp basals from Loop.  This is particularly helpful if you haven't used Medtronic sites/pumps prior to Loop.  You may find that your basal rates change significantly coming from other brands of pumps.  Taking the time to establish a good Medtronic pump basal profile will set you up for a smoother transition to close loop mode.  Test your ISF during open loop time too, as ISF is an important component for every Loop calculation for temp basals.  Every 5 minutes, Loop uses your ISF...so it's worth testing it ahead of close loop mode.", 
            "title": "Testing"
        }, 
        {
            "location": "/operation/loop/open-loop/#eventual-bg", 
            "text": "One of the best things you can do is to train yourself to watch the eventual BG rather than the current BG for helping understand Loop recommendations for temp basals.  So many of us have become accustomed to dealing with current BGs and perhaps IOB at the same time...but Loop is also looking at BG momentum, carbs on board, restrospective trends.  Loop is utilizing all of those variables to predict an eventual BG.  It's current decisions are based on that eventual BG.  Training yourself to watch that eventual BG will help you understand the temp basals being offered at any given time.", 
            "title": "Eventual BG"
        }, 
        {
            "location": "/operation/loop/open-loop/#carb-absorption", 
            "text": "Probably the next most difficult transition involves using carb absorption as a component to every meal bolus.  Understand that the default carb absorption times in Loop may not work for your particular body.  Similar to how you perhaps had used extended boluses for meals that impacted BGs longer than the duration of your insulin...that same idea applies to estimating your carb absorption times.  Watch your meals and try to estimate how long they are impacting your BG for various types of food.  Watch the times when Loop would've wanted to suspend or high temp basal...ask yourself why it would be doing that.  Especially ask yourself if that is the same decision as you would've made at that time in a meal normally.  Would you be worried that you might go low later if you see Loop offering high temp basal early after a meal?  Would you be worried about going high later if Loop wants to suspend basals instead?  If you put some effort into this effort before closing the loop, it will pay off with a smoother transition to closed loop.", 
            "title": "Carb Absorption"
        }, 
        {
            "location": "/operation/loop/open-loop/#troubleshooting", 
            "text": "Get used to carrying the RileyLink around.  Find how far your connectivity stretches before you have pump communication problems.  Get used to troubleshooting yellow and red loops, finding out the pattern/cause of any potential loop issues.  You'll be less frustrated starting on closed loop if you aren't dealing with learning new electronics at the same time as you are learning carb absorption times in a closed loop.  Learn how to retune your RL.", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/operation/loop/open-loop/#bolus", 
            "text": "Bolus meals from the Loop, rather than the pump.  Become familiar with entering carbs into the Loop, as well as editing them.  Watch how long it takes for Loop app to display the bolus after you enact it (hint: there's a delay until the bolus finishes delivery and the pump gets read).  Familiarize yourself with the \"Bolus May Have Failed\" notifications and how to handle them.  Double check the pump and watch to see if the bolus indeed didn't enact before trying to give the bolus again.", 
            "title": "Bolus"
        }, 
        {
            "location": "/operation/loop/open-loop/#caregiver-training", 
            "text": "If you are the parent of a t1d kid using Loop, make sure you take the time to educate caregivers around your family and school for how to use Loop.  Perhaps you want to draft individualized quick info sheets for those caregivers to use with Loop.  If your child needs a site change at school, school staff or your child need to know how to delete reservoir history or change to open loop for the duration of DIA.  Try to watch Nightscout while you get to know Loop so that you can become better at remote troubleshooting of any problems that you might encounter.", 
            "title": "Caregiver training"
        }, 
        {
            "location": "/operation/loop/close-loop/", 
            "text": "Close Loop\n\u2301\n\n\nWhen you feel like you have learned what you need from open loop, you should be ready to switch to close loop.  There are several ways you can help make that transition as smooth as possible.  \n\n\nTiming\n\u2301\n\n\nMany people choose to transition to close loop in a step-wise fashion.  Starting close loop on weekends is an easier starting point so that you can minimize distractions (let's face it...you'll probably be staring at the Loop a lot for those first few days). Typically, people have an easier time transitioning to close loop for parts of their day that don't involve food...so nighttimes tend to be easier than daytimes to start.\n\n\nMaximum Basal Rate\n\u2301\n\n\nWhen you are first beginning to close loop, it is important to be conservative (low) in setting your maximum basal rate.  If your settings are incorrect in other areas (basal rates, carb absorption time, carb ratio, etc), Loop may enact incorrectly aggressive high temp basals.  Gradually increase your maximum basal rate as your comfort and confidence in Loop increase.  Typically, experienced closed loop users set their max basal rate no more than 3-4 times their average basal rate.  \n\n\nBG targets\n\u2301\n\n\nIf your basals, ISF, or carb ratios aren't set correctly, Loop may overshoot and leave you lower than expected (or with more IOB than you are comfortable with).  Setting your low BG target slightly higher can help prevent unexpected lows or high IOB as you adjust your settings.\n\n\nWatch the IOB\n\u2301\n\n\nWatch whether Loop accumulates positive or negative IOB while holding your BG steady when no food is present.  If you find that you are \"carrying\" positive or negative IOB consistently, you should review your settings to see if perhaps your basal or ISF needs adjusting.\n\n\nMeals\n\u2301\n\n\nMeals will likely be the hardest part of transitioning to close loop.  Starting with foods that you have a high comfort level with is a great idea.  If you have favorite meals that you know well (how high BGs usually go, how much to bolus, how to prebolus, etc), these would be a good starting point.  Watching when the Loop high temps or suspends basals (early vs late in meal) will really help you adjust to find your typical carb absorption times.  As a general idea, \nassuming other settings are accurate\n:\n\n\n\n\nearly high temps in a meal that leave you low after, you may need to shorten carb absorption time\n\n\nearly suspensions in a meal that leave you high after, you may need to lengthen carb absorption time\n\n\n\n\nThis is definitely an area where YDMV (your diabetes may vary), so don't expect or accept that what works for others will work for you.  Test, observe, and adjust as needed.", 
            "title": "Closed Loop"
        }, 
        {
            "location": "/operation/loop/close-loop/#close-loop", 
            "text": "When you feel like you have learned what you need from open loop, you should be ready to switch to close loop.  There are several ways you can help make that transition as smooth as possible.", 
            "title": "Close Loop"
        }, 
        {
            "location": "/operation/loop/close-loop/#timing", 
            "text": "Many people choose to transition to close loop in a step-wise fashion.  Starting close loop on weekends is an easier starting point so that you can minimize distractions (let's face it...you'll probably be staring at the Loop a lot for those first few days). Typically, people have an easier time transitioning to close loop for parts of their day that don't involve food...so nighttimes tend to be easier than daytimes to start.", 
            "title": "Timing"
        }, 
        {
            "location": "/operation/loop/close-loop/#maximum-basal-rate", 
            "text": "When you are first beginning to close loop, it is important to be conservative (low) in setting your maximum basal rate.  If your settings are incorrect in other areas (basal rates, carb absorption time, carb ratio, etc), Loop may enact incorrectly aggressive high temp basals.  Gradually increase your maximum basal rate as your comfort and confidence in Loop increase.  Typically, experienced closed loop users set their max basal rate no more than 3-4 times their average basal rate.", 
            "title": "Maximum Basal Rate"
        }, 
        {
            "location": "/operation/loop/close-loop/#bg-targets", 
            "text": "If your basals, ISF, or carb ratios aren't set correctly, Loop may overshoot and leave you lower than expected (or with more IOB than you are comfortable with).  Setting your low BG target slightly higher can help prevent unexpected lows or high IOB as you adjust your settings.", 
            "title": "BG targets"
        }, 
        {
            "location": "/operation/loop/close-loop/#watch-the-iob", 
            "text": "Watch whether Loop accumulates positive or negative IOB while holding your BG steady when no food is present.  If you find that you are \"carrying\" positive or negative IOB consistently, you should review your settings to see if perhaps your basal or ISF needs adjusting.", 
            "title": "Watch the IOB"
        }, 
        {
            "location": "/operation/loop/close-loop/#meals", 
            "text": "Meals will likely be the hardest part of transitioning to close loop.  Starting with foods that you have a high comfort level with is a great idea.  If you have favorite meals that you know well (how high BGs usually go, how much to bolus, how to prebolus, etc), these would be a good starting point.  Watching when the Loop high temps or suspends basals (early vs late in meal) will really help you adjust to find your typical carb absorption times.  As a general idea,  assuming other settings are accurate :   early high temps in a meal that leave you low after, you may need to shorten carb absorption time  early suspensions in a meal that leave you high after, you may need to lengthen carb absorption time   This is definitely an area where YDMV (your diabetes may vary), so don't expect or accept that what works for others will work for you.  Test, observe, and adjust as needed.", 
            "title": "Meals"
        }, 
        {
            "location": "/operation/algorithm/overview/", 
            "text": "Overview\n\u2301\n\n\nLoop\u2019s algorithm for adjusting insulin delivery is oriented around making a glucose prediction.  Every five minutes, triggered by new BG data, it generates a new prediction.  Both \nbolus recommendations\n and \ntemporary basal rates\n are set based on this prediction.\n\n\nTerminology\n\u2301\n\n\nThis graph and legend illustrates terms commonly used in discussing Loop's algorithm,\nand shows them in the context of historical and forecasted BG in a style similar to the\nstatus screen of Loop.\n\n\n\n\n\n\nInsulin Action Duration\nA configuration value that provides an estimate of how long insulin stays active after delivery.\n\n\nCorrection Range\n\n\nThis is the low and high BG values that Loop will attempt to keep you between.\n\n\nPredicted Glucose\n\n\nLoop makes a prediction of glucose values out for a length of time equal to your Insulin Action Duration.\n\n\nEventual BG\n\n\nThe last value of the prediction.\n\n\nMinimum BG\n\n\nThe lowest glucose value at any point in time within the prediction.\n\n\nSuspend Threshold\n\n\nA configuration value below which Loop will suspend all insulin delivery.\n\n\nCGM Data\n\n\nActual glucose measurements made by a continuous glucose monitor.\n\n\nInsulin Sensitivity\n\n\nA configuration value that provides an estimate of how much blood glucose will drop given a unit of insulin.", 
            "title": "Overview"
        }, 
        {
            "location": "/operation/algorithm/overview/#overview", 
            "text": "Loop\u2019s algorithm for adjusting insulin delivery is oriented around making a glucose prediction.  Every five minutes, triggered by new BG data, it generates a new prediction.  Both  bolus recommendations  and  temporary basal rates  are set based on this prediction.", 
            "title": "Overview"
        }, 
        {
            "location": "/operation/algorithm/overview/#terminology", 
            "text": "This graph and legend illustrates terms commonly used in discussing Loop's algorithm,\nand shows them in the context of historical and forecasted BG in a style similar to the\nstatus screen of Loop.    Insulin Action Duration A configuration value that provides an estimate of how long insulin stays active after delivery.  Correction Range  This is the low and high BG values that Loop will attempt to keep you between.  Predicted Glucose  Loop makes a prediction of glucose values out for a length of time equal to your Insulin Action Duration.  Eventual BG  The last value of the prediction.  Minimum BG  The lowest glucose value at any point in time within the prediction.  Suspend Threshold  A configuration value below which Loop will suspend all insulin delivery.  CGM Data  Actual glucose measurements made by a continuous glucose monitor.  Insulin Sensitivity  A configuration value that provides an estimate of how much blood glucose will drop given a unit of insulin.", 
            "title": "Terminology"
        }, 
        {
            "location": "/operation/algorithm/bolus/", 
            "text": "Bolus Recommendations\n\u2301\n\n\nLoop also uses the forecast to generate recommendations for bolus amounts. Carbs are not directly used in bolus calculations, but rather indirectly through the forecast. After carbs are entered, the forecast is updated using the carb amounts, and then a recommendation is generated using the forecast.\n\n\nThe forecast used for bolusing is slightly different than the forecast used for adjust temp basals in that positive BG momentum is not included.\n\n\nEventual BG Above Correction Range\n\u2301\n\n\n\n\nA bolus recommendation is given if Eventual BG is above Correction Range.  The delta between Eventual BG and the top of the Correction Range is used, along with your current Insulin Sensitivity to calculate the recommendation.", 
            "title": "Bolus Recommendations"
        }, 
        {
            "location": "/operation/algorithm/bolus/#bolus-recommendations", 
            "text": "Loop also uses the forecast to generate recommendations for bolus amounts. Carbs are not directly used in bolus calculations, but rather indirectly through the forecast. After carbs are entered, the forecast is updated using the carb amounts, and then a recommendation is generated using the forecast.  The forecast used for bolusing is slightly different than the forecast used for adjust temp basals in that positive BG momentum is not included.", 
            "title": "Bolus Recommendations"
        }, 
        {
            "location": "/operation/algorithm/bolus/#eventual-bg-above-correction-range", 
            "text": "A bolus recommendation is given if Eventual BG is above Correction Range.  The delta between Eventual BG and the top of the Correction Range is used, along with your current Insulin Sensitivity to calculate the recommendation.", 
            "title": "Eventual BG Above Correction Range"
        }, 
        {
            "location": "/operation/algorithm/prediction/", 
            "text": "Glucose Prediction\n\u2301\n\n\nLoop makes a new glucose prediction every five minutes by computing the effects\nof insulin that has been administered from the pump, and carbohydrate records that\nhave been entered into Loop. Two additional terms, glucose momentum, and optionally\nretrospective correction will also be used.\n\n\nYou can see the individual contributions of these effects by tapping on the\npredicted glucose graph on Loop's status screen.\n\n\nThis section needs to be fleshed out with details of how insulin and carb\neffects are calculated, and how momentum and retrospective correction work. For\nnow, refer to:\n\n\n\n\nCarbStore.getGlucoseEffects()\n\n\nDoseStore.getGlucoseEffects()\n\n\nGlucoseStore.getRecentMomentumEffect()\n\n\nLoopDataManager.updateRetrospectiveGlucoseEffect()", 
            "title": "Glucose Prediction"
        }, 
        {
            "location": "/operation/algorithm/prediction/#glucose-prediction", 
            "text": "Loop makes a new glucose prediction every five minutes by computing the effects\nof insulin that has been administered from the pump, and carbohydrate records that\nhave been entered into Loop. Two additional terms, glucose momentum, and optionally\nretrospective correction will also be used.  You can see the individual contributions of these effects by tapping on the\npredicted glucose graph on Loop's status screen.  This section needs to be fleshed out with details of how insulin and carb\neffects are calculated, and how momentum and retrospective correction work. For\nnow, refer to:   CarbStore.getGlucoseEffects()  DoseStore.getGlucoseEffects()  GlucoseStore.getRecentMomentumEffect()  LoopDataManager.updateRetrospectiveGlucoseEffect()", 
            "title": "Glucose Prediction"
        }, 
        {
            "location": "/operation/algorithm/temp_basal/", 
            "text": "Temp Basal Adjustments\n\u2301\n\n\nIf blood glucose is predicted to stray outside of the desired target range, Loop will adjust the basal rate temporarily in an attempt to keep actual blood glucose in range.  To illustrate how it does this, we\u2019ll go through a few examples.\n\n\nEventual BG Above Correction Range\n\u2301\n\n\n\n\nWhen eventual BG is predicted to go above the current correction range, Loop will calculate a delta from eventual bg to the midpoint of the correction range.  Using the currently scheduled insulin sensitivity factor, loop calculates a temporary basal rate above your currently scheduled basal rate that would deliver, over 30 minutes, enough insulin to bring glucose levels back into range, capped at the max basal rate.\n\n\nEventual BG Below Correction Range\n\u2301\n\n\n\n\nWhen eventual BG is predicted to go below the current correction range, Loop will calculate a delta from eventual bg to the midpoint of the correction range.  Using the currently scheduled insulin sensitivity factor, loop calculates a temporary basal rate below your currently scheduled basal rate that would reduce insulin delivery, over 30 minutes, enough to bring glucose levels back into range.  It will reduce delivery to zero if needed.\n\n\nTemporary Excursion Below Range\n\u2301\n\n\n\n\nIf the prediction has a temporary excursion below range, but Eventual BG is in range, Loop will revert to using your normal basal schedule, as long as Minimum BG is above the suspend threshold.\n\n\nMinimum BG Below Suspend Threshold\n\u2301\n\n\n\n\nIf Minimum BG drops below Suspend Threshold, Loop will zero temp your pump regardless of where Eventual BG is.", 
            "title": "Temp Basal Adjustments"
        }, 
        {
            "location": "/operation/algorithm/temp_basal/#temp-basal-adjustments", 
            "text": "If blood glucose is predicted to stray outside of the desired target range, Loop will adjust the basal rate temporarily in an attempt to keep actual blood glucose in range.  To illustrate how it does this, we\u2019ll go through a few examples.", 
            "title": "Temp Basal Adjustments"
        }, 
        {
            "location": "/operation/algorithm/temp_basal/#eventual-bg-above-correction-range", 
            "text": "When eventual BG is predicted to go above the current correction range, Loop will calculate a delta from eventual bg to the midpoint of the correction range.  Using the currently scheduled insulin sensitivity factor, loop calculates a temporary basal rate above your currently scheduled basal rate that would deliver, over 30 minutes, enough insulin to bring glucose levels back into range, capped at the max basal rate.", 
            "title": "Eventual BG Above Correction Range"
        }, 
        {
            "location": "/operation/algorithm/temp_basal/#eventual-bg-below-correction-range", 
            "text": "When eventual BG is predicted to go below the current correction range, Loop will calculate a delta from eventual bg to the midpoint of the correction range.  Using the currently scheduled insulin sensitivity factor, loop calculates a temporary basal rate below your currently scheduled basal rate that would reduce insulin delivery, over 30 minutes, enough to bring glucose levels back into range.  It will reduce delivery to zero if needed.", 
            "title": "Eventual BG Below Correction Range"
        }, 
        {
            "location": "/operation/algorithm/temp_basal/#temporary-excursion-below-range", 
            "text": "If the prediction has a temporary excursion below range, but Eventual BG is in range, Loop will revert to using your normal basal schedule, as long as Minimum BG is above the suspend threshold.", 
            "title": "Temporary Excursion Below Range"
        }, 
        {
            "location": "/operation/algorithm/temp_basal/#minimum-bg-below-suspend-threshold", 
            "text": "If Minimum BG drops below Suspend Threshold, Loop will zero temp your pump regardless of where Eventual BG is.", 
            "title": "Minimum BG Below Suspend Threshold"
        }, 
        {
            "location": "/troubleshooting/overview/", 
            "text": "Troubleshooting\n\u2301\n\n\nAfter you have been using Loop for awhile, there's a potential that you will run across a behavior or issue that you wonder if it is normal or intended.  When that happens, there's a few things that we'd recommend doing to resolve the issue.\n\n\nGather information\n\u2301\n\n\nCheck the Docs\n\u2301\n\n\nThe Loop docs are updated regularly.  If you built your Loop app awhile ago, chances are good that more information has been upated and changed since you first read them.  Please can the topics and look for a section that may be applicable.  For example, if your Nightscout isn't working, try looking at the docs there.  A good read of ALL the pages at the beginning of using Loop is encouraged.  Many FAQs from new Loop users are covered in the docs.\n\n\nScreenshots\n\u2301\n\n\nTake a screenshot of your Loop main display screen\n, or other screens (such as Tuning results of RileyLink) that may help troubleshooters better understand your issue.  A lot of times a picture is worth a thousand words.  Being able to see recent Loop basal adjustments, predicted BG curve, and carb entries really helps fill in the full story of the current Loop status.  If you didn't manage to get a screenshot when the issue was happening, you can also go to Nightscout and scroll back over the previous 48 hours to obtain much of the same information.  Try to capture a Nightscout screen from the time period in question.\n\n\nIssue Report\n\u2301\n\n\nUnder the Loop app settings, there is a selection called \nIssue Report\n.  Within the Issue Report is important information about your Loop's actions and status that can be very useful for troubleshooters...particularly with unexplained behaviors.  The upper right corner of the Issue Report includes a button so that you can email the Issue Report to yourself (or others).  If you're seeing something unusual in your Loop, capture an Issue Report while it is happening and save it.  A troubleshooter may want to see that information.\n\n\nCheck Resources\n\u2301\n\n\nGitHub Issues\n\u2301\n\n\nCheck the current list of \nGitHub Loop Issues\n for known issues.  Many times other users have noticed the same issue previously and opened an Issue so that more information can be added to help develop a solution.  If you see your same issue has already been reported, please add to the open issue instead of creating a new one.\n\n\n\n\n\n\n\n\n\nGitter and Facebook\n\u2301\n\n\nSearch in \nGitter\n or \nFacebook\n.  Quite possibly someone else has already posted about the same issue and perhaps a resolution has already been provided.  \n\n\nAsk for Help\n\u2301\n\n\nIf you can't find any information in the Loop docs, GitHub Issues, Gitter, or Faceboook...PLEASE post and ask for help.  GitHub Issues list is an EXCELLENT place to post issues of unexpected Loop behavior (that you believe are errant or need improvement).  However, if you are just seeking clarifications on Loop, but don't necessarily expect that there's a problem with the underlying code, then Facebook and Gitter would be a good place.  For example, Gitter and Facebook are great for asking about bolus strategies or exercise target use...those are not really code issues.\n\n\nWhen you post, provide a description along with any screenshots of the issue you are having.  You don't necessarily have to tag any particular person, the community is fairly active in replying to messages.\n\n\nIf you are posting to GitHub issues list, you can label the Issue appropriately too...such as Bug, Enhancement, or Documentation.", 
            "title": "Overview"
        }, 
        {
            "location": "/troubleshooting/overview/#troubleshooting", 
            "text": "After you have been using Loop for awhile, there's a potential that you will run across a behavior or issue that you wonder if it is normal or intended.  When that happens, there's a few things that we'd recommend doing to resolve the issue.", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/troubleshooting/overview/#gather-information", 
            "text": "", 
            "title": "Gather information"
        }, 
        {
            "location": "/troubleshooting/overview/#check-the-docs", 
            "text": "The Loop docs are updated regularly.  If you built your Loop app awhile ago, chances are good that more information has been upated and changed since you first read them.  Please can the topics and look for a section that may be applicable.  For example, if your Nightscout isn't working, try looking at the docs there.  A good read of ALL the pages at the beginning of using Loop is encouraged.  Many FAQs from new Loop users are covered in the docs.", 
            "title": "Check the Docs"
        }, 
        {
            "location": "/troubleshooting/overview/#screenshots", 
            "text": "Take a screenshot of your Loop main display screen , or other screens (such as Tuning results of RileyLink) that may help troubleshooters better understand your issue.  A lot of times a picture is worth a thousand words.  Being able to see recent Loop basal adjustments, predicted BG curve, and carb entries really helps fill in the full story of the current Loop status.  If you didn't manage to get a screenshot when the issue was happening, you can also go to Nightscout and scroll back over the previous 48 hours to obtain much of the same information.  Try to capture a Nightscout screen from the time period in question.", 
            "title": "Screenshots"
        }, 
        {
            "location": "/troubleshooting/overview/#issue-report", 
            "text": "Under the Loop app settings, there is a selection called  Issue Report .  Within the Issue Report is important information about your Loop's actions and status that can be very useful for troubleshooters...particularly with unexplained behaviors.  The upper right corner of the Issue Report includes a button so that you can email the Issue Report to yourself (or others).  If you're seeing something unusual in your Loop, capture an Issue Report while it is happening and save it.  A troubleshooter may want to see that information.", 
            "title": "Issue Report"
        }, 
        {
            "location": "/troubleshooting/overview/#check-resources", 
            "text": "", 
            "title": "Check Resources"
        }, 
        {
            "location": "/troubleshooting/overview/#github-issues", 
            "text": "Check the current list of  GitHub Loop Issues  for known issues.  Many times other users have noticed the same issue previously and opened an Issue so that more information can be added to help develop a solution.  If you see your same issue has already been reported, please add to the open issue instead of creating a new one.", 
            "title": "GitHub Issues"
        }, 
        {
            "location": "/troubleshooting/overview/#gitter-and-facebook", 
            "text": "Search in  Gitter  or  Facebook .  Quite possibly someone else has already posted about the same issue and perhaps a resolution has already been provided.", 
            "title": "Gitter and Facebook"
        }, 
        {
            "location": "/troubleshooting/overview/#ask-for-help", 
            "text": "If you can't find any information in the Loop docs, GitHub Issues, Gitter, or Faceboook...PLEASE post and ask for help.  GitHub Issues list is an EXCELLENT place to post issues of unexpected Loop behavior (that you believe are errant or need improvement).  However, if you are just seeking clarifications on Loop, but don't necessarily expect that there's a problem with the underlying code, then Facebook and Gitter would be a good place.  For example, Gitter and Facebook are great for asking about bolus strategies or exercise target use...those are not really code issues.  When you post, provide a description along with any screenshots of the issue you are having.  You don't necessarily have to tag any particular person, the community is fairly active in replying to messages.  If you are posting to GitHub issues list, you can label the Issue appropriately too...such as Bug, Enhancement, or Documentation.", 
            "title": "Ask for Help"
        }, 
        {
            "location": "/troubleshooting/green-loop/", 
            "text": "Turning Your Grey Loop to Green\n\u2301\n\n\nWhen you are initially starting the Loop app, the Loop will be colored grey.  Wait about 15-20 minutes for the Loop to turn from grey to green.  There's a bit of time for Loop to pull all of those first pieces of data together, especially reading your pump history for the first time.  If the Loop remains grey after 15-20 min, there are several possible causes for this.  If you find yourself with a grey loop that just won't turn green, check these most frequently missed items on new setups:\n\n\nPump\n\u2301\n\n\n\n\nMax basal rate in Loop app is no greater than max basal rate in pump settings\n\n\nTemp basal type is set to unit/hour\n\n\nRemote devices is set to on and an ID is entered\n\n\n\n\nCGM\n\u2301\n\n\n\n\nShare app installed on the looping iPhone and open\n\n\nCGM getting current values without interruption\n\n\nLoop app has a CGM value displayed in the top bar of the main display\n\n\n\n\nRileyLink\n\u2301\n\n\n\n\nRL is charged (it does not ship completely charged)\n\n\nRL battery needs to be securely plugged in, \ncheck those connections\n\n\nUse the RL's \nTune Radio Frequency\n option to make sure the pump-RileyLink are talking\n\n\nUse the RL's \nChange Time\n option to make sure the pump time matches the Loop time\n\n\nUse the RL's \nMysentry Pair\n option if you are using a x23 or x54 pump model\n\n\n\n\nLoop Settings\n\u2301\n\n\n\n\nCorrect Region selected for your pump\n\n\nPump's serial number entered correctly\n\n\nCorrect CGM system has been selected in Loop settings\n\n\nInsulin curve has been selected\n\n\nSuspend Threshold has been entered\n\n\n\n\n\n\nThe most common delay in getting a grey loop to turn green is probably the lack of CGM data.  If you have waited 15-20 minutes and no CGM data has appeared, try closing both the Loop and Dexcom apps (double-tap home button and up-swipe to close apps).  Toggle your BT on iPhone off/on.  Reopen the Loop app, then reopen Dexcom app.\n\n\n\n\nIf all else fails after verifying the settings listed in the sections above, you can:\n\n\n\n\nClose and restart the Loop and Dexcom apps\n\n\nToggle BT off/on\n\n\nTurn RileyLink off/on\n\n\nReplace pump battery", 
            "title": "Grey Loop"
        }, 
        {
            "location": "/troubleshooting/green-loop/#turning-your-grey-loop-to-green", 
            "text": "When you are initially starting the Loop app, the Loop will be colored grey.  Wait about 15-20 minutes for the Loop to turn from grey to green.  There's a bit of time for Loop to pull all of those first pieces of data together, especially reading your pump history for the first time.  If the Loop remains grey after 15-20 min, there are several possible causes for this.  If you find yourself with a grey loop that just won't turn green, check these most frequently missed items on new setups:", 
            "title": "Turning Your Grey Loop to Green"
        }, 
        {
            "location": "/troubleshooting/green-loop/#pump", 
            "text": "Max basal rate in Loop app is no greater than max basal rate in pump settings  Temp basal type is set to unit/hour  Remote devices is set to on and an ID is entered", 
            "title": "Pump"
        }, 
        {
            "location": "/troubleshooting/green-loop/#cgm", 
            "text": "Share app installed on the looping iPhone and open  CGM getting current values without interruption  Loop app has a CGM value displayed in the top bar of the main display", 
            "title": "CGM"
        }, 
        {
            "location": "/troubleshooting/green-loop/#rileylink", 
            "text": "RL is charged (it does not ship completely charged)  RL battery needs to be securely plugged in,  check those connections  Use the RL's  Tune Radio Frequency  option to make sure the pump-RileyLink are talking  Use the RL's  Change Time  option to make sure the pump time matches the Loop time  Use the RL's  Mysentry Pair  option if you are using a x23 or x54 pump model", 
            "title": "RileyLink"
        }, 
        {
            "location": "/troubleshooting/green-loop/#loop-settings", 
            "text": "Correct Region selected for your pump  Pump's serial number entered correctly  Correct CGM system has been selected in Loop settings  Insulin curve has been selected  Suspend Threshold has been entered    The most common delay in getting a grey loop to turn green is probably the lack of CGM data.  If you have waited 15-20 minutes and no CGM data has appeared, try closing both the Loop and Dexcom apps (double-tap home button and up-swipe to close apps).  Toggle your BT on iPhone off/on.  Reopen the Loop app, then reopen Dexcom app.   If all else fails after verifying the settings listed in the sections above, you can:   Close and restart the Loop and Dexcom apps  Toggle BT off/on  Turn RileyLink off/on  Replace pump battery", 
            "title": "Loop Settings"
        }, 
        {
            "location": "/troubleshooting/yellow-red-loop/", 
            "text": "Yellow and Red Loops\n\u2301\n\n\nA properly operating Loop will remain green for 5 minutes.  To stay green, there are several things that Loop must do:\n\n\n\n\nLoop obtains a BG value from your CGM source, and\n\n\nLoop reads your pump history to know about insulin deliveries and recent events, and\n\n\nLoop completes a run of its calculations based on those inputs\n\n\nLoop recommends a temp basal and sends that instruction to the pump\n\n\nPump enacts the recommended temp basal\n\n\nLoop confirms the pump enacted the recommended temp basal\n\n\n\n\nIf something goes wrong in those steps and more than 5 minutes goes by, the Loop will turn yellow until it can solve the problem.  If more than 15 minutes goes by and the problem still exists, Loop will turn red.\n\n\n\n\nTo see the latest Loop error messages, touch the yellow or red Loop Status circle on the main screen. If an error message is available, it will appear in a dialog window. Use that error message to help guide your next troubleshooting steps, as laid out in the discussion below.\n\n\n\n\nA healthy green loop will have timestamps less than 5 minutes old below the green loop, BG reading, and reservoir level.  This indicates that the Loop was run less than 5 minutes ago, fresh BGs have been coming in, temp basals have been enacted by the pump, and the pump is communicating with Loop.  The screenshot below is a very happy Loop.\n\n\n\n\n\n\n\n\n\n\n\nFor Loopers who have already been successfully getting green loops, but suddenly find themselves with problems...we need to figure out which area your loop is failing in.\n\n\n\n\nThe displayed error message should help you narrow in on the cause of the red loop:\n\n    \nIs this a CGM issue?\n\n    \nIs this a pump issue?\n\n    \nIs this a RileyLink/BT issue?\n\n\n\n\nCGM issues\n\u2301\n\n\nOld BG data (CGM issue)\n\u2301\n\n\n\n\nIf your Loop turns yellow or red, easiest to start by checking the timestamps on the BG.  \nIf the BG reading is more than 5 minutes older than your iPhone time, your Loop will not be green.\n  The screenshot below is a good example of missing BG data preventing the Loop from staying green.  The pump is still communicating (reservoir reading is only 2 minutes old)...BGs appear to be the problem.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBG troubleshooting steps:\n\n\n\n\nVerify you have enabled the correct \nCGM Selection\n in Loop settings; it is easy to accidentally change the selection while scrolling through the settings page\n\n\nFor G5, verify your \ntransmitter ID\n is set correctly in Loop settings\n\n\nFor G4, verify the Dexcom Share app is running on your phone\n\n\nFetch Recent Glucose\n command in RL only works for Medtronic CGM users, by the way...so don't expect that command to solve Dexcom CGM issues\n\n\nIf your local CGM is working fine on the Dexcom app, but Loop isn't reading it:\n\n\nmake sure you enter your Dexcom Share account info in the Loop settings. Loop will automatically switch to pulling from the Dexcom servers if the local reading isn't working.\n\n\ntry turning Loop and Dexcom apps off, toggle BT off/on, restart Loop app, and then restart Dexcom app\n\n\n\n\n\n\n\n\n\n\nPump Issues\n\u2301\n\n\nOld Pump data (Pump Issue)\n\u2301\n\n\n\n\nIf your pump reading is older than 5 minutes, but BGs are fine, then you will need to troubleshoot the pump communications.  The screenshot below is a good example of missing pump data preventing the Loop from staying green.  The CGM is still communicating (BG reading is only 2 minutes old)...but pump reservoir reading is older than 5 min.\n\n\n\n\n\n\n\n\n\n\n\nPump troubleshooting steps:\n\n\n\n\nYour pump battery may be low.  Replace the battery...even if the percentage doesn't look low, this is a good starting point\n\n\nIf you have an x23 or x54 model pump, make sure your mysentry is paired\n\n\nHave the pump and RL gotten too far away from each other?  Try bringing them closer\n\n\nTry retuning the RL.  Just a note though, the Loop has code embedded to automatically retunes RL when the pump comms are failing for 20 minutes.  So, manual retuning is more about speeding things along rather than being a necessary intervention to fixing pump comms.\n\n\nTry a \nSend Button Press\n to \"wake up the pump\" a bit.\n\n\nTry a \nFetch Pump History\n.  Same as retuning though, the Loop has code embedded to automatically pull pump history.  Manual fetching of pump history is more about speeding things along than being a necessary step to fixing pump comms.\n\n\nIf you have a backup pump, try switching to that pump and see whether the issue persists.\n\n\n\n\n\n\nAbout Pump Communications\n\n\nPump communications errors can and will happen. Just be patient, and they almost always correct themselves.  Yellow loops happen sometimes, and aren't usually worth troubleshooting.  Red loops are more infrequent and usually a good time to start investigating possible source.  \nSome environments will be noisy for rf comms (such as concerts, amusement parks, tech venues, conferences with OpenAPS users in attendance, etc.), and your loop may not stay green as often as usual.  Just be patient. When you leave that environment, looping will go back to normal.\n  Wireless microphones, baby monitors, and other similar types of devices can interfer with pump communications if there are lots of competing radio devices in a tight environment.  If you find you have areas of your house that consistently have poor pump communications, look for potential sources of interference from wireless devices.\n\n\nAnother common area for failed pump communications are at night if you tend to sleep on your pump, or otherwise \"body block\" the RL's ability to communicate with the pump.  Try to place your pump and RL such that your body will not block the signal to/from RL.  Standing the RL on it's base with antenna pointing up, on a nearby nightstand should be sufficient proximity/orientation for overnight looping.\n\n\nThese examples below are pump error messages.  Notice they all mention the pump specifically.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIncorrect Pump Time (Pump Issue)\n\u2301\n\n\n\n\nAnd here's an interesting problem.  BGs are current, but notice that the pump time is 2 hours into the future of the current iPhone time.  In this case, the Loop user had manually set their pump time during travels and caused the pump time to be out of sync with Loop.  Remember, \ndo not change your pump time manually...always use the RL to set the pump time\n.  This red loop was resolved as soon as the Looper used RL to set the pump time.\n\n\n\n\n\n\n\n\n\n\n\n\n\nFailure to Enact Temp Basals (Pump Issue)\n\u2301\n\n\n\n\nIf you see messages about \"Could not verify TempBasal on attempt  2\", that is likely one of just a few issues.  The message indicates that Loop has BGs and pump data, has sent a recommended basal to the pump, but the pump does not appear to be enacting those basals.\n\n\n\n\n\n\n\n\n\n\n\n\n\nYour pump cannot be suspended.  Resume insulin deliveries\n\n\nMax basal rate in Loop app cannot be greater than max basal rate in pump settings\n\n\nTemp basal type must be set to unit/hour, not percent, in pump\n\n\n\n\n\n\nBluetooth/RL issues\n\u2301\n\n\nBluetooth failures (RL or iPhone issue)\n\u2301\n\n\n\n\nSometimes the RilleyLink and iPhone fail to communicate via BT.  You need to determine if this is due to RL's problems, iPhone's problems, or just BT communications problem.  There can be messages when BT fails, such as the message below, or \"RileyLink Timeout\" error messages.\n\n\n\n\n\n\n\n\n\n\n\n\n\nHas your RL been fully charged? Try charging your RL for an hour or two, make sure the red light comes on while charging\n\n\nIs your lipo battery old and perhaps dying earlier in the day?  Order a new battery, replace lipo battery\n\n\nCheck your lipo battery wires?  If your wires are dislodged from the lipo itself, RL will not likely work for long\n\n\nYour RL battery needs to be securely plugged in, check those connections.\n\n\nCheck if your RL is on and says \"connected\" in the \nstatus screen for bluetooth\n. If it says \"connecting\" or \"disconnected\", you have a BT problem with RL and iPhone.\n\n\nMake sure your iPhone's BT is turned on, and BT is not being affected by other BT systems (such as car audio)\n\n\nCheck if any of the RL command buttons work...such as \nSend Button Press\n.\n\n\nIf you've checked all of the above, toggle your RL power switch and turn your iPhone BT off/on.  Try rebooting your phone.  If those steps don't work and the RL is properly charging otherwise, likely you have a bad RileyLink and will need to replace it.\n\n\n\n\n\n\nLoop Settings Issues\n\u2301\n\n\nFailure to set Insulin Curve Model (Loop settings)\n\u2301\n\n\n\n\nIf you see messages about \"Missing data: Glucose effects\", you likely have \nforgotten to set your Insulin Curve Model\n.  The message indicates that Loop is missing a component of its algorithm inputs to calculate glucose effects on predicted BGs.   Return to your Loop app settings and pick an Insulin Curve.", 
            "title": "Yellow/Red Loop"
        }, 
        {
            "location": "/troubleshooting/yellow-red-loop/#yellow-and-red-loops", 
            "text": "A properly operating Loop will remain green for 5 minutes.  To stay green, there are several things that Loop must do:   Loop obtains a BG value from your CGM source, and  Loop reads your pump history to know about insulin deliveries and recent events, and  Loop completes a run of its calculations based on those inputs  Loop recommends a temp basal and sends that instruction to the pump  Pump enacts the recommended temp basal  Loop confirms the pump enacted the recommended temp basal   If something goes wrong in those steps and more than 5 minutes goes by, the Loop will turn yellow until it can solve the problem.  If more than 15 minutes goes by and the problem still exists, Loop will turn red.   To see the latest Loop error messages, touch the yellow or red Loop Status circle on the main screen. If an error message is available, it will appear in a dialog window. Use that error message to help guide your next troubleshooting steps, as laid out in the discussion below.   A healthy green loop will have timestamps less than 5 minutes old below the green loop, BG reading, and reservoir level.  This indicates that the Loop was run less than 5 minutes ago, fresh BGs have been coming in, temp basals have been enacted by the pump, and the pump is communicating with Loop.  The screenshot below is a very happy Loop.      For Loopers who have already been successfully getting green loops, but suddenly find themselves with problems...we need to figure out which area your loop is failing in.   The displayed error message should help you narrow in on the cause of the red loop: \n     Is this a CGM issue? \n     Is this a pump issue? \n     Is this a RileyLink/BT issue?", 
            "title": "Yellow and Red Loops"
        }, 
        {
            "location": "/troubleshooting/yellow-red-loop/#cgm-issues", 
            "text": "", 
            "title": "CGM issues"
        }, 
        {
            "location": "/troubleshooting/yellow-red-loop/#old-bg-data-cgm-issue", 
            "text": "If your Loop turns yellow or red, easiest to start by checking the timestamps on the BG.   If the BG reading is more than 5 minutes older than your iPhone time, your Loop will not be green.   The screenshot below is a good example of missing BG data preventing the Loop from staying green.  The pump is still communicating (reservoir reading is only 2 minutes old)...BGs appear to be the problem.         BG troubleshooting steps:   Verify you have enabled the correct  CGM Selection  in Loop settings; it is easy to accidentally change the selection while scrolling through the settings page  For G5, verify your  transmitter ID  is set correctly in Loop settings  For G4, verify the Dexcom Share app is running on your phone  Fetch Recent Glucose  command in RL only works for Medtronic CGM users, by the way...so don't expect that command to solve Dexcom CGM issues  If your local CGM is working fine on the Dexcom app, but Loop isn't reading it:  make sure you enter your Dexcom Share account info in the Loop settings. Loop will automatically switch to pulling from the Dexcom servers if the local reading isn't working.  try turning Loop and Dexcom apps off, toggle BT off/on, restart Loop app, and then restart Dexcom app", 
            "title": "Old BG data (CGM issue)"
        }, 
        {
            "location": "/troubleshooting/yellow-red-loop/#pump-issues", 
            "text": "", 
            "title": "Pump Issues"
        }, 
        {
            "location": "/troubleshooting/yellow-red-loop/#old-pump-data-pump-issue", 
            "text": "If your pump reading is older than 5 minutes, but BGs are fine, then you will need to troubleshoot the pump communications.  The screenshot below is a good example of missing pump data preventing the Loop from staying green.  The CGM is still communicating (BG reading is only 2 minutes old)...but pump reservoir reading is older than 5 min.      Pump troubleshooting steps:   Your pump battery may be low.  Replace the battery...even if the percentage doesn't look low, this is a good starting point  If you have an x23 or x54 model pump, make sure your mysentry is paired  Have the pump and RL gotten too far away from each other?  Try bringing them closer  Try retuning the RL.  Just a note though, the Loop has code embedded to automatically retunes RL when the pump comms are failing for 20 minutes.  So, manual retuning is more about speeding things along rather than being a necessary intervention to fixing pump comms.  Try a  Send Button Press  to \"wake up the pump\" a bit.  Try a  Fetch Pump History .  Same as retuning though, the Loop has code embedded to automatically pull pump history.  Manual fetching of pump history is more about speeding things along than being a necessary step to fixing pump comms.  If you have a backup pump, try switching to that pump and see whether the issue persists.    About Pump Communications  Pump communications errors can and will happen. Just be patient, and they almost always correct themselves.  Yellow loops happen sometimes, and aren't usually worth troubleshooting.  Red loops are more infrequent and usually a good time to start investigating possible source.   Some environments will be noisy for rf comms (such as concerts, amusement parks, tech venues, conferences with OpenAPS users in attendance, etc.), and your loop may not stay green as often as usual.  Just be patient. When you leave that environment, looping will go back to normal.   Wireless microphones, baby monitors, and other similar types of devices can interfer with pump communications if there are lots of competing radio devices in a tight environment.  If you find you have areas of your house that consistently have poor pump communications, look for potential sources of interference from wireless devices.  Another common area for failed pump communications are at night if you tend to sleep on your pump, or otherwise \"body block\" the RL's ability to communicate with the pump.  Try to place your pump and RL such that your body will not block the signal to/from RL.  Standing the RL on it's base with antenna pointing up, on a nearby nightstand should be sufficient proximity/orientation for overnight looping.  These examples below are pump error messages.  Notice they all mention the pump specifically.", 
            "title": "Old Pump data (Pump Issue)"
        }, 
        {
            "location": "/troubleshooting/yellow-red-loop/#incorrect-pump-time-pump-issue", 
            "text": "And here's an interesting problem.  BGs are current, but notice that the pump time is 2 hours into the future of the current iPhone time.  In this case, the Loop user had manually set their pump time during travels and caused the pump time to be out of sync with Loop.  Remember,  do not change your pump time manually...always use the RL to set the pump time .  This red loop was resolved as soon as the Looper used RL to set the pump time.", 
            "title": "Incorrect Pump Time (Pump Issue)"
        }, 
        {
            "location": "/troubleshooting/yellow-red-loop/#failure-to-enact-temp-basals-pump-issue", 
            "text": "If you see messages about \"Could not verify TempBasal on attempt  2\", that is likely one of just a few issues.  The message indicates that Loop has BGs and pump data, has sent a recommended basal to the pump, but the pump does not appear to be enacting those basals.       Your pump cannot be suspended.  Resume insulin deliveries  Max basal rate in Loop app cannot be greater than max basal rate in pump settings  Temp basal type must be set to unit/hour, not percent, in pump", 
            "title": "Failure to Enact Temp Basals (Pump Issue)"
        }, 
        {
            "location": "/troubleshooting/yellow-red-loop/#bluetoothrl-issues", 
            "text": "", 
            "title": "Bluetooth/RL issues"
        }, 
        {
            "location": "/troubleshooting/yellow-red-loop/#bluetooth-failures-rl-or-iphone-issue", 
            "text": "Sometimes the RilleyLink and iPhone fail to communicate via BT.  You need to determine if this is due to RL's problems, iPhone's problems, or just BT communications problem.  There can be messages when BT fails, such as the message below, or \"RileyLink Timeout\" error messages.       Has your RL been fully charged? Try charging your RL for an hour or two, make sure the red light comes on while charging  Is your lipo battery old and perhaps dying earlier in the day?  Order a new battery, replace lipo battery  Check your lipo battery wires?  If your wires are dislodged from the lipo itself, RL will not likely work for long  Your RL battery needs to be securely plugged in, check those connections.  Check if your RL is on and says \"connected\" in the  status screen for bluetooth . If it says \"connecting\" or \"disconnected\", you have a BT problem with RL and iPhone.  Make sure your iPhone's BT is turned on, and BT is not being affected by other BT systems (such as car audio)  Check if any of the RL command buttons work...such as  Send Button Press .  If you've checked all of the above, toggle your RL power switch and turn your iPhone BT off/on.  Try rebooting your phone.  If those steps don't work and the RL is properly charging otherwise, likely you have a bad RileyLink and will need to replace it.", 
            "title": "Bluetooth failures (RL or iPhone issue)"
        }, 
        {
            "location": "/troubleshooting/yellow-red-loop/#loop-settings-issues", 
            "text": "", 
            "title": "Loop Settings Issues"
        }, 
        {
            "location": "/troubleshooting/yellow-red-loop/#failure-to-set-insulin-curve-model-loop-settings", 
            "text": "If you see messages about \"Missing data: Glucose effects\", you likely have  forgotten to set your Insulin Curve Model .  The message indicates that Loop is missing a component of its algorithm inputs to calculate glucose effects on predicted BGs.   Return to your Loop app settings and pick an Insulin Curve.", 
            "title": "Failure to set Insulin Curve Model (Loop settings)"
        }, 
        {
            "location": "/troubleshooting/mlab_cleanup/", 
            "text": "Nightscout Issues\n\u2301\n\n\nThe free Nightscout we use also depends on a free database from mLab.  The free database only has so much room...500 MB to be specific.  After a period of time (it will vary, but usually on the order of months), your mLab database could reach its free limits.  When that happens, your NS site may stop showing data properly.  For example, you may notice your Share Bridge will not pull data and your site will be \u201cstale\u201d.\n\n\nThe good news?  Loop can still run just fine until you repair your mLab database.  The bad news?  You just won\u2019t be able to remotely monitor Loop through NS until you clear up some storage space in mLab.\n\n\nRepair Process\n\u2301\n\n\nGo to your Nightscout site's settings (the three horizontal bars in the upper right of your Nightscout site) and open your Admin Tools for the site.  Click on the buttons to \"Delete all documents\" in your Clean Mongo status database section of the Admin Tools.  For good measure, also click on the buttons for removing future items as well.  \n\n\n\n\n\n\n\n\n\nNow that you cleared out some database space, we can now make the database more efficient by \"repairing\" the database.\n\n\nTo begin the repair process, click on the mlab link in your Heroku site control panel.\n\n\n\n\n\n\n\n\n\nThen click on the \nTools\n tab in the screen that opens.  Click on the \ncommands\n button and then select the \nrepairDatabase\n from the dropdown menu of available commands.  At the bottom of the screen, select the \nRun Command\n button. \n\n\n\n\n\n\n\n\n\nAfter a short time, you should get a return message of \"ok\" at the bottom of the command menu box.  If you failed to clear out your Mongo status database before running this command, you will likely not get a successful repair and instead your pointer wheel will just keep spinning.  Make sure you first clean out the database section as described above with your Nightscout Admin Tools.\n\n\nYou can verify that your database housekeeping was successful by returning to your NS site and waiting for the next Loop upload.  You should see all your information back in with the next Loop run.", 
            "title": "NS display"
        }, 
        {
            "location": "/troubleshooting/mlab_cleanup/#nightscout-issues", 
            "text": "The free Nightscout we use also depends on a free database from mLab.  The free database only has so much room...500 MB to be specific.  After a period of time (it will vary, but usually on the order of months), your mLab database could reach its free limits.  When that happens, your NS site may stop showing data properly.  For example, you may notice your Share Bridge will not pull data and your site will be \u201cstale\u201d.  The good news?  Loop can still run just fine until you repair your mLab database.  The bad news?  You just won\u2019t be able to remotely monitor Loop through NS until you clear up some storage space in mLab.", 
            "title": "Nightscout Issues"
        }, 
        {
            "location": "/troubleshooting/mlab_cleanup/#repair-process", 
            "text": "Go to your Nightscout site's settings (the three horizontal bars in the upper right of your Nightscout site) and open your Admin Tools for the site.  Click on the buttons to \"Delete all documents\" in your Clean Mongo status database section of the Admin Tools.  For good measure, also click on the buttons for removing future items as well.       Now that you cleared out some database space, we can now make the database more efficient by \"repairing\" the database.  To begin the repair process, click on the mlab link in your Heroku site control panel.     Then click on the  Tools  tab in the screen that opens.  Click on the  commands  button and then select the  repairDatabase  from the dropdown menu of available commands.  At the bottom of the screen, select the  Run Command  button.      After a short time, you should get a return message of \"ok\" at the bottom of the command menu box.  If you failed to clear out your Mongo status database before running this command, you will likely not get a successful repair and instead your pointer wheel will just keep spinning.  Make sure you first clean out the database section as described above with your Nightscout Admin Tools.  You can verify that your database housekeeping was successful by returning to your NS site and waiting for the next Loop upload.  You should see all your information back in with the next Loop run.", 
            "title": "Repair Process"
        }, 
        {
            "location": "/troubleshooting/priming/", 
            "text": "Priming and Site Changes\n\u2301\n\n\nLoop uses event history and reservoir levels to determine how much insulin has actually been delivered through the pump, and correspondingly the Insulin On Board (IOB).  \n\n\nSite Changes\n\u2301\n\n\n\n\nPriming Events and IOB\n\n\nLoop version 1.3.2 and newer will automatically detect prime events and the primed insulin will not be counted to IOB.  \nYou will need to have your Preferred Data Source set to Event History for the automatic detection of primes to work.\n  Reservoir Volumes will not detect prime events.\n\n\n\n\nIf you are using a version of Loop older than v1.3.2 (or using Preferred Data Source of Reservoir Volume), you will need to be aware of the following regarding prime events at site changes:\n\n\n\n\n\n\nIf you change sites and increase reservoir volume (i.e., start a new reservoir), don't worry. So long as you are putting in a reservoir that has more insulin than the old one, IOB will be accurate in Loop.  When Loop sees a rewind and an increase in reservoir volume, it will not count any tubing primes as IOB.\n\n\n\n\n\n\nIf you change sites but \ndo NOT increase reservoir volume\n (i.e., you keep existing reservoir going), you will need to go into Loop's reservoir history and delete 30 minutes of continuous reservoir history including the prime event.  By deleting 30 minutes of reservoir history, Loop will use Event History to determine insulin deliveries and IOB. If you cannot get the prime to clear from the IOB, operate in Open Loop mode until the insulin action duration time has passed.  Deleting history is done by:\n\n\n(1)  clicking on the Insulin Delivery Chart  \n\n\n(2)  selecting the Reservoir history screen  \n\n\n(3)  swiping to delete individual reservoir readings  \n\n\n(4)  delete at least 30 minutes of reservoir readings, including the readings that involved priming events\n\n\n\n\n\n\nPrime Menu\n\u2301\n\n\n\n\nWarning\n\n\nWhen you prime tubing on a Medtronic pump, make sure to complete the priming menu commands.\n\n\n\n\nIn other words, finish all the prompts so that you get back to the (nearly blank) normal Medtronic pump screen.  If you don't finish the priming menu, the pump will not begin basal insulin delivery, nor does it alarm.  It is equivalent to the pump being suspended...but you won't be able to see any indication of that in Nightscout as a remotely monitoring parent other than Loop's temp basals not being set.  Loop will not detect the prime screen issue and will keep sending temp basal messages...but the pump won't enact them.  On Loop, you could notice it by the active IOB continually going down and then eventually negative IOB, as the basal is not delivered and the reservoir level remains constant.  However, the temp basal graph will still show the bars from the temp basal commands loop has been sending.\n\n\nSo, remember to finish those prime menu screens through to the end.", 
            "title": "Priming and Sites"
        }, 
        {
            "location": "/troubleshooting/priming/#priming-and-site-changes", 
            "text": "Loop uses event history and reservoir levels to determine how much insulin has actually been delivered through the pump, and correspondingly the Insulin On Board (IOB).", 
            "title": "Priming and Site Changes"
        }, 
        {
            "location": "/troubleshooting/priming/#site-changes", 
            "text": "Priming Events and IOB  Loop version 1.3.2 and newer will automatically detect prime events and the primed insulin will not be counted to IOB.   You will need to have your Preferred Data Source set to Event History for the automatic detection of primes to work.   Reservoir Volumes will not detect prime events.   If you are using a version of Loop older than v1.3.2 (or using Preferred Data Source of Reservoir Volume), you will need to be aware of the following regarding prime events at site changes:    If you change sites and increase reservoir volume (i.e., start a new reservoir), don't worry. So long as you are putting in a reservoir that has more insulin than the old one, IOB will be accurate in Loop.  When Loop sees a rewind and an increase in reservoir volume, it will not count any tubing primes as IOB.    If you change sites but  do NOT increase reservoir volume  (i.e., you keep existing reservoir going), you will need to go into Loop's reservoir history and delete 30 minutes of continuous reservoir history including the prime event.  By deleting 30 minutes of reservoir history, Loop will use Event History to determine insulin deliveries and IOB. If you cannot get the prime to clear from the IOB, operate in Open Loop mode until the insulin action duration time has passed.  Deleting history is done by:  (1)  clicking on the Insulin Delivery Chart    (2)  selecting the Reservoir history screen    (3)  swiping to delete individual reservoir readings    (4)  delete at least 30 minutes of reservoir readings, including the readings that involved priming events", 
            "title": "Site Changes"
        }, 
        {
            "location": "/troubleshooting/priming/#prime-menu", 
            "text": "Warning  When you prime tubing on a Medtronic pump, make sure to complete the priming menu commands.   In other words, finish all the prompts so that you get back to the (nearly blank) normal Medtronic pump screen.  If you don't finish the priming menu, the pump will not begin basal insulin delivery, nor does it alarm.  It is equivalent to the pump being suspended...but you won't be able to see any indication of that in Nightscout as a remotely monitoring parent other than Loop's temp basals not being set.  Loop will not detect the prime screen issue and will keep sending temp basal messages...but the pump won't enact them.  On Loop, you could notice it by the active IOB continually going down and then eventually negative IOB, as the basal is not delivered and the reservoir level remains constant.  However, the temp basal graph will still show the bars from the temp basal commands loop has been sending.  So, remember to finish those prime menu screens through to the end.", 
            "title": "Prime Menu"
        }, 
        {
            "location": "/troubleshooting/rileylink/", 
            "text": "RileyLink\n\u2301\n\n\nTuning the Radio\n\u2301\n\n\nThe RileyLink communicates with the pump through radio frequency communications.  Numerous factors can influence how well those communications can function...interferences from other devices, temperature, physical blocking, etc.\n\n\nKnowing a little about the strength of the radio communications will help you troubleshoot Loop errors.  When you \nTune Radio Frequency\n in the Riley Link menu, it is testing for the strongest frequency to communicate with the pump.  Usually this frequency is pretty constant, but during temperature changes it may be that the best frequency is not the one currently set.  The tuning results also show which frequency is the strongest.\n\n\nFor example, in the screenshot below, the strength of the radio communications with the pump is shown by the last number of the tune.  Frequencies with tuning results of -99 means NO communications were established at that frequency.  RileyLink will use the strongest frequency tune for its pump communications.  In the screenshot, the best frequency returned a result of \n-37\n at a frequency of \n916.60 MHz\n, so RileyLink will set that \n916.60 MHz\n for its pump communications.\n\n\n\n\n\n\n\n\n\nGenerally, if you have tuning in the -90s, your RileyLink-pump communications will not work.  If you have tuning in the -80s, you may have periodic communication failures.  If your tuning is in the -70s or better, your communications should be pretty stable.  \n\n\nExperiment with your RileyLink by moving it closer and farther away from the pump.  Try putting it on the other side of your body, or put it in a purse.  Test the tuning results in real world situations that you think you'd be encountering, such as where you will have the RileyLink placed during overnight charging. Perform tunes at the various distances and situations.  This will help you understand how far from the pump your RileyLink can get before it will affect Loop performance.  \n\n\nBluetooth\n\u2301\n\n\nRileyLink communicates with your iPhone and Loop app through Bluetooth (BT).  If your iPhone has BT issues, your Loop will have failures.  There have been reports of BT audio devices (such as BT pairings in your car or home audio BT speakers) interfering with the Loop.  If you are finding Loop failures frequently happening at a particular location, you may try to troubleshoot if there are BT problems in the area.\n\n\nYour BT signal strength can be seen in the Loop settings, under the RileyLink menu, on the \nSignal Strength\n line.  As you move closer and further away from your phone, you can watch that number dynamically change. This line is \nnot\n displaying the signal strength of your pump communications discussed above (those are shown in the tuning results screen).\n\n\nLights\n\u2301\n\n\nRileyLink has several lights that you may notice from time to time.  There is no 'power' light.  If you suspect that your RileyLink is not being powered, try turning it off and on using the small sliding switch.  You should see lights in the middle of the board flash when you do this.  If they flash, that means the board has power.\n\n\n\n\n\n\nRed light: Charging light.  The red light will remain on while RileyLink is charging, and it will turn off when charging is complete.  You may notice the red light turn on periodically even after charging is complete...it's just \"topping off\".\n\n\n\n\n\n\nGreen light: Bluetooth connection light.  The green light will remain on while you have BT connection with your iPhone.  If that green light fails to stay on, you should troubleshoot your BT connections.  Try restarting BT on your iPhone and/or turning the RileyLink off/on by its power switch.\n\n\n\n\n\n\nBlue light: Pump communications.  If you have an older firmware on your RileyLink, some of the blue and green lights will flash periodically as it is communicating with the pump.  It's just letting you know that it is busy talking and collecting info.\n\n\n\n\n\n\nCharging\n\u2301\n\n\nThe battery that comes with RileyLink is not likely charged completely when it is shipped, so feel free to charge it up.  You'll need a \nmini-USB cable\n and \n0.5A USB charging power supply\n like your iPhone power supply.  RileyLink takes about 2-4 hours to fully charge (the red light will turn off when fully charged, read note above about red light patterns) and should easily last at least a full day of constant Loop use.  Typically, it can go into the 30-hour range without problem.  Most people charge their RileyLink each night when they are sleeping.  You don't have to worry about leaving the RileyLink plugged in \"too long\" for charging.  It will automatically stop charging the battery when it is fully charged.\n\n\nSince the best practice is to charge your RileyLink overnight while you sleep, and the battery lasts safely over 24 hours, there is no battery level indicator for the RileyLink.  The RileyLink's charge level is not viewable on Nightscout, nor within the Loop app.  If you forget to charge your RileyLink overnight, you can recharge it with a portable USB battery in a pinch.  A \nshort mini-USB cable\n could be a good addition to a small gear bag.\n\n\nRange\n\u2301\n\n\nThe range that your RileyLink will function is \nheavily\n dependent on the environment that you are in. Read the section about Tuning to help determine how far your RileyLink can dependably maintain an adequate signal strength in your particular environment.  Most people wear the RileyLink in a pocket or carry a belt holster during the day.  Typically, RileyLink will need to be closer to the pump than the iPhone.  The radio frequency communications will have a shorter range than the BT communications.\n\n\nLipo Battery\n\u2301\n\n\nIf you ordered your RileyLink preassembled, you should plug in the battery cable.  Please make sure your RileyLink\u2019s battery cable is securely pushed all the way into the socket.  Poor battery cable connection can make the Loop communications fail.\n\n\n\n  \n\n  \nRileyLink with loose battery cable.\n\n\n\n\n\n\n  \n\n  \nRileyLink with properly secured battery cable.\n\n\n\n\n\nKeep your RileyLink and lipo battery protected from damage.  Lipo batteries are unsafe when damaged or punctured, so the case is an important part of safe Looping.  If your battery is damaged in some way, please disconnect it immediately, and dispose of it (they should be recycled). You can order new batteries on the \nGetRileyLink website", 
            "title": "RileyLink"
        }, 
        {
            "location": "/troubleshooting/rileylink/#rileylink", 
            "text": "", 
            "title": "RileyLink"
        }, 
        {
            "location": "/troubleshooting/rileylink/#tuning-the-radio", 
            "text": "The RileyLink communicates with the pump through radio frequency communications.  Numerous factors can influence how well those communications can function...interferences from other devices, temperature, physical blocking, etc.  Knowing a little about the strength of the radio communications will help you troubleshoot Loop errors.  When you  Tune Radio Frequency  in the Riley Link menu, it is testing for the strongest frequency to communicate with the pump.  Usually this frequency is pretty constant, but during temperature changes it may be that the best frequency is not the one currently set.  The tuning results also show which frequency is the strongest.  For example, in the screenshot below, the strength of the radio communications with the pump is shown by the last number of the tune.  Frequencies with tuning results of -99 means NO communications were established at that frequency.  RileyLink will use the strongest frequency tune for its pump communications.  In the screenshot, the best frequency returned a result of  -37  at a frequency of  916.60 MHz , so RileyLink will set that  916.60 MHz  for its pump communications.     Generally, if you have tuning in the -90s, your RileyLink-pump communications will not work.  If you have tuning in the -80s, you may have periodic communication failures.  If your tuning is in the -70s or better, your communications should be pretty stable.    Experiment with your RileyLink by moving it closer and farther away from the pump.  Try putting it on the other side of your body, or put it in a purse.  Test the tuning results in real world situations that you think you'd be encountering, such as where you will have the RileyLink placed during overnight charging. Perform tunes at the various distances and situations.  This will help you understand how far from the pump your RileyLink can get before it will affect Loop performance.", 
            "title": "Tuning the Radio"
        }, 
        {
            "location": "/troubleshooting/rileylink/#bluetooth", 
            "text": "RileyLink communicates with your iPhone and Loop app through Bluetooth (BT).  If your iPhone has BT issues, your Loop will have failures.  There have been reports of BT audio devices (such as BT pairings in your car or home audio BT speakers) interfering with the Loop.  If you are finding Loop failures frequently happening at a particular location, you may try to troubleshoot if there are BT problems in the area.  Your BT signal strength can be seen in the Loop settings, under the RileyLink menu, on the  Signal Strength  line.  As you move closer and further away from your phone, you can watch that number dynamically change. This line is  not  displaying the signal strength of your pump communications discussed above (those are shown in the tuning results screen).", 
            "title": "Bluetooth"
        }, 
        {
            "location": "/troubleshooting/rileylink/#lights", 
            "text": "RileyLink has several lights that you may notice from time to time.  There is no 'power' light.  If you suspect that your RileyLink is not being powered, try turning it off and on using the small sliding switch.  You should see lights in the middle of the board flash when you do this.  If they flash, that means the board has power.    Red light: Charging light.  The red light will remain on while RileyLink is charging, and it will turn off when charging is complete.  You may notice the red light turn on periodically even after charging is complete...it's just \"topping off\".    Green light: Bluetooth connection light.  The green light will remain on while you have BT connection with your iPhone.  If that green light fails to stay on, you should troubleshoot your BT connections.  Try restarting BT on your iPhone and/or turning the RileyLink off/on by its power switch.    Blue light: Pump communications.  If you have an older firmware on your RileyLink, some of the blue and green lights will flash periodically as it is communicating with the pump.  It's just letting you know that it is busy talking and collecting info.", 
            "title": "Lights"
        }, 
        {
            "location": "/troubleshooting/rileylink/#charging", 
            "text": "The battery that comes with RileyLink is not likely charged completely when it is shipped, so feel free to charge it up.  You'll need a  mini-USB cable  and  0.5A USB charging power supply  like your iPhone power supply.  RileyLink takes about 2-4 hours to fully charge (the red light will turn off when fully charged, read note above about red light patterns) and should easily last at least a full day of constant Loop use.  Typically, it can go into the 30-hour range without problem.  Most people charge their RileyLink each night when they are sleeping.  You don't have to worry about leaving the RileyLink plugged in \"too long\" for charging.  It will automatically stop charging the battery when it is fully charged.  Since the best practice is to charge your RileyLink overnight while you sleep, and the battery lasts safely over 24 hours, there is no battery level indicator for the RileyLink.  The RileyLink's charge level is not viewable on Nightscout, nor within the Loop app.  If you forget to charge your RileyLink overnight, you can recharge it with a portable USB battery in a pinch.  A  short mini-USB cable  could be a good addition to a small gear bag.", 
            "title": "Charging"
        }, 
        {
            "location": "/troubleshooting/rileylink/#range", 
            "text": "The range that your RileyLink will function is  heavily  dependent on the environment that you are in. Read the section about Tuning to help determine how far your RileyLink can dependably maintain an adequate signal strength in your particular environment.  Most people wear the RileyLink in a pocket or carry a belt holster during the day.  Typically, RileyLink will need to be closer to the pump than the iPhone.  The radio frequency communications will have a shorter range than the BT communications.", 
            "title": "Range"
        }, 
        {
            "location": "/troubleshooting/rileylink/#lipo-battery", 
            "text": "If you ordered your RileyLink preassembled, you should plug in the battery cable.  Please make sure your RileyLink\u2019s battery cable is securely pushed all the way into the socket.  Poor battery cable connection can make the Loop communications fail.  \n   \n   RileyLink with loose battery cable.   \n   \n   RileyLink with properly secured battery cable.   Keep your RileyLink and lipo battery protected from damage.  Lipo batteries are unsafe when damaged or punctured, so the case is an important part of safe Looping.  If your battery is damaged in some way, please disconnect it immediately, and dispose of it (they should be recycled). You can order new batteries on the  GetRileyLink website", 
            "title": "Lipo Battery"
        }, 
        {
            "location": "/troubleshooting/time-change/", 
            "text": "Time Changes with Loop\n\u2301\n\n\nLoop is built to fully work across time zone and daylight savings time changes as long as a few basic instructions are followed.\n\n\n\n\nIMPORTANT\n\n\nAlways use RileyLink to change pump time.  If you fail to set the pump time by using the RileyLink, Loop will not function properly.\n\n\n\n\n\n\n\n\n\n\n\niPhone\n\u2301\n\n\nLoop will assume your iPhone's time (UTC, not time zone) is always correct. This theoretically may not be the case if a nearby cell tower is improperly configured (though there are likely resilience mechanisms in iOS to handle this). Automatic time setting can always be disabled in Settings.\n\n\nMinimed Pump and CGM\n\u2301\n\n\nThe Minimed pump doesn't expose a universal clock, instead it exposes the components of a date (YMDHIS). It has no concept of political time zones, and just continues to increment its components on schedule. Therefore, Loop assumes that the pump's date, until changed, remains at a fixed offset from UTC.\n\n\nThat offset is stored by Loop the first time the pump ID is changed, and every time the pump's time is changed from the RileyLink Settings screen.\n\n\nDexcom CGM\n\u2301\n\n\nNo particular input is needed on your part for Loop to work with Dexcom CGM data. All times are UTC.  However, at time changes you may want to manually change your G4 receiver time setting just so the time visually appears correct when you are viewing the screen.\n\n\nTraveling across time zones and daylight savings\n\u2301\n\n\nWhen traveling, there is no urgency to update the pump's time to match the wall-clocks in your geography. Configuration schedules\u2014basal rates, target ranges, carb ratios, and insulin sensitivities\u2014will all remain in the pump's time zone. The app's graphs and status will always display in the time zone of the iPhone, and Loop will understand the difference in offset between the two, highlighting it when attempting to change configuration schedules.\n\n\nWhen you're ready to update the pump's time, simply \nuse the Loop's RileyLink \"Change Time\"\n. This will also shift your configuration schedules to the current time zone.", 
            "title": "Time Changes"
        }, 
        {
            "location": "/troubleshooting/time-change/#time-changes-with-loop", 
            "text": "Loop is built to fully work across time zone and daylight savings time changes as long as a few basic instructions are followed.   IMPORTANT  Always use RileyLink to change pump time.  If you fail to set the pump time by using the RileyLink, Loop will not function properly.", 
            "title": "Time Changes with Loop"
        }, 
        {
            "location": "/troubleshooting/time-change/#iphone", 
            "text": "Loop will assume your iPhone's time (UTC, not time zone) is always correct. This theoretically may not be the case if a nearby cell tower is improperly configured (though there are likely resilience mechanisms in iOS to handle this). Automatic time setting can always be disabled in Settings.", 
            "title": "iPhone"
        }, 
        {
            "location": "/troubleshooting/time-change/#minimed-pump-and-cgm", 
            "text": "The Minimed pump doesn't expose a universal clock, instead it exposes the components of a date (YMDHIS). It has no concept of political time zones, and just continues to increment its components on schedule. Therefore, Loop assumes that the pump's date, until changed, remains at a fixed offset from UTC.  That offset is stored by Loop the first time the pump ID is changed, and every time the pump's time is changed from the RileyLink Settings screen.", 
            "title": "Minimed Pump and CGM"
        }, 
        {
            "location": "/troubleshooting/time-change/#dexcom-cgm", 
            "text": "No particular input is needed on your part for Loop to work with Dexcom CGM data. All times are UTC.  However, at time changes you may want to manually change your G4 receiver time setting just so the time visually appears correct when you are viewing the screen.", 
            "title": "Dexcom CGM"
        }, 
        {
            "location": "/troubleshooting/time-change/#traveling-across-time-zones-and-daylight-savings", 
            "text": "When traveling, there is no urgency to update the pump's time to match the wall-clocks in your geography. Configuration schedules\u2014basal rates, target ranges, carb ratios, and insulin sensitivities\u2014will all remain in the pump's time zone. The app's graphs and status will always display in the time zone of the iPhone, and Loop will understand the difference in offset between the two, highlighting it when attempting to change configuration schedules.  When you're ready to update the pump's time, simply  use the Loop's RileyLink \"Change Time\" . This will also shift your configuration schedules to the current time zone.", 
            "title": "Traveling across time zones and daylight savings"
        }, 
        {
            "location": "/troubleshooting/pump-errors/", 
            "text": "Pump Errors\n\u2301\n\n\nThe pumps are used and not under warranty.  Use this section at your own risk.  However, that said, some of the most common pump errors are repairable, or not actually a real problem.\n\n\nA21 error\n\u2301\n\n\nThis error message is common when a pump has been stored for a period of time without a battery.  Most pumps will show an A21 error when you first purchase them on the used market.  Not a big deal.  Press the down arrow (also has the symbol of a light bulb on it) and the pump screen message will scroll down to let you know how to clear that error message (press ESC then ACT).  If the message is coming up on a pump that hasn't been in storage, pull the battery out and replace with a fresh, new battery.  Chances are your battery or battery cap are old.  Look for signs of dirt or rust in the battery cap, give it a little cleaning.\n\n\n\n\nDisplay Tip\n\n\nWhen the pump screen has a little black/white bar on the right side, that is a scroll bar.  Use the arrow keys on the right of the the pump screen to scroll and see the additional information.\n\n\n\n\n\n\n\n\n\n\n\nBatt Out Limit\n\u2301\n\n\nThis error message \"battery out of limits\" has to do with the internal pump battery, not the AAA battery you replace.  The internal battery cannot be replaced, and unfortunately also has a finite lifespan.  The error message is more of an annoyance than a true problem.  You can try to change the AAA battery faster.  But, the worst case scenario is that you'll have to re-enter the time and date when you get this message more often.  (Don't forget to use RileyLink to set the time after you get this message.)\n\n\n\n\n\n\n\n\n\nButton Error\n\u2301\n\n\nThe Button Error message usually happens from water, moisture, or dust getting under the pump's button pad and causing button(s) to fail.  The fix luckily is quite straight-forward and takes less than 30 minutes.  Check out the fix \nhere for a YouTube video\n or \nhere for photo gallery\n\n\n\n\n\n\n\n\n\nThe solution involves simply prying up the button pad's sticker face to expose the layers beneath.\n\n\n\n\n\n\n\n\n\nYou can see some evidence of crud/rust on the underside of this button pad which caused the button error.\n\n\n\n\n\n\n\n\n\nAfter you finish your fix, another excellent idea is to make sure you add a length of clear packing tape across the front face of the pump to prevent errant water or dirt from having easy access to the button pad seams.\n\n\n\n\n\n\n\n\n\nMotor error\n\u2301\n\n\nOften a motor error is the result of a poorly seated reservoir or tubing cap.  If you get a motor error, the first thing you should do is detech from your infusion site.  Remove and reseat the reservoir, prime again, and see if the motor error resolves.  If it does not, try replacing the tubing cap on the reservoir (new tubing).  If that does not resolve the motor error, also replace the entire reservoir.\n\n\n\n\n\n\n\n\n\nA33 error\n\u2301\n\n\n\n\nSafety warning\n\n\nIf you get this error, DO NOT push on the bulged out end cap.  Always detach your tubing from your infusion set before addressing this error message.  If you push on the end cap in an attempt to get it back flush, you may delivery a dangerous amount of insulin mistakenly.\n\n\n\n\nThis error is a bit more involved to repair.  The problem is that there is a loose drive support cap.  Most of the time this error message will appear during a priming event as the end cap of the drive will slip, releasing the ability of the reservoir plunger to get pressure to delivery insulin.  The pump senses the lack of pressure and delivers the A33 error.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe solution is to UNHOOK from your site.  See warning above.  Remove reservoir and put your finger inside the reservoir sleeve.  Push on the drive so that the end cap is pushed out the most possible.  This will give your the most surface area possible to place the super glue GEL that you will use.  (don't use regular super glue...it must be gel.)  Remove the sticker that covers the end cap, save it for later because you can reattach when repair is completed.\n\n\nWith the end cap pushed out, take some glue gel with the toothpick and apply it on the outside of the popped out cap . Be generous cause you can do this only once . Once you are done take a napkin and press hard the cap toward the pump so it can go back inside and keep it pressed for a few seconds. Then remove all the small parts of the napkin that has glued to the pump. Leave the pump to dry for about 10-15 minutes.\n\n\n\n\n\n\n\n\n\nNow to test whether the pumps was glued well. You have already waited about 10-15 minutes so put your finger back in and press hard the plunger.  If you glued it well, the end cap will not move.  If the cap goes out again, you have to glue one more time. If all looks well, put some glue back on top of the pump cap and reattach the sticker that was removed to start.\n\n\nA32 and E22 error loop\n\u2301\n\n\nFrom what we know, this set of error codes seems like a pump killer.  A call to Medtronic support gave this less than hopeful information:\n\n\nA32 - failure of flash memory\nE22 - software re-installation is necessary\n\n\nWe don't have any reports of a good fix for these error codes.  When seen, usually the E22 error comes up and as soon as it is cleared, the A32 errror comes up.  And the loop continues with a pump restart.", 
            "title": "Pump Errors"
        }, 
        {
            "location": "/troubleshooting/pump-errors/#pump-errors", 
            "text": "The pumps are used and not under warranty.  Use this section at your own risk.  However, that said, some of the most common pump errors are repairable, or not actually a real problem.", 
            "title": "Pump Errors"
        }, 
        {
            "location": "/troubleshooting/pump-errors/#a21-error", 
            "text": "This error message is common when a pump has been stored for a period of time without a battery.  Most pumps will show an A21 error when you first purchase them on the used market.  Not a big deal.  Press the down arrow (also has the symbol of a light bulb on it) and the pump screen message will scroll down to let you know how to clear that error message (press ESC then ACT).  If the message is coming up on a pump that hasn't been in storage, pull the battery out and replace with a fresh, new battery.  Chances are your battery or battery cap are old.  Look for signs of dirt or rust in the battery cap, give it a little cleaning.   Display Tip  When the pump screen has a little black/white bar on the right side, that is a scroll bar.  Use the arrow keys on the right of the the pump screen to scroll and see the additional information.", 
            "title": "A21 error"
        }, 
        {
            "location": "/troubleshooting/pump-errors/#batt-out-limit", 
            "text": "This error message \"battery out of limits\" has to do with the internal pump battery, not the AAA battery you replace.  The internal battery cannot be replaced, and unfortunately also has a finite lifespan.  The error message is more of an annoyance than a true problem.  You can try to change the AAA battery faster.  But, the worst case scenario is that you'll have to re-enter the time and date when you get this message more often.  (Don't forget to use RileyLink to set the time after you get this message.)", 
            "title": "Batt Out Limit"
        }, 
        {
            "location": "/troubleshooting/pump-errors/#button-error", 
            "text": "The Button Error message usually happens from water, moisture, or dust getting under the pump's button pad and causing button(s) to fail.  The fix luckily is quite straight-forward and takes less than 30 minutes.  Check out the fix  here for a YouTube video  or  here for photo gallery     The solution involves simply prying up the button pad's sticker face to expose the layers beneath.     You can see some evidence of crud/rust on the underside of this button pad which caused the button error.     After you finish your fix, another excellent idea is to make sure you add a length of clear packing tape across the front face of the pump to prevent errant water or dirt from having easy access to the button pad seams.", 
            "title": "Button Error"
        }, 
        {
            "location": "/troubleshooting/pump-errors/#motor-error", 
            "text": "Often a motor error is the result of a poorly seated reservoir or tubing cap.  If you get a motor error, the first thing you should do is detech from your infusion site.  Remove and reseat the reservoir, prime again, and see if the motor error resolves.  If it does not, try replacing the tubing cap on the reservoir (new tubing).  If that does not resolve the motor error, also replace the entire reservoir.", 
            "title": "Motor error"
        }, 
        {
            "location": "/troubleshooting/pump-errors/#a33-error", 
            "text": "Safety warning  If you get this error, DO NOT push on the bulged out end cap.  Always detach your tubing from your infusion set before addressing this error message.  If you push on the end cap in an attempt to get it back flush, you may delivery a dangerous amount of insulin mistakenly.   This error is a bit more involved to repair.  The problem is that there is a loose drive support cap.  Most of the time this error message will appear during a priming event as the end cap of the drive will slip, releasing the ability of the reservoir plunger to get pressure to delivery insulin.  The pump senses the lack of pressure and delivers the A33 error.        The solution is to UNHOOK from your site.  See warning above.  Remove reservoir and put your finger inside the reservoir sleeve.  Push on the drive so that the end cap is pushed out the most possible.  This will give your the most surface area possible to place the super glue GEL that you will use.  (don't use regular super glue...it must be gel.)  Remove the sticker that covers the end cap, save it for later because you can reattach when repair is completed.  With the end cap pushed out, take some glue gel with the toothpick and apply it on the outside of the popped out cap . Be generous cause you can do this only once . Once you are done take a napkin and press hard the cap toward the pump so it can go back inside and keep it pressed for a few seconds. Then remove all the small parts of the napkin that has glued to the pump. Leave the pump to dry for about 10-15 minutes.     Now to test whether the pumps was glued well. You have already waited about 10-15 minutes so put your finger back in and press hard the plunger.  If you glued it well, the end cap will not move.  If the cap goes out again, you have to glue one more time. If all looks well, put some glue back on top of the pump cap and reattach the sticker that was removed to start.", 
            "title": "A33 error"
        }, 
        {
            "location": "/troubleshooting/pump-errors/#a32-and-e22-error-loop", 
            "text": "From what we know, this set of error codes seems like a pump killer.  A call to Medtronic support gave this less than hopeful information:  A32 - failure of flash memory\nE22 - software re-installation is necessary  We don't have any reports of a good fix for these error codes.  When seen, usually the E22 error comes up and as soon as it is cleared, the A32 errror comes up.  And the loop continues with a pump restart.", 
            "title": "A32 and E22 error loop"
        }, 
        {
            "location": "/nightscout/overview/", 
            "text": "Overview\n\u2301\n\n\nNightscout (NS) is an excellent tool to remotely view Loop's actions.  It allows for easy remote monitoring of Loop activities, troubleshooting of Loop errors, history of CGM, carbs, boluses, \n temp basals, reports to analyze data trends and patterns. There is a Nightscout app in your iPhone App Store, or you can use a web browser to view the data.  Setting up Nightscout is free and fairly quick.  Once setup, the site can be accessed by anyone that you share your unique Nightscout URL with.  \n\n\nNightscout is highly recommended for Loop users, especially those using Loop as caregivers to t1ds.  Nightscout displays are often the easiest way to troubleshoot Loop settings, if you are having problems and seeking input from others.  Below is some discussion about the general Nightscout display, as well as some Loop-specific display information.\n\n\n\n\n\n\n\n\n\n\n\n\n\nBlood Glucose\n\n\nYour blood glucose (BG) readings from your CGM are shown in green, yellow, or red in the main graph area of NS.  You can adjust your high and low BG targets in NS (when NS alerts will start for high/low BGs), but those will not affect your Loop performance.  Loop only uses the BG targets given in the Loop app settings.  The main screen of BGs is displaying the time duration you have selected (in the example above, 12 hours of BG history).  The bottom of the screen shows the last 48-hours of BG trends.  You can scan backwards by dragging the bottom timeline to the left, if you want to review specific Loop actions or data in the last two days. \n\n\n\n\nCarbs\n\n\nCarbs are automatically uploaded to NS by the Loop app.  The amount of carbs on board (active carbs or COB) can be seen by clicking the Loop pill.  The size of a white carb dot on the graph is proportional to the amount of carbs entered...bigger meals get bigger dots. Loop does not read carbs from NS for use in looping caluclations, it only uploads carbs to NS that have been entered in the Loop app.\n\n\n\n\nBoluses\n\n\nInsulin boluses are also automatically uploaded to NS by the Loop app.  The bolus is shown as a filled in blue lower-half of the dot, and the specific amount of the bolus is also shown.  There may be a slight delay between when the carbs for a meal are uploaded to NS to when the meal bolus appears.  This is because depending on the pump model and size of bolus, the bolus may take a few minutes to actually be given and then Loop has to perform a pump read to verify the reservoir volume has decreased (i.e., the bolus was given).  As shown in the example above, the meal carbs have been uploaded, but the bolus delivery is still in progress.  Insulin on board (active insulin or IOB) is also shown in the Loop pill.\n\n\n\n\nTemp Basals\n\n\nWithin your NS profile, you will enter in the scheduled basal for your t1d.  This is not automatically updated when you update the Loop app or your pump; you will have to manually update your basal profile in your NS site if you change your basal profile in Loop and/or pump.  If you don't update the NS basal profile, it doesn't cause any problems in Loop function...you simply won't have accurate VISUAL representation of high/low temp basals within NS. The dashed blue line represents the scheduled basal profile (as entered in your NS profile).  The solid blue lines indicate the actual basal amounts set for a given time...so as Loop sets temp basals higher or lower than your scheduled basal rate, the solid blue line will jump above or below your dashed blue line.  There is a slight delay (up to 2-5 minutes) in the rendering of basal changes on the blue lines, so if you want the accurate current basal rate, you can check the Loop pill.\n\n\n\n\nPredicted BG\n\n\nThe purple line to the right of the BG is Loop's predicted BG.  Watching the behavior of that purple line can help you understand why Loop is making decisions regarding high or low temps.  You can read more on that topic in the Algorithm section of these docs.\n\n\n\n\nLoop pill\n\n\nThe Loop pill is the little display box which when hovered over, or clicked, will provide additional information about recent Loop activities and status.  Information included is the last time Loop ran, the temp basal set, IOB, and COB.  Looking at the Loop pill is a quick method for assessing if you loop is currently active, as well.  The small symbols to the right of the word Loop have specific meaning.  The small horizontal lightning bolt, shown in this example, is an active loop which recently enacted a temp basal.  You can read the section on Troubleshooting using the Loop Pill for additional information about the various symbols.\n\n\n\n\nSAGE and CAGE pills\n\n\nThe SAGE and CAGE pills are for Sensor Age and Cannula Age.  These optional pills track the time since your CGM sensor and Pump site were last changed.  You can set up custom alerts to remind you when it is time to change the devices, or simply use the visuals to keep track of your particular timing for site/sensor changes.", 
            "title": "Overview"
        }, 
        {
            "location": "/nightscout/overview/#overview", 
            "text": "Nightscout (NS) is an excellent tool to remotely view Loop's actions.  It allows for easy remote monitoring of Loop activities, troubleshooting of Loop errors, history of CGM, carbs, boluses,   temp basals, reports to analyze data trends and patterns. There is a Nightscout app in your iPhone App Store, or you can use a web browser to view the data.  Setting up Nightscout is free and fairly quick.  Once setup, the site can be accessed by anyone that you share your unique Nightscout URL with.    Nightscout is highly recommended for Loop users, especially those using Loop as caregivers to t1ds.  Nightscout displays are often the easiest way to troubleshoot Loop settings, if you are having problems and seeking input from others.  Below is some discussion about the general Nightscout display, as well as some Loop-specific display information.       Blood Glucose  Your blood glucose (BG) readings from your CGM are shown in green, yellow, or red in the main graph area of NS.  You can adjust your high and low BG targets in NS (when NS alerts will start for high/low BGs), but those will not affect your Loop performance.  Loop only uses the BG targets given in the Loop app settings.  The main screen of BGs is displaying the time duration you have selected (in the example above, 12 hours of BG history).  The bottom of the screen shows the last 48-hours of BG trends.  You can scan backwards by dragging the bottom timeline to the left, if you want to review specific Loop actions or data in the last two days.    Carbs  Carbs are automatically uploaded to NS by the Loop app.  The amount of carbs on board (active carbs or COB) can be seen by clicking the Loop pill.  The size of a white carb dot on the graph is proportional to the amount of carbs entered...bigger meals get bigger dots. Loop does not read carbs from NS for use in looping caluclations, it only uploads carbs to NS that have been entered in the Loop app.   Boluses  Insulin boluses are also automatically uploaded to NS by the Loop app.  The bolus is shown as a filled in blue lower-half of the dot, and the specific amount of the bolus is also shown.  There may be a slight delay between when the carbs for a meal are uploaded to NS to when the meal bolus appears.  This is because depending on the pump model and size of bolus, the bolus may take a few minutes to actually be given and then Loop has to perform a pump read to verify the reservoir volume has decreased (i.e., the bolus was given).  As shown in the example above, the meal carbs have been uploaded, but the bolus delivery is still in progress.  Insulin on board (active insulin or IOB) is also shown in the Loop pill.   Temp Basals  Within your NS profile, you will enter in the scheduled basal for your t1d.  This is not automatically updated when you update the Loop app or your pump; you will have to manually update your basal profile in your NS site if you change your basal profile in Loop and/or pump.  If you don't update the NS basal profile, it doesn't cause any problems in Loop function...you simply won't have accurate VISUAL representation of high/low temp basals within NS. The dashed blue line represents the scheduled basal profile (as entered in your NS profile).  The solid blue lines indicate the actual basal amounts set for a given time...so as Loop sets temp basals higher or lower than your scheduled basal rate, the solid blue line will jump above or below your dashed blue line.  There is a slight delay (up to 2-5 minutes) in the rendering of basal changes on the blue lines, so if you want the accurate current basal rate, you can check the Loop pill.   Predicted BG  The purple line to the right of the BG is Loop's predicted BG.  Watching the behavior of that purple line can help you understand why Loop is making decisions regarding high or low temps.  You can read more on that topic in the Algorithm section of these docs.   Loop pill  The Loop pill is the little display box which when hovered over, or clicked, will provide additional information about recent Loop activities and status.  Information included is the last time Loop ran, the temp basal set, IOB, and COB.  Looking at the Loop pill is a quick method for assessing if you loop is currently active, as well.  The small symbols to the right of the word Loop have specific meaning.  The small horizontal lightning bolt, shown in this example, is an active loop which recently enacted a temp basal.  You can read the section on Troubleshooting using the Loop Pill for additional information about the various symbols.   SAGE and CAGE pills  The SAGE and CAGE pills are for Sensor Age and Cannula Age.  These optional pills track the time since your CGM sensor and Pump site were last changed.  You can set up custom alerts to remind you when it is time to change the devices, or simply use the visuals to keep track of your particular timing for site/sensor changes.", 
            "title": "Overview"
        }, 
        {
            "location": "/nightscout/new_user/", 
            "text": "New Nightscout Users\n\u2301\n\n\nTwo options exist for easy hosting of NS; Azure or Heroku. Both hosting services are free.  However,  Azure has data quotas monthly and shorter term CPU quotas.  If you exceed those quotas, you may be facing a monthly data-use bill or being locked out of NS for about 12 hours until the quotas reset.  As you start to use NS more intensively for alarms, pebble watches, etc\u2026it is possible that you may exceed your monthly data cap on Azure.  Many Loop users have transitioned their old sites from Azure over to Heroku and have found the hosting change to be beneficial.  Heroku also has some memory limits, but those limits have been more than adequate for Loop users.  Therefore, we recommend new users start with Heroku.\n\n\nHEROKU NIGHTSCOUT SET-UP\n\u2301\n\n\n\n\nCreate an account at \nHeroku\n and choose the Primary Development Language to be Node.js when you create your account.  You\u2019re going to use a free account, but you will still need to enter credit card information for your account setup.  Don\u2019t forget to check your email to confirm your Heroku account.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate an account at \nGitHub\n\n\n\n\n\n\nGo to the \nNightscout cgm-remote-monitor repository\n\n\n\n\n\n\nClick the \nFork\n button in the upper right corner\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nScroll down until you see the purple \nDeploy to Heroku\n button.  Click that button.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGive your app a name, this will be the prefix of your NS site\u2019s URL. For example, \nhttps://yourappname.herokuapp.com\n\n\n\n\n\n\nFill out the information lines in the \nConfig Variables\n Section of that page, as shown below.  Some of the lines can stay with the default entries already provided.\n\n\n\n\n\n\n\n\n\n\n\n\nKEY\n\n\nVALUE\n\n\n\n\n\n\n\n\n\n\nAPI_SECRET\n\n\nCreate your own API_SECRET\u2026this is like the password to your NS site.  Please write it down somewhere safe or commit it to memory, you will be using it in the future.  It needs to be at least 12 characters long and should NOT use the `@` symbol.\n\n\n\n\n\n\nDISPLAY_UNITS\n\n\nenter either mg/dl or mmol\n\n\n\n\n\n\nENABLE\n\n\nbridge loop pump iob cob basal careportal sage cage\n(Enter all of the words without commas.  Just a single space between each word. Make sure autocorrect does not add space between careportal)\n\n\n\n\n\n\nDISABLE\n\n\nLeave blank\n\n\n\n\n\n\nALARM_TYPES\n\n\nsimple\n\n\n\n\n\n\nBG_HIGH\n\n\nEnter the numeric value of BG you\u2019d like as an urgent high alarm.\n\n\n\n\n\n\nBG_TARGET_TOP\n\n\nEnter the numeric value of the top of your target BG.\n\n\n\n\n\n\nBG_TARGET_BOTTOM\n\n\nEnter the numeric value of the bottom of your target BG.\n\n\n\n\n\n\nBG_LOW\n\n\nEnter the numeric value of the BG you\u2019d like as an urgent low alarm.\n\n\n\n\n\n\nPUSHOVER lines\n\n\nCan be left blank for now.   See PUSHOVER section if you want to integrate PUSHOVER notifications with NS later.\n\n\n\n\n\n\nCUSTOM_TITLE\n\n\nThis will be the text displayed in the upper left part of the NS website.\n\n\n\n\n\n\nTHEME\n\n\nchange from default to colors\n\n\n\n\n\n\nBRIDGE_USER_NAME\n\n\nEnter your Dexcom Share Account login name.  This should be the same account name used in the Share2 or G5 Mobile app.\n\n\n\n\n\n\nBRIDGE_PASSWORD\n\n\nEnter your Dexcom Share Account password.\n\n\n\n\n\n\nBG_TARGET TOP\n\n\nEnter the numeric value of the top of your target BG.\n\n\n\n\n\n\nBG_TARGET_BOTTOM\n\n\nEnter the numeric value of the bottom of your target BG.\n\n\n\n\n\n\n\n\n\nThe remaining variables can be left at their default values.\n\n\n\n\nClick the purple \nDeploy\n button at the bottom of screen\n\n\n\n\n\n\n\n\n\n\n\n\n\nWait a little bit while Heroku builds your NS app.  You\u2019ll see some text scroll by in the Build App box, and then finally, you will have a message that the NS app was successfully deployed.\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou can verify your site\u2019s successful build by clicking \nView\n (you should see black site with a profile warning).  You will be redirected to a profile set-up page.  (If it doesn't redirect automatically, refresh your webpage).  \n\n\n\n\n\n\n\n\n\n\n\nYou do not have to enter all the information in the profile if you are using Loop (since Loop will be providing the information for IOB and COB rather than letting NS calculate them), but you do have to fill out the \nBasal Profile\n and \nTimeZone\n at a minimum in order to have your temp basals properly display.  Click \nSave\n when you have entered the information.  You will be prompted to authenticate, if it is the first time you\u2019ve used the device to make changes in your profile.  Click on the \nAuthenticate\n link at the bottom of the site, and enter your API_SECRET to complete the authentication.\n\n\n\n\n\n\n\n\n\n\n\nAssuming your previous browser tab is still open for \"Create a new App | Heroku\", let's go back to that tab.  This time instead of choosing the \nView\n option, we are going to select the \nManage App\n button. Then, select the \nSettings\n tab near the top of the screen on your Heroku app.\n\n\n\n\n\n\n\n\n\n\n\n\n\nClick on \nReveal Config  Vars\n. Scroll down the bottom of the Config Vars lines until you find the last blank one.  You are going to add several additional lines of config vars for Loop use; the DEVICESTATUS_ADVANCED is a required line, the others just make Nightscout more useful when Looping.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKEY\n\n\nVALUE\n\n\n\n\n\n\n\n\n\n\nDEVICESTATUS_ADVANCED\n\n\ntrue\n\n\n\n\n\n\nPUMP_FIELDS\n\n\nbattery reservoir clock status\n\n\n\n\n\n\nPUMP_RETRO_FIELDS\n\n\nbattery reservoir clock status\n\n\n\n\n\n\nSHOW_FORECAST\n\n\nloop\n\n\n\n\n\n\nSHOW_PLUGINS\n\n\nloop pump cob iob sage cage careportal\n\n\n\n\n\n\nPUMP_ENABLE_ALERTS\n\n\ntrue\n\n\n\n\n\n\nPUMP_URGENT_BATT_P\n\n\n30\n(This is the pump battery percentage that will trigger a red, urgent alert in NS.)\n\n\n\n\n\n\nPUMP_URGENT_BATT_V\n\n\n1.25\n(This is the pump battery voltage that will trigger a red, urgent alert in NS.)\n\n\n\n\n\n\nPUMP_URGENT_RES\n\n\n10\n(This is the reservoir volume that will trigger a red, urgent alert in NS.)\n\n\n\n\n\n\nPUMP_URGENT_CLOCK\n\n\n30\n\n\n\n\n\n\nLOOP_ENABLE_ALERTS\n\n\ntrue\n\n\n\n\n\n\nLOOP_WARN\n\n\n20\n(This is the minutes since Loop last successfully looped, the t1d will have a similar notification at this time through the Loop app.  This will be a yellow alert in NS.)\n\n\n\n\n\n\nLOOP_URGENT\n\n\n60\n(Same as the alert above, but will be red in color and have a shorter snooze option.)\n\n\n\n\n\n\n\n\n\n\n\nIf you are using Dexcom Share outside the United States, you will need to add one additional variable.\n\n\n\n\n\n\n\n\n\nKEY\n\n\nVALUE\n\n\n\n\n\n\n\n\n\n\nBRIDGE_SERVER\n\n\nEU\n\n\n\n\n\n\n\n\n\n\n\n\nClick on \nOpen App\n in the top right corner of your Heroku site.\n\n\n\n\n\n\n\n\n\n\n\n\n\nClick on the settings (those three horizontal lines in upper right corner).  Now check that your basal render is selected to either default or icicle (personal preference for how the temp basals show as blue lines in NS site), check the boxes that you\u2019d like display pills in the SHOW PLUGINS (usually all of them), and then press save. Your NIGHTSCOUT site is all set-up.  Congrats!\n\n\n\n\n\n\n\n\n\n\n\n\n\nTroubleshooting Tip\n\n\nIf you are using Dexcom Share, don't forget to turn on \"Sharing\" toggle in the G5 app (or Share in the G4 receiver) and have a follower (even if it's yourself)...otherwise Nightscout won't get your BG data through the bridge.\n\n\n\n\n\n\n\n\n\n\n\nEVENT HISTORY\n\u2301\n\n\nDon't forget to keep you Loop App's Preferred Source set to \nEvent History\n if you want your NS site to smoothly integrate.  Preferred Source set to \nReservoir\n will result in carbs not being uploaded and temp basals not being displayed.", 
            "title": "Setup New Site"
        }, 
        {
            "location": "/nightscout/new_user/#new-nightscout-users", 
            "text": "Two options exist for easy hosting of NS; Azure or Heroku. Both hosting services are free.  However,  Azure has data quotas monthly and shorter term CPU quotas.  If you exceed those quotas, you may be facing a monthly data-use bill or being locked out of NS for about 12 hours until the quotas reset.  As you start to use NS more intensively for alarms, pebble watches, etc\u2026it is possible that you may exceed your monthly data cap on Azure.  Many Loop users have transitioned their old sites from Azure over to Heroku and have found the hosting change to be beneficial.  Heroku also has some memory limits, but those limits have been more than adequate for Loop users.  Therefore, we recommend new users start with Heroku.", 
            "title": "New Nightscout Users"
        }, 
        {
            "location": "/nightscout/new_user/#heroku-nightscout-set-up", 
            "text": "Create an account at  Heroku  and choose the Primary Development Language to be Node.js when you create your account.  You\u2019re going to use a free account, but you will still need to enter credit card information for your account setup.  Don\u2019t forget to check your email to confirm your Heroku account.        Create an account at  GitHub    Go to the  Nightscout cgm-remote-monitor repository    Click the  Fork  button in the upper right corner        Scroll down until you see the purple  Deploy to Heroku  button.  Click that button.        Give your app a name, this will be the prefix of your NS site\u2019s URL. For example,  https://yourappname.herokuapp.com    Fill out the information lines in the  Config Variables  Section of that page, as shown below.  Some of the lines can stay with the default entries already provided.       KEY  VALUE      API_SECRET  Create your own API_SECRET\u2026this is like the password to your NS site.  Please write it down somewhere safe or commit it to memory, you will be using it in the future.  It needs to be at least 12 characters long and should NOT use the `@` symbol.    DISPLAY_UNITS  enter either mg/dl or mmol    ENABLE  bridge loop pump iob cob basal careportal sage cage (Enter all of the words without commas.  Just a single space between each word. Make sure autocorrect does not add space between careportal)    DISABLE  Leave blank    ALARM_TYPES  simple    BG_HIGH  Enter the numeric value of BG you\u2019d like as an urgent high alarm.    BG_TARGET_TOP  Enter the numeric value of the top of your target BG.    BG_TARGET_BOTTOM  Enter the numeric value of the bottom of your target BG.    BG_LOW  Enter the numeric value of the BG you\u2019d like as an urgent low alarm.    PUSHOVER lines  Can be left blank for now.   See PUSHOVER section if you want to integrate PUSHOVER notifications with NS later.    CUSTOM_TITLE  This will be the text displayed in the upper left part of the NS website.    THEME  change from default to colors    BRIDGE_USER_NAME  Enter your Dexcom Share Account login name.  This should be the same account name used in the Share2 or G5 Mobile app.    BRIDGE_PASSWORD  Enter your Dexcom Share Account password.    BG_TARGET TOP  Enter the numeric value of the top of your target BG.    BG_TARGET_BOTTOM  Enter the numeric value of the bottom of your target BG.     The remaining variables can be left at their default values.   Click the purple  Deploy  button at the bottom of screen       Wait a little bit while Heroku builds your NS app.  You\u2019ll see some text scroll by in the Build App box, and then finally, you will have a message that the NS app was successfully deployed.       You can verify your site\u2019s successful build by clicking  View  (you should see black site with a profile warning).  You will be redirected to a profile set-up page.  (If it doesn't redirect automatically, refresh your webpage).        You do not have to enter all the information in the profile if you are using Loop (since Loop will be providing the information for IOB and COB rather than letting NS calculate them), but you do have to fill out the  Basal Profile  and  TimeZone  at a minimum in order to have your temp basals properly display.  Click  Save  when you have entered the information.  You will be prompted to authenticate, if it is the first time you\u2019ve used the device to make changes in your profile.  Click on the  Authenticate  link at the bottom of the site, and enter your API_SECRET to complete the authentication.      Assuming your previous browser tab is still open for \"Create a new App | Heroku\", let's go back to that tab.  This time instead of choosing the  View  option, we are going to select the  Manage App  button. Then, select the  Settings  tab near the top of the screen on your Heroku app.       Click on  Reveal Config  Vars . Scroll down the bottom of the Config Vars lines until you find the last blank one.  You are going to add several additional lines of config vars for Loop use; the DEVICESTATUS_ADVANCED is a required line, the others just make Nightscout more useful when Looping.         KEY  VALUE      DEVICESTATUS_ADVANCED  true    PUMP_FIELDS  battery reservoir clock status    PUMP_RETRO_FIELDS  battery reservoir clock status    SHOW_FORECAST  loop    SHOW_PLUGINS  loop pump cob iob sage cage careportal    PUMP_ENABLE_ALERTS  true    PUMP_URGENT_BATT_P  30 (This is the pump battery percentage that will trigger a red, urgent alert in NS.)    PUMP_URGENT_BATT_V  1.25 (This is the pump battery voltage that will trigger a red, urgent alert in NS.)    PUMP_URGENT_RES  10 (This is the reservoir volume that will trigger a red, urgent alert in NS.)    PUMP_URGENT_CLOCK  30    LOOP_ENABLE_ALERTS  true    LOOP_WARN  20 (This is the minutes since Loop last successfully looped, the t1d will have a similar notification at this time through the Loop app.  This will be a yellow alert in NS.)    LOOP_URGENT  60 (Same as the alert above, but will be red in color and have a shorter snooze option.)      If you are using Dexcom Share outside the United States, you will need to add one additional variable.     KEY  VALUE      BRIDGE_SERVER  EU       Click on  Open App  in the top right corner of your Heroku site.       Click on the settings (those three horizontal lines in upper right corner).  Now check that your basal render is selected to either default or icicle (personal preference for how the temp basals show as blue lines in NS site), check the boxes that you\u2019d like display pills in the SHOW PLUGINS (usually all of them), and then press save. Your NIGHTSCOUT site is all set-up.  Congrats!       Troubleshooting Tip  If you are using Dexcom Share, don't forget to turn on \"Sharing\" toggle in the G5 app (or Share in the G4 receiver) and have a follower (even if it's yourself)...otherwise Nightscout won't get your BG data through the bridge.", 
            "title": "HEROKU NIGHTSCOUT SET-UP"
        }, 
        {
            "location": "/nightscout/new_user/#event-history", 
            "text": "Don't forget to keep you Loop App's Preferred Source set to  Event History  if you want your NS site to smoothly integrate.  Preferred Source set to  Reservoir  will result in carbs not being uploaded and temp basals not being displayed.", 
            "title": "EVENT HISTORY"
        }, 
        {
            "location": "/nightscout/update_user/", 
            "text": "UPDATING NIGHTSCOUT SITE\n\u2301\n\n\nIf you are new to Loop and haven\u2019t updated your NS site since before December 1, 2016, you will want to update your NS site.  You can run either the \"master\" or \"dev\" branches of cgm-remote-monitor with Loop.  To check what version your Nightscout site is running, go to your Nightscout site and pull open the site settings by clicking on the three horizontal lines at the top right of the screen.  Scroll down and see if you are running 0.9.2-dev-20161201 or newer for \"dev\" branch.  Notice the \u201cdev\u201d branch is date stamped 0.9.x-dev-YYYMMDD; or you\u2019ll see version 0.9.2 for \"master\" branch deployments.\n\n\nIf you are a current NS user and simply want to update your site, this procedure will work as well.\n\n\nUpdating your repository in GitHub\n\u2301\n\n\n\n\nCopy, paste, and goto the one of the following links depending on which branch of cgm-remote-monitor you are currently running (replace \nyourgithubname\n with your actual GitHub user name)\n\n\n\n\nfor master branch deployments:\n\n\nhttps://github.com/yourgithubname/cgm-remote-monitor/compare/master...nightscout:master\n\n\nFor dev branch deployments:\n\n\nhttps://github.com/yourgithubname/cgm-remote-monitor/compare/dev...nightscout:dev\n\n\n\n\n\n\n\n\n\n\n\nClick the big green \nCreate pull request\n button. Another screen will appear, fill in a title and click button to create the pull request, and then you can \nMerge pull request\n, and finally \nConfirm merge\n.\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\nYour cgm-remote-monitor repository is now up-to-date.  Nice work.\n\n\n\n\n\n\nIf you don\u2019t have your Heroku set-up to automatically update when your repository is updated, you may have to go into your Heroku \nDeploy\n section and manually deploy your branch now that your repository has been updated.  Make sure you are connected to your GitHub cgm-remote-monitor repository.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNew Loopers Variables\n\u2301\n\n\nFor new Loopers (but old Nightscout users), you will need to add some variables to your Heroku site to Loop.  \n\n\n\n\nLogin to your Heroku site, select the \nSettings\n tab near the top of the screen on your Heroku app.\n\n\n\n\n\n\n\n\n\n\n\n\n\nClick on \nReveal Config  Vars\n.  Scroll down the bottom of the Config Vars lines until you find the last blank one.  You are going to add several additional lines of config vars for Loop use; the DEVICESTATUS_ADVANCED and ENABLE lines are required, the others just make Nightscout more useful when Looping.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKEY\n\n\nVALUE\n\n\n\n\n\n\n\n\n\n\nENABLE\n\n\nbridge loop pump iob cob basal careportal sage cage\n(Double check that you have at least these words on your ENABLE line.  Enter all of the words without commas; just a single space between each word. Make sure autocorrect does not add space between careportal.)\n\n\n\n\n\n\nDEVICESTATUS_ADVANCED\n\n\ntrue\n\n\n\n\n\n\nPUMP_FIELDS\n\n\nbattery reservoir clock status\n\n\n\n\n\n\nPUMP_RETRO_FIELDS\n\n\nbattery reservoir clock status\n\n\n\n\n\n\nSHOW_FORECAST\n\n\nloop\n\n\n\n\n\n\nSHOW_PLUGINS\n\n\nloop pump cob iob sage cage careportal\n\n\n\n\n\n\nPUMP_ENABLE_ALERTS\n\n\ntrue\n\n\n\n\n\n\nPUMP_URGENT_BATT_U\n\n\n30\n(This is the pump battery percentage that will trigger a red, urgent alert in NS.)\n\n\n\n\n\n\nPUMP_URGENT_BATT_V\n\n\n1.25\n(This is the pump battery voltage that will trigger a red, urgent alert in NS.)\n\n\n\n\n\n\nPUMP_URGENT_RES\n\n\n10\n(This is the reservoir volume that will trigger a red, urgent alert in NS.)\n\n\n\n\n\n\nPUMP_URGENT_CLOCK\n\n\n30\n\n\n\n\n\n\nLOOP_ENABLE_ALERTS\n\n\ntrue\n\n\n\n\n\n\nLOOP_WARN\n\n\n20\n(This is the minutes since Loop last successfully looped, the t1d will have a similar notification at this time through the Loop app.  This will be a yellow alert in NS.)\n\n\n\n\n\n\nLOOP_URGENT\n\n\n60\n(Same as the alert above, but will be red in color and have a shorter snooze option.)\n\n\n\n\n\n\n\n\n\n\n\nClick on \nOpen App\n in the top right corner of your Heroku site.\n\n\n\n\n\n\n\n\n\n\n\n\n\nClick on the settings (those three horizontal lines in upper right corner).  Now check that your basal render is selected to either default or icicle (personal preference for how the temp basals show as blue lines in NS site), check the boxes that you\u2019d like display pills in the SHOW PLUGINS (usually all of them), and then press save.  Your NIGHTSCOUT site is all set-up.  Congrats!\n\n\n\n\n\n\n\n\n\n\n\n\n\nDouble check that your NS Profile settings are current and that you have a basal profile entered, if you want to see the temp basals that Loop is setting.\n\n\n\n\nEVENT HISTORY\n\u2301\n\n\nDon't forget to keep you Loop App's Preferred Source set to \nEvent History\n if you want your NS site to smoothly integrate.  Preferred Source set to \nReservoir\n will result in carbs not being uploaded and temp basals not being displayed.", 
            "title": "Update Site"
        }, 
        {
            "location": "/nightscout/update_user/#updating-nightscout-site", 
            "text": "If you are new to Loop and haven\u2019t updated your NS site since before December 1, 2016, you will want to update your NS site.  You can run either the \"master\" or \"dev\" branches of cgm-remote-monitor with Loop.  To check what version your Nightscout site is running, go to your Nightscout site and pull open the site settings by clicking on the three horizontal lines at the top right of the screen.  Scroll down and see if you are running 0.9.2-dev-20161201 or newer for \"dev\" branch.  Notice the \u201cdev\u201d branch is date stamped 0.9.x-dev-YYYMMDD; or you\u2019ll see version 0.9.2 for \"master\" branch deployments.  If you are a current NS user and simply want to update your site, this procedure will work as well.", 
            "title": "UPDATING NIGHTSCOUT SITE"
        }, 
        {
            "location": "/nightscout/update_user/#updating-your-repository-in-github", 
            "text": "Copy, paste, and goto the one of the following links depending on which branch of cgm-remote-monitor you are currently running (replace  yourgithubname  with your actual GitHub user name)   for master branch deployments:  https://github.com/yourgithubname/cgm-remote-monitor/compare/master...nightscout:master  For dev branch deployments:  https://github.com/yourgithubname/cgm-remote-monitor/compare/dev...nightscout:dev      Click the big green  Create pull request  button. Another screen will appear, fill in a title and click button to create the pull request, and then you can  Merge pull request , and finally  Confirm merge .                        Your cgm-remote-monitor repository is now up-to-date.  Nice work.    If you don\u2019t have your Heroku set-up to automatically update when your repository is updated, you may have to go into your Heroku  Deploy  section and manually deploy your branch now that your repository has been updated.  Make sure you are connected to your GitHub cgm-remote-monitor repository.", 
            "title": "Updating your repository in GitHub"
        }, 
        {
            "location": "/nightscout/update_user/#new-loopers-variables", 
            "text": "For new Loopers (but old Nightscout users), you will need to add some variables to your Heroku site to Loop.     Login to your Heroku site, select the  Settings  tab near the top of the screen on your Heroku app.       Click on  Reveal Config  Vars .  Scroll down the bottom of the Config Vars lines until you find the last blank one.  You are going to add several additional lines of config vars for Loop use; the DEVICESTATUS_ADVANCED and ENABLE lines are required, the others just make Nightscout more useful when Looping.         KEY  VALUE      ENABLE  bridge loop pump iob cob basal careportal sage cage (Double check that you have at least these words on your ENABLE line.  Enter all of the words without commas; just a single space between each word. Make sure autocorrect does not add space between careportal.)    DEVICESTATUS_ADVANCED  true    PUMP_FIELDS  battery reservoir clock status    PUMP_RETRO_FIELDS  battery reservoir clock status    SHOW_FORECAST  loop    SHOW_PLUGINS  loop pump cob iob sage cage careportal    PUMP_ENABLE_ALERTS  true    PUMP_URGENT_BATT_U  30 (This is the pump battery percentage that will trigger a red, urgent alert in NS.)    PUMP_URGENT_BATT_V  1.25 (This is the pump battery voltage that will trigger a red, urgent alert in NS.)    PUMP_URGENT_RES  10 (This is the reservoir volume that will trigger a red, urgent alert in NS.)    PUMP_URGENT_CLOCK  30    LOOP_ENABLE_ALERTS  true    LOOP_WARN  20 (This is the minutes since Loop last successfully looped, the t1d will have a similar notification at this time through the Loop app.  This will be a yellow alert in NS.)    LOOP_URGENT  60 (Same as the alert above, but will be red in color and have a shorter snooze option.)      Click on  Open App  in the top right corner of your Heroku site.       Click on the settings (those three horizontal lines in upper right corner).  Now check that your basal render is selected to either default or icicle (personal preference for how the temp basals show as blue lines in NS site), check the boxes that you\u2019d like display pills in the SHOW PLUGINS (usually all of them), and then press save.  Your NIGHTSCOUT site is all set-up.  Congrats!       Double check that your NS Profile settings are current and that you have a basal profile entered, if you want to see the temp basals that Loop is setting.", 
            "title": "New Loopers Variables"
        }, 
        {
            "location": "/nightscout/update_user/#event-history", 
            "text": "Don't forget to keep you Loop App's Preferred Source set to  Event History  if you want your NS site to smoothly integrate.  Preferred Source set to  Reservoir  will result in carbs not being uploaded and temp basals not being displayed.", 
            "title": "EVENT HISTORY"
        }, 
        {
            "location": "/nightscout/azure_migration/", 
            "text": "Migrating from Azure to Heroku\n\u2301\n\n\nIf you are a current Azure user who wants to move to Heroku, but not lose all your old NS data, you will need do the following steps:\n\n\n\n\nupdate your repository in GitHub\n\n\ncreate a new heroku nightscout site\n\n\nmigrate your mLab database to new site\n\n\n\n\nUpdating your repository in GitHub\n\u2301\n\n\n\n\nCopy, paste, and goto the one of the following links depending on which branch of cgm-remote-monitor you are currently running (replace \nyourgithubname\n with your actual GitHub user name)\n\n\n\n\nfor \nmaster\n branch deployments:\n\n\nhttps://github.com/yourgithubname/cgm-remote-monitor/compare/master...nightscout:master\n\n\nFor \ndev\n branch deployments:\n\n\nhttps://github.com/yourgithubname/cgm-remote-monitor/compare/dev...nightscout:dev\n\n\n\n\n\n\n\n\n\n\n\nClick the big green \nCreate pull request\n button. Another screen will appear, fill in a title and click button to create the pull request, and then you can \nMerge pull request\n, and finally \nConfirm merge\n.\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\nYour cgm-remote-monitor repository is now up-to-date.  Nice work.\n\n\n\n\nHeroku Nightscout Site Setup\n\u2301\n\n\n\n\nCreate an account at \nHeroku\n and choose the Primary Development Language to be Node.js when you create your account.  You\u2019re going to use a free account, but you will still need to enter credit card information for your account setup.  Don\u2019t forget to check your email to confirm your Heroku account.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGo to your Nightscout cgm-remote-monitor repository in GitHub (https://github.com/yourGitHubname/cgm-remote-monitor)\n\n\n\n\n\n\nScroll down until you see the purple \nDeploy to Heroku\n button.  Click that button.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGive your app a name, this will be the prefix of your NS site\u2019s URL. For example, \nhttps://yourappname.herokuapp.com\n\n\n\n\n\n\nFill out the information lines in the \nConfig Variables\n Section of that page, as shown below.  Some of the lines can stay with the default entries already provided.\n\n\n\n\n\n\n\n\n\n\n\n\nKEY\n\n\nVALUE\n\n\n\n\n\n\n\n\n\n\nAPI_SECRET\n\n\nCreate your own API_SECRET\u2026this is like the password to your NS site.  Please write it down somewhere safe or commit it to memory, you will be using it in the future.  It needs to be at least 12 characters long and should NOT use the `@` symbol.\n\n\n\n\n\n\nDISPLAY_UNITS\n\n\nenter either mg/dl or mmol\n\n\n\n\n\n\nENABLE\n\n\nbridge loop pump iob cob basal careportal sage cage\n(Enter all of the words without commas.  Just a single space between each word. Make sure autocorrect does not add space between careportal)\n\n\n\n\n\n\nDISABLE\n\n\nLeave blank\n\n\n\n\n\n\nALARM_TYPES\n\n\nsimple\n\n\n\n\n\n\nBG_HIGH\n\n\nEnter the numeric value of BG you\u2019d like as an urgent high alarm.\n\n\n\n\n\n\nBG_TARGET_TOP\n\n\nEnter the numeric value of the top of your target BG.\n\n\n\n\n\n\nBG_TARGET_BOTTOM\n\n\nEnter the numeric value of the bottom of your target BG.\n\n\n\n\n\n\nBG_LOW\n\n\nEnter the numeric value of the BG you\u2019d like as an urgent low alarm.\n\n\n\n\n\n\nPUSHOVER lines\n\n\nCan be left blank for now.   See PUSHOVER section if you want to integrate PUSHOVER notifications with NS later.\n\n\n\n\n\n\nCUSTOM_TITLE\n\n\nThis will be the text displayed in the upper left part of the NS website.\n\n\n\n\n\n\nTHEME\n\n\nchange from default to colors\n\n\n\n\n\n\nBRIDGE_USER_NAME\n\n\nEnter your Dexcom Share Account login name.  This should be the same account name used in the Share2 or G5 Mobile app.\n\n\n\n\n\n\nBRIDGE_PASSWORD\n\n\nEnter your Dexcom Share Account password.\n\n\n\n\n\n\nBG_TARGET TOP\n\n\nEnter the numeric value of the top of your target BG.\n\n\n\n\n\n\nBG_TARGET_BOTTOM\n\n\nEnter the numeric value of the bottom of your target BG.\n\n\n\n\n\n\n\n\n\nThe remaining variables can be left at their default values.\n\n\n\n\nClick the purple \nDeploy\n button at the bottom of screen\n\n\n\n\n\n\n\n\n\n\n\n\n\nWait a little bit while Heroku builds your NS app.  You\u2019ll see some text scroll by in the Build App box, and then finally, you will have a message that the NS app was successfully deployed.\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou can verify your site\u2019s successful build by clicking \nView\n (you should see black site with a profile warning).  You will be redirected to a profile set-up page.  (If it doesn't redirect automatically, refresh your webpage).  \n\n\n\n\n\n\n\n\n\n\n\nYou do not have to enter all the information in the profile if you are using Loop (since Loop will be providing the information for IOB and COB rather than letting NS calculate them), but you do have to fill out the \nBasal Profile\n and \nTimeZone\n at a minimum in order to have your temp basals properly display.  Click \nSave\n when you have entered the information.  You will be prompted to authenticate, if it is the first time you\u2019ve used the device to make changes in your profile.  Click on the \nAuthenticate\n link at the bottom of the site, and enter your API_SECRET to complete the authentication.\n\n\n\n\n\n\n\n\n\n\n\nAssuming your previous browser tab is still open for \"Create a new App | Heroku\", let's go back to that tab.  This time instead of choosing the \nView\n option, we are going to select the \nManage App\n button. Then, select the \nSettings\n tab near the top of the screen on your Heroku app.\n\n\n\n\n\n\n\n\n\n\n\n\n\nClick on \nReveal Config  Vars\n. Scroll down the bottom of the Config Vars lines until you find the last blank one.  You are going to add several additional lines of config vars for Loop use; the DEVICESTATUS_ADVANCED is a required line, the others just make Nightscout more useful when Looping.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKEY\n\n\nVALUE\n\n\n\n\n\n\n\n\n\n\nDEVICESTATUS_ADVANCED\n\n\ntrue\n\n\n\n\n\n\nPUMP_FIELDS\n\n\nbattery reservoir clock status\n\n\n\n\n\n\nPUMP_RETRO_FIELDS\n\n\nbattery reservoir clock status\n\n\n\n\n\n\nSHOW_FORECAST\n\n\nloop\n\n\n\n\n\n\nSHOW_PLUGINS\n\n\nloop pump cob iob sage cage careportal\n\n\n\n\n\n\nPUMP_ENABLE_ALERTS\n\n\ntrue\n\n\n\n\n\n\nPUMP_URGENT_BATT_U\n\n\n30\n(This is the pump battery percentage that will trigger a red, urgent alert in NS.)\n\n\n\n\n\n\nPUMP_URGENT_BATT_V\n\n\n1.25\n(This is the pump battery voltage that will trigger a red, urgent alert in NS.)\n\n\n\n\n\n\nPUMP_URGENT_RES\n\n\n10\n(This is the reservoir volume that will trigger a red, urgent alert in NS.)\n\n\n\n\n\n\nPUMP_URGENT_CLOCK\n\n\n30\n\n\n\n\n\n\nLOOP_ENABLE_ALERTS\n\n\ntrue\n\n\n\n\n\n\nLOOP_WARN\n\n\n20\n(This is the minutes since Loop last successfully looped, the t1d will have a similar notification at this time through the Loop app.  This will be a yellow alert in NS.)\n\n\n\n\n\n\nLOOP_URGENT\n\n\n60\n(Same as the alert above, but will be red in color and have a shorter snooze option.)\n\n\n\n\n\n\n\n\n\nThe remaining variables can be left at their default values.\n\n\n\n\nClick on \nOpen App\n in the top right corner of your Heroku site.\n\n\n\n\n\n\n\n\n\n\n\n\n\nClick on the settings (those three horizontal lines in upper right corner).  Now check that your basal render is selected to either default or icicle (personal preference for how the temp basals show as blue lines in NS site), check the boxes that you\u2019d like display pills in the SHOW PLUGINS (usually all of them), and then press save. Your new Nightscout site is all set-up.  Congrats!\n\n\n\n\n\n\n\n\n\n\n\nMigrate mLab database\n\u2301\n\n\nIf you\u2019d like to seamlessly keep all your old Azure NS data showing in your new Heroku NS site, you\u2019ll need to copy and paste your old \nMONGODB\n string from your Azure site.  Find it in either Application Settings or Connection strings in your Azure control panel and then go to Heroku\u2019s \nMONGODB_URI\n line.  Replace the content with your copied string from Azure.  Double check that your Azure collection used the \u201centries\u201d name\u2026if it doesn\u2019t, then you will need to update that variable in Heroku to match as well.\n\n\n\n\n\n\n\n\n\nEVENT HISTORY\n\u2301\n\n\nDon't forget to keep you Loop App's Preferred Source set to \nEvent History\n if you want your NS site to smoothly integrate.  Preferred Source set to \nReservoir\n will result in carbs not being uploaded and temp basals not being displayed.", 
            "title": "Azure to Heroku"
        }, 
        {
            "location": "/nightscout/azure_migration/#migrating-from-azure-to-heroku", 
            "text": "If you are a current Azure user who wants to move to Heroku, but not lose all your old NS data, you will need do the following steps:   update your repository in GitHub  create a new heroku nightscout site  migrate your mLab database to new site", 
            "title": "Migrating from Azure to Heroku"
        }, 
        {
            "location": "/nightscout/azure_migration/#updating-your-repository-in-github", 
            "text": "Copy, paste, and goto the one of the following links depending on which branch of cgm-remote-monitor you are currently running (replace  yourgithubname  with your actual GitHub user name)   for  master  branch deployments:  https://github.com/yourgithubname/cgm-remote-monitor/compare/master...nightscout:master  For  dev  branch deployments:  https://github.com/yourgithubname/cgm-remote-monitor/compare/dev...nightscout:dev      Click the big green  Create pull request  button. Another screen will appear, fill in a title and click button to create the pull request, and then you can  Merge pull request , and finally  Confirm merge .                       Your cgm-remote-monitor repository is now up-to-date.  Nice work.", 
            "title": "Updating your repository in GitHub"
        }, 
        {
            "location": "/nightscout/azure_migration/#heroku-nightscout-site-setup", 
            "text": "Create an account at  Heroku  and choose the Primary Development Language to be Node.js when you create your account.  You\u2019re going to use a free account, but you will still need to enter credit card information for your account setup.  Don\u2019t forget to check your email to confirm your Heroku account.        Go to your Nightscout cgm-remote-monitor repository in GitHub (https://github.com/yourGitHubname/cgm-remote-monitor)    Scroll down until you see the purple  Deploy to Heroku  button.  Click that button.         Give your app a name, this will be the prefix of your NS site\u2019s URL. For example,  https://yourappname.herokuapp.com    Fill out the information lines in the  Config Variables  Section of that page, as shown below.  Some of the lines can stay with the default entries already provided.       KEY  VALUE      API_SECRET  Create your own API_SECRET\u2026this is like the password to your NS site.  Please write it down somewhere safe or commit it to memory, you will be using it in the future.  It needs to be at least 12 characters long and should NOT use the `@` symbol.    DISPLAY_UNITS  enter either mg/dl or mmol    ENABLE  bridge loop pump iob cob basal careportal sage cage (Enter all of the words without commas.  Just a single space between each word. Make sure autocorrect does not add space between careportal)    DISABLE  Leave blank    ALARM_TYPES  simple    BG_HIGH  Enter the numeric value of BG you\u2019d like as an urgent high alarm.    BG_TARGET_TOP  Enter the numeric value of the top of your target BG.    BG_TARGET_BOTTOM  Enter the numeric value of the bottom of your target BG.    BG_LOW  Enter the numeric value of the BG you\u2019d like as an urgent low alarm.    PUSHOVER lines  Can be left blank for now.   See PUSHOVER section if you want to integrate PUSHOVER notifications with NS later.    CUSTOM_TITLE  This will be the text displayed in the upper left part of the NS website.    THEME  change from default to colors    BRIDGE_USER_NAME  Enter your Dexcom Share Account login name.  This should be the same account name used in the Share2 or G5 Mobile app.    BRIDGE_PASSWORD  Enter your Dexcom Share Account password.    BG_TARGET TOP  Enter the numeric value of the top of your target BG.    BG_TARGET_BOTTOM  Enter the numeric value of the bottom of your target BG.     The remaining variables can be left at their default values.   Click the purple  Deploy  button at the bottom of screen       Wait a little bit while Heroku builds your NS app.  You\u2019ll see some text scroll by in the Build App box, and then finally, you will have a message that the NS app was successfully deployed.       You can verify your site\u2019s successful build by clicking  View  (you should see black site with a profile warning).  You will be redirected to a profile set-up page.  (If it doesn't redirect automatically, refresh your webpage).        You do not have to enter all the information in the profile if you are using Loop (since Loop will be providing the information for IOB and COB rather than letting NS calculate them), but you do have to fill out the  Basal Profile  and  TimeZone  at a minimum in order to have your temp basals properly display.  Click  Save  when you have entered the information.  You will be prompted to authenticate, if it is the first time you\u2019ve used the device to make changes in your profile.  Click on the  Authenticate  link at the bottom of the site, and enter your API_SECRET to complete the authentication.      Assuming your previous browser tab is still open for \"Create a new App | Heroku\", let's go back to that tab.  This time instead of choosing the  View  option, we are going to select the  Manage App  button. Then, select the  Settings  tab near the top of the screen on your Heroku app.       Click on  Reveal Config  Vars . Scroll down the bottom of the Config Vars lines until you find the last blank one.  You are going to add several additional lines of config vars for Loop use; the DEVICESTATUS_ADVANCED is a required line, the others just make Nightscout more useful when Looping.         KEY  VALUE      DEVICESTATUS_ADVANCED  true    PUMP_FIELDS  battery reservoir clock status    PUMP_RETRO_FIELDS  battery reservoir clock status    SHOW_FORECAST  loop    SHOW_PLUGINS  loop pump cob iob sage cage careportal    PUMP_ENABLE_ALERTS  true    PUMP_URGENT_BATT_U  30 (This is the pump battery percentage that will trigger a red, urgent alert in NS.)    PUMP_URGENT_BATT_V  1.25 (This is the pump battery voltage that will trigger a red, urgent alert in NS.)    PUMP_URGENT_RES  10 (This is the reservoir volume that will trigger a red, urgent alert in NS.)    PUMP_URGENT_CLOCK  30    LOOP_ENABLE_ALERTS  true    LOOP_WARN  20 (This is the minutes since Loop last successfully looped, the t1d will have a similar notification at this time through the Loop app.  This will be a yellow alert in NS.)    LOOP_URGENT  60 (Same as the alert above, but will be red in color and have a shorter snooze option.)     The remaining variables can be left at their default values.   Click on  Open App  in the top right corner of your Heroku site.       Click on the settings (those three horizontal lines in upper right corner).  Now check that your basal render is selected to either default or icicle (personal preference for how the temp basals show as blue lines in NS site), check the boxes that you\u2019d like display pills in the SHOW PLUGINS (usually all of them), and then press save. Your new Nightscout site is all set-up.  Congrats!", 
            "title": "Heroku Nightscout Site Setup"
        }, 
        {
            "location": "/nightscout/azure_migration/#migrate-mlab-database", 
            "text": "If you\u2019d like to seamlessly keep all your old Azure NS data showing in your new Heroku NS site, you\u2019ll need to copy and paste your old  MONGODB  string from your Azure site.  Find it in either Application Settings or Connection strings in your Azure control panel and then go to Heroku\u2019s  MONGODB_URI  line.  Replace the content with your copied string from Azure.  Double check that your Azure collection used the \u201centries\u201d name\u2026if it doesn\u2019t, then you will need to update that variable in Heroku to match as well.", 
            "title": "Migrate mLab database"
        }, 
        {
            "location": "/nightscout/azure_migration/#event-history", 
            "text": "Don't forget to keep you Loop App's Preferred Source set to  Event History  if you want your NS site to smoothly integrate.  Preferred Source set to  Reservoir  will result in carbs not being uploaded and temp basals not being displayed.", 
            "title": "EVENT HISTORY"
        }, 
        {
            "location": "/nightscout/loop_pill/", 
            "text": "Loop Pill in Nightscout \n \n\u2301\n\n\nThe Loop pill in Nightscout provides Loop status at a glance, including how many minutes ago the status was received.\n\n\nStatus Indicator\n\u2301\n\n\nA small icon in the middle of the pill indicates the latest known status.\n\n\n\n\nStatus indicator symbols\n\n\nX\n \n\nError in Loop\n\n\n\u03d5\n \n\nRecommending basal, but not enacting (open loop or pump suspended)\n\n\n\u2301\n \n\nEnacted a new temp basal\n\n\n\u21bb\n \n\nLoop is continuing with last temp basal, no change\n\n\n\u26a0\n \n\nWarning (Loop has not completed since since the time set on your LOOP_WARN setting in NS)\n\n\n\n\nStatus Information\n\u2301\n\n\nMouseover or Touch the Loop pill to view a tool tip containing one or more of the latest status messages. The most up-to-date NS also includes information in the Loop pill for the minimum and maximum predicted BG, eventual predicted BG, BLE comms strength, and pump comms strength (for x23 and x54 model users).\n\n\n\n\nTroubleshooting Loop\n\u2301\n\n\nIf you are getting unexpected status, review the Troubleshooting pages. To find a specific error message, search the site for all or part of the message.", 
            "title": "Loop Pill"
        }, 
        {
            "location": "/nightscout/loop_pill/#loop-pill-in-nightscout", 
            "text": "The Loop pill in Nightscout provides Loop status at a glance, including how many minutes ago the status was received.", 
            "title": "Loop Pill in Nightscout &nbsp; "
        }, 
        {
            "location": "/nightscout/loop_pill/#status-indicator", 
            "text": "A small icon in the middle of the pill indicates the latest known status.   Status indicator symbols  X   \nError in Loop  \u03d5   \nRecommending basal, but not enacting (open loop or pump suspended)  \u2301   \nEnacted a new temp basal  \u21bb   \nLoop is continuing with last temp basal, no change  \u26a0   \nWarning (Loop has not completed since since the time set on your LOOP_WARN setting in NS)", 
            "title": "Status Indicator"
        }, 
        {
            "location": "/nightscout/loop_pill/#status-information", 
            "text": "Mouseover or Touch the Loop pill to view a tool tip containing one or more of the latest status messages. The most up-to-date NS also includes information in the Loop pill for the minimum and maximum predicted BG, eventual predicted BG, BLE comms strength, and pump comms strength (for x23 and x54 model users).", 
            "title": "Status Information"
        }, 
        {
            "location": "/nightscout/loop_pill/#troubleshooting-loop", 
            "text": "If you are getting unexpected status, review the Troubleshooting pages. To find a specific error message, search the site for all or part of the message.", 
            "title": "Troubleshooting Loop"
        }, 
        {
            "location": "/nightscout/ifttt/", 
            "text": "IFTTT Integration\n\u2301\n\n\nIf This, Then That (IFTTT) is a useful Nightscout integration.  By using IFTTT, you can have single button presses that you can deploy from your iPhone to put a note in your NS site, enter low treatments, log a site change, or log a sensor change. \n\n\nIFTTT Setup for phones\n\u2301\n\n\n\n\nFirst we need to gather one thing called your \"hashed API Secret\". In your internet browser, open a console window while viewing your Nightscout site.  Make sure you have \"authenticated\" your site by using your API secret in the Nightscout settings area (hint: if you see a little padlock in the upper left corner of the site, you haven't authenticated it).  Refresh the site and your hashed secret key will be shown as \"apisecrethash: \"xxxxxxxxxx...\"\"  For Safari users on Mac, you can open the console window by selecting \"Develop\" from the Safari top menu, and then \"Show Page Source\" (if you do not see \"Develop\" in the top menu, activate it by going to Safari \n Preferences... \n Advanced, and checking the \"Show Develop menu in menu bar\" option).  If you're having problems seeing the apisecrethash, click the little grey triangle next to the \"status isAuthenticated\" line and the objects below it will display (see screenshot).  Your hashed API secret can be copied and pasted from that line, as shown below.  Save that somewhere easy to get to again, because you will be using it later.\n\n\n\n\n\n\n\n\n\n\n\n\n\nGet an \nIFTTT account\n \n\n\n\n\n\n\n\n\n\n\n\n\n\nLogin to your IFTTT.com account and select the \"New Applet\" button.\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the screen that appears, click on the blue \"+this\" part of the screen\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the next screen, type \"button\" in the search field and then click on the red box labelled \"ButtonWidget\"\n\n\n\n\n\n\n\n\n\n\n\n\n\nConnect the buttonwidget by clicking on the large red \"connect\" button (You will only have to \"connect\" the widgets for the first applet you make.  After that the widgets will already connected to your IFTTT account.)\n\n\n\n\n\n\n\n\n\n\n\n\n\nClick on the large red \"button press\" box \n\n\n\n\n\n\n\n\n\n\n\n\n\nClick on the blue \"+that\" text\n\n\n\n\n\n\n\n\n\n\n\n\n\nEnter \"Webhooks\" in the search field and click on the Webhooks app\n\n\n\n\n\n\n\n\n\n\n\n\n\nConnect the Webhooks app\n\n\n\n\n\n\n\n\n\n\n\n\n\nSelect the blue \"Make a Web Request\" box\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow you will have a blank web request template to complete.  Screenshot below is an example of a completed recipe for eating soon IFTTT action.\n\n\n\n\n\n\n\n\n\n\n\nThe following info should be filled in:\n\n\nURL\n:\n https://yoursite.herokuapp.com/api/v1/treatments.json (\nchange the \"yoursite\" part to your NS info\n)\n\n\nMethod\n:\n POST\n\n\nContent Type\n:\n application/json\n\n\nBody\n:\n  The content of the body will depend on the action that you would like this particular button press to perform.  You can only do ONE of the actions per button.  There are many recipes available, but not all will work with Loop and NS together.  For example, you can use the Low Treatment recipe to log carbs to NS...but Loop will not read/use those carbs.  That may still be helpful though for remote care givers to leave an indication of when they gave uncovered carbs to treat a low.  You could also set temp targets in NS using IFTTT (recipes can be found on OpenAPS docs), but Loop does not read temp targets from Nightscout at this time.  Some sample content for actions that may be useful in Loop:\n\n\n\n\nPump Site Change\n\n\n{\"enteredBy\": \"IFTTT-button\", \"eventType\": \"Site Change\", \"duration\": 0, \"secret\": \"your_hashed_api_goes_here!!!\"}\n\n\n\n\n\n\nCGM Sensor Start\n\n\n{\"enteredBy\": \"IFTTT-button\", \"eventType\": \"Sensor Start\", \"duration\": 0, \"secret\": \"your_hashed_api_goes_here!!!\"}\n\n\n\n\n\n\nNote\n\n\n{\"enteredBy\": \"IFTTT-button\", \"eventType\": \"Note\", \"notes\": \"Hi mom, please don't text me for a bit.  I'm taking a test.\", \"secret\": \"your_hashed_api_goes_here!!!\"}\n\n\n\n\n\n\nLow Treatment\n\n\n{\"enteredBy\": \"IFTTT-button\", \"reason\": \"low treatment\", \"carbs\": 15, \"secret\": \"your_hashed_api_goes_here!!!\"}\n\n\n\n\n\n\n\n\nClick the \nCreate Action\n button on the bottom of the screen when you finish.\n\n\n\n\n\n\nNow is your chance to change the title of your Applet now to something meaningful.  You can turn on notifications, too, using the slider shown.  If you turn on the notifications, you will get an alert on your phone and pebble watch when the button press has been successfully deployed.  Finish the IFTTT button by clicking on the Finish button that appears.  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRepeat the setup for New Applets for as many automated actions as you would like to setup.\n\n\n\n\n\n\n\n\n\n\n\nEnable IFTTT in your Nightscout site\n\u2301\n\n\n\n\nFind your Maker Key by going to your IFTTT account, Services and then click on the Webhooks service, settings.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\nYou will see your Maker Key as the last part of the URL; copy and paste that last part (the red circled part as shown)\n\n\n\n\n\n\n\n\n\n\n\n\n\nLogin to your Nightscout site host (azure or heroku) and (1) add your Maker Key to the MAKER_KEY line and (2) add \"maker\" to your ENABLE line.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInstall IFTTT app on your iPhone/Android\n\u2301\n\n\n\n\n\n\nDownload the IFTTT app on your phone and log in.\n\n\n\n\n\n\nYou can add homescreen quick buttons.  Click on your IFTTT app and login, click on My Applets in the bottom right corner, and then click on the applet that you'd like to work with.  From the the middle of the applet, click on the Widget Settings, and then click on the Add button for the Homescreen Icon.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFor iPhone users, if you downswipe from the top of your iPhone screen, you will have the Today view or Notifications showing.  They are separate pages; Today view is on the left, Notifications is on the right.  You can left/right swipe to go between them.  Go into the Today view and scroll to the bottom, click \"edit\". This should show a list of existing widgets, followed by a list of \"more widgets\" with green + signs.  Click on the IFTTT's green circle and the widget will be moved to the top, active widgets area.  You can hold your finger on the three left lines of the IFTTT widget row to drag it to the top of your widget panel, if you prefer to have it as the top-most widget. \n\n\n\n\n\n\n\n\n\n\n\nIf you end up with more than four IFTTT applets, they will appear in reverse-order of when they were created...which may not be the same as you'd prefer them to appear on your widget bar.  If you'd like to reorder them:\n\n\n\n\ngo into your iPhone's IFTTT app\n\n\nclick on My Applets\n\n\nclick on the gear icon in upper left of screen\n\n\nclick on Widgets\n\n\nclick on the pencil icon in upper right of screen\n\n\nclick and hold the three lines that appear on the right side of the widget that you want to move.  Drag the widget to the order in the list that you'd like it to appear in your widget quickscreen.\n\n\n\n\n\n\n\n\n\n\n\nAlexa integration\n\u2301\n\n\n\n\nSince you have IFTTT/Maker requests working, you can get it to work with anything that supports IFTTT, including Alexa. You will need to add \"alexa\" to your ENABLE line in your Nightscout host settings (azure) or config vars (heroku).  And then repeat the steps above, but instead of using \"ButtonWidget\" service we started with earlier (the \"+if\" part of the setup)...you will use the \"AmazonAlexa\" service.\n\n\n\n\n\n\n\n\n\n\n\n\n\nAlexa requests do not need underscores, FYI.", 
            "title": "IFTTT"
        }, 
        {
            "location": "/nightscout/ifttt/#ifttt-integration", 
            "text": "If This, Then That (IFTTT) is a useful Nightscout integration.  By using IFTTT, you can have single button presses that you can deploy from your iPhone to put a note in your NS site, enter low treatments, log a site change, or log a sensor change.", 
            "title": "IFTTT Integration"
        }, 
        {
            "location": "/nightscout/ifttt/#ifttt-setup-for-phones", 
            "text": "First we need to gather one thing called your \"hashed API Secret\". In your internet browser, open a console window while viewing your Nightscout site.  Make sure you have \"authenticated\" your site by using your API secret in the Nightscout settings area (hint: if you see a little padlock in the upper left corner of the site, you haven't authenticated it).  Refresh the site and your hashed secret key will be shown as \"apisecrethash: \"xxxxxxxxxx...\"\"  For Safari users on Mac, you can open the console window by selecting \"Develop\" from the Safari top menu, and then \"Show Page Source\" (if you do not see \"Develop\" in the top menu, activate it by going to Safari   Preferences...   Advanced, and checking the \"Show Develop menu in menu bar\" option).  If you're having problems seeing the apisecrethash, click the little grey triangle next to the \"status isAuthenticated\" line and the objects below it will display (see screenshot).  Your hashed API secret can be copied and pasted from that line, as shown below.  Save that somewhere easy to get to again, because you will be using it later.       Get an  IFTTT account         Login to your IFTTT.com account and select the \"New Applet\" button.       In the screen that appears, click on the blue \"+this\" part of the screen       In the next screen, type \"button\" in the search field and then click on the red box labelled \"ButtonWidget\"       Connect the buttonwidget by clicking on the large red \"connect\" button (You will only have to \"connect\" the widgets for the first applet you make.  After that the widgets will already connected to your IFTTT account.)       Click on the large red \"button press\" box        Click on the blue \"+that\" text       Enter \"Webhooks\" in the search field and click on the Webhooks app       Connect the Webhooks app       Select the blue \"Make a Web Request\" box       Now you will have a blank web request template to complete.  Screenshot below is an example of a completed recipe for eating soon IFTTT action.      The following info should be filled in:  URL :  https://yoursite.herokuapp.com/api/v1/treatments.json ( change the \"yoursite\" part to your NS info )  Method :  POST  Content Type :  application/json  Body :   The content of the body will depend on the action that you would like this particular button press to perform.  You can only do ONE of the actions per button.  There are many recipes available, but not all will work with Loop and NS together.  For example, you can use the Low Treatment recipe to log carbs to NS...but Loop will not read/use those carbs.  That may still be helpful though for remote care givers to leave an indication of when they gave uncovered carbs to treat a low.  You could also set temp targets in NS using IFTTT (recipes can be found on OpenAPS docs), but Loop does not read temp targets from Nightscout at this time.  Some sample content for actions that may be useful in Loop:   Pump Site Change  {\"enteredBy\": \"IFTTT-button\", \"eventType\": \"Site Change\", \"duration\": 0, \"secret\": \"your_hashed_api_goes_here!!!\"}    CGM Sensor Start  {\"enteredBy\": \"IFTTT-button\", \"eventType\": \"Sensor Start\", \"duration\": 0, \"secret\": \"your_hashed_api_goes_here!!!\"}    Note  {\"enteredBy\": \"IFTTT-button\", \"eventType\": \"Note\", \"notes\": \"Hi mom, please don't text me for a bit.  I'm taking a test.\", \"secret\": \"your_hashed_api_goes_here!!!\"}    Low Treatment  {\"enteredBy\": \"IFTTT-button\", \"reason\": \"low treatment\", \"carbs\": 15, \"secret\": \"your_hashed_api_goes_here!!!\"}     Click the  Create Action  button on the bottom of the screen when you finish.    Now is your chance to change the title of your Applet now to something meaningful.  You can turn on notifications, too, using the slider shown.  If you turn on the notifications, you will get an alert on your phone and pebble watch when the button press has been successfully deployed.  Finish the IFTTT button by clicking on the Finish button that appears.          Repeat the setup for New Applets for as many automated actions as you would like to setup.", 
            "title": "IFTTT Setup for phones"
        }, 
        {
            "location": "/nightscout/ifttt/#enable-ifttt-in-your-nightscout-site", 
            "text": "Find your Maker Key by going to your IFTTT account, Services and then click on the Webhooks service, settings.             You will see your Maker Key as the last part of the URL; copy and paste that last part (the red circled part as shown)       Login to your Nightscout site host (azure or heroku) and (1) add your Maker Key to the MAKER_KEY line and (2) add \"maker\" to your ENABLE line.", 
            "title": "Enable IFTTT in your Nightscout site"
        }, 
        {
            "location": "/nightscout/ifttt/#install-ifttt-app-on-your-iphoneandroid", 
            "text": "Download the IFTTT app on your phone and log in.    You can add homescreen quick buttons.  Click on your IFTTT app and login, click on My Applets in the bottom right corner, and then click on the applet that you'd like to work with.  From the the middle of the applet, click on the Widget Settings, and then click on the Add button for the Homescreen Icon.        For iPhone users, if you downswipe from the top of your iPhone screen, you will have the Today view or Notifications showing.  They are separate pages; Today view is on the left, Notifications is on the right.  You can left/right swipe to go between them.  Go into the Today view and scroll to the bottom, click \"edit\". This should show a list of existing widgets, followed by a list of \"more widgets\" with green + signs.  Click on the IFTTT's green circle and the widget will be moved to the top, active widgets area.  You can hold your finger on the three left lines of the IFTTT widget row to drag it to the top of your widget panel, if you prefer to have it as the top-most widget.       If you end up with more than four IFTTT applets, they will appear in reverse-order of when they were created...which may not be the same as you'd prefer them to appear on your widget bar.  If you'd like to reorder them:   go into your iPhone's IFTTT app  click on My Applets  click on the gear icon in upper left of screen  click on Widgets  click on the pencil icon in upper right of screen  click and hold the three lines that appear on the right side of the widget that you want to move.  Drag the widget to the order in the list that you'd like it to appear in your widget quickscreen.", 
            "title": "Install IFTTT app on your iPhone/Android"
        }, 
        {
            "location": "/nightscout/ifttt/#alexa-integration", 
            "text": "Since you have IFTTT/Maker requests working, you can get it to work with anything that supports IFTTT, including Alexa. You will need to add \"alexa\" to your ENABLE line in your Nightscout host settings (azure) or config vars (heroku).  And then repeat the steps above, but instead of using \"ButtonWidget\" service we started with earlier (the \"+if\" part of the setup)...you will use the \"AmazonAlexa\" service.       Alexa requests do not need underscores, FYI.", 
            "title": "Alexa integration"
        }, 
        {
            "location": "/nightscout/pebble/", 
            "text": "Pebble Watchface\n\u2301\n\n\nThe Pebble Watchface called \nSkyLoop Predict\n can be used with either Loop or OpenAPS systems.  You will need to have a Nightscout website setup and integrated in order for the watchface to work.  Simply use your Pebble app to search for the watchface and install it.  In the watchface settings, enter your Nightscout URL in the Data Endpoint field, select Loop for the system, and enter \niob\n in the T1 Name field.  By entering \niob\n, the watchface will display the iob on the watchface.  In addition to the information dispalyed on the main watchface screen, shaking your wrist will bring up information about the pump battery and reservoir levels.", 
            "title": "Pebble"
        }, 
        {
            "location": "/nightscout/pebble/#pebble-watchface", 
            "text": "The Pebble Watchface called  SkyLoop Predict  can be used with either Loop or OpenAPS systems.  You will need to have a Nightscout website setup and integrated in order for the watchface to work.  Simply use your Pebble app to search for the watchface and install it.  In the watchface settings, enter your Nightscout URL in the Data Endpoint field, select Loop for the system, and enter  iob  in the T1 Name field.  By entering  iob , the watchface will display the iob on the watchface.  In addition to the information dispalyed on the main watchface screen, shaking your wrist will bring up information about the pump battery and reservoir levels.", 
            "title": "Pebble Watchface"
        }, 
        {
            "location": "/nightscout/pushover/", 
            "text": "Remote notifications\n\u2301\n\n\nWhile Loop app currently sends notifications locally on Loop user's iPhone, parents and caregivers likely want those messages on their phones, too.  We can achieve this functionality through a combination of Nightscout, IFTTT, Google, and Pushover.\n\n\nTraditionally, most people may already know of Pushover alerts through their NS site.  The old Loop docs had setup for how to add your \nPUSHOVER_ANNOUNCEMENT_KEY\n , \nPUSHOVER_API_TOKEN\n, and \nPUSHOVER_USER_KEY\n in your Heroku settings to get notifications on the non-looping phones of parents and caregivers.  The drawback for that method is that you could not necessarily fine tune the alerts (maybe you wanted battery alarms on your NS website, but not get pushovers for them...a bit hard to separate out the environments that way) and Pushover had a demanding acknowledgement requirement.  If you failed to acknowledge an alert, you may end up getting alarm fatigue fairly quickly as the alarm repeated itself.\n\n\nUsing Pushover \nTHROUGH\n IFTTT however, we can improve the possible notifications and who receives which ones.  For example, a teenage Looper may want notifications when his/her pump site needs changing and when his/her dexcom is about to expire in the next day.  S/he already gets local notifications on his/her phone via Loop for low reservoir volumes, low pump battery, and Loop failures.  Dexcom app provides high/low BG notifications locally, too.  If s/he were to get those same alarms via Pushover, s/he would inevitably get alarm fatigue.  A remotely-monitoring parent may want additional information, like a pushover alerts when the school nurse bolused for lunch, as well as Loop failures, low iPhone battery level for the child, low pump battery, and other such information that might be useful.  Perhaps there's also an emergency contact person that you only want to get high/low BG alerts...you can set that up as well quite easily.\n\n\nThe basic concept is that NS puts out an event that triggers the IFTTT service called Webhooks (old name was \"Maker Webhooks\" hence you may see references to \"maker\" in NS docs).  Actually, there are several types of events that NS has programmed in all ready to use in IFTTT.\n\n\n\n\n\n\n\n\n\nFor this setup, we are going to use the most general logging event called \nns-event\n.  You'll get all the alarms and notifications logged, and then you can decide in subsequent steps which ones you'd actually like to send to your phone for pushover notification.\n\n\nAs a brief roadmap for what we are going to do:\n\n\n\n\nGet necessary accounts setup\n\n\nAdd a folder to your Google Drive\n\n\nMake an IFTTT applet to log NS events to your Google Spreadsheets\n\n\nEnable NS to work with that new IFTTT applet\n\n\nMake an IFTTT applet to send Pushover alert when the Google Spreadsheet is updated\n\n\n\n\nGet Prepped\n\u2301\n\n\nIf you don't already have these steps done, you will need them.  Skip any that you already have done.\n\n\n\n\nSetup a Nightscout site\n\n\nGet an \nIFTTT account\n\n\nGet a \nPushover Account\n\n\nGet a \nGoogle Account\n\n\nDownload the Pushover app onto your phone, and any other phone you'd like to receive Pushover alerts\n\n\nDownload the IFTTT app onto your phone, and any other phone you'd like to use IFTTT applets on\n\n\nLogin to the Pushover and IFTTT apps with your login information\n\n\n\n\nAdd a Google Drive folder\n\u2301\n\n\n\n\nLogin to your Google account and select Google Drive\n\n\n\n\n\n\n\n\n\n\n\n\n\nClick on the blue \"New\" button and create a new folder named IFTTT.\n\n\n\n\n\n\n\n\n\n\n\n\n\nDouble click on the newly created IFTTT folder, select the blue \"New\" button again, and create a new subfolder called \"Nightscout-Alarms\"\n\n\n\n\n\n\n\n\n\n\n\nThis IFTTT/Nightscout-Alarms folder will eventually contain numerous Google Spreadsheets, one for each NS alarm or infomation that is logged.  As new alarms are triggered, the IFTTT applet we are about to write will add a row to the appropriate spreadsheet logging the time of the alarm and any other reported details that go with the entry.  For now though, your drive will be blank...screenshot below just to give you an idea of where we are going.\n\n\n\n\n\n\n\n\n\nMake 1st IFTTT Applet to Log NS Alarms\n\u2301\n\n\n\n\nLogin to your IFTTT.com account and select the \"New Applet\" button.\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the screen that appears, click on the blue \"+this\" part of the screen\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the next screen, type \"webhooks\" in the search field and then click on the blue connect button\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf this is the first time you are using IFTTT Webhooks service, you will have a \"Connect\" button to select.  If you already have IFTTT applets using Webhooks, you won't see this screen...just move to the next bullet.\n\n\n\n\n\n\n\n\n\n\n\n\n\nClick on the \"receive a web request\" blue box, and then fill in the Event Name as \nns-event\n and then press the \"Create trigger\" button.  (Side note:  the event name used here corresponds to the triggers discussed above for core events that NS already has integrated for IFTTT users.  If you want to instead use the other triggers such as ns-warn or ns-urgent, you can.  This example is using the most general trigger so that the options are wider for most users.)\n\n\n\n\n\n\n\n\n\n\n\n\n\nClick on the blue \"+that\" text\n\n\n\n\n\n\n\n\n\n\n\n\n\nEnter \ngoogle\n in the search field and click on the Google Sheets icon\n\n\n\n\n\n\n\n\n\n\n\n\n\nSelect the green \"Add row to spreadsheet\" box\n\n\n\n\n\n\n\n\n\n\n\n\n\nDelete the contents of the \"Spreadsheet Name\" and \"Drive folder path\".  For the \"Spreadsheet Name\", click the \"Add Ingredient\" button and select the \"Value1\".  For the \"Drive folder path\", enter \nIFTTT/Nightscout-Alarms\n.  You do not have to modify the \"Formatted row\" box's contents.  Click the \"Create action\" button at the bottom.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTurn off the toggle for receiving notifications when the applet runs, and then click the Finish button\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou'll now have the finished IFTTT applet that will cause a row to be added to a Google spreadsheet...tracking all your NS notifications and alarms.  If it is the first time that alarm has been logged, the applet will also create the spreadsheet itself.  After awhile, your IFTTT/Nightscout-Alarms folder will start to look like the screenshot posted above with numerous spreadsheets for each alarm type.\n\n\n\n\n\n\n\n\n\n\n\nEnable IFTTT Webhooks in your Nightscout site\n\u2301\n\n\n\n\nIf you already have created IFTTT buttons previously to work with your NS site, you can skip this section.  If those buttons are working, then you've already added your MAKER_KEY and \"maker\" to your ENABLE line in Heroku.\n\n\n\n\n\n\nTo actually make that first applet work, we need to enter a \"Maker Key\" to get NS and IFTTT talking to each other.  Find your Maker Key by going to your IFTTT account, Services and then clicking on Webhooks.  (Your screen may not have as many services showing; the example account below just happens to already use several services.)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou will see your Maker Key as the last part of the URL; copy that last part (the red circled part)\n\n\n\n\n\n\n\n\n\n\n\n\n\nNavigate to your Heroku account's settings tab, \"reveal config vars\" and (1) add your Maker Key to the MAKER_KEY line and (2) add \"maker\" to your ENABLE line.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMake 2nd IFTTT Applet to send Pushover notifications\n\u2301\n\n\n\n\nIn your IFTTT account, select the \"New Applet\" button.\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the screen that appears, click on the blue \"+this\" part of the screen\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the next screen, type \"google\" in the search field and then click on the \"Google Sheets\" logo.\n\n\n\n\n\n\n\n\n\n\n\n\n\nClick on the \"New row added to spreadsheet\" as the trigger.\n\n\n\n\n\n\n\n\n\n\n\n\n\nEnter the following information:  Folder path is \nIFTTT/Nightscout-Alarms\n and for filename you are going to enter the name of the particular NS alarm or information that you would like to get pushover alerts for.  Click on the \"Create trigger\" button to save the trigger.\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis applet can't be created unless your filename (alarm spreadsheet) already exists.  If your 1st applet we created above hasn't run for a long time, the spreadsheets may not exist yet because the alarms haven't triggered.  You have two options...(1) manually create the file in your Google Drive so that you can finish the applet now or (2) wait several days/weeks for the alarms to happen and that will automatically create the files in your Google drive.\n\nIf you choose option 1, here's a partial list of some of the filenames you could create in advance:\n\n\n\n\nLoop isn't looping\n\n\nCannula age 48 hours\n\n\nCannula age 72 hours\n\n\nMeal Bolus\n\n\nWarning, Pump Reservoir Low\n\n\nWarning Uploader Battery is Low\n\n\n\n\nDepending on your alert levels you specified in NS, some of the hours in the titles may vary to match your settings\n\n\n\n\n\n\nClick on the blue \"+that\" text\n\n\n\n\n\n\n\n\n\n\n\n\n\nEnter \npushover\n in the search field and click on the Pushover icon.  If this is your first time linking your IFTTT to Pushover, you will be prompted to enter your Pushover account login and allow IFTTT access.  This only needs to be done once.\n\n\n\n\n\n\n\n\n\n\n\n\n\nSelect the \"Send a Pushover notification\" box\n\n\n\n\n\n\n\n\n\n\n\n\n\nDelete the contents of the \"Title\" and \"Message\" and \"URL\" boxes.  For the Title, click the \"Add Ingredient\" button and add \nColumnC\n.  For the \"Message\", click the \"Add Ingredient\" button and add the values of various columns from your spreadsheet for the infomation you would like to include.  For the alerts: \nColumnC\n contains the alarm name, \nColumnA\n is the date/time of the alarm, and \nColumnD\n has the more detailed information about the info/alarm.  This is a pretty decent recipe to follow to get the useful information in your notification.\n\n\n\n\n\n\n\n\n\n\n\n\n\nSelect the \"Message Priority\" that you would like for this particular alarm type.\n\n\n\n\n\n\n\n\n\n\n\n\n\nSelect the \"Device\" that you would like to receive this particular alarm type.  The devices listed will be all your devices that have Pushover app installed and logged into.  Click \"Create Action\" when you are finished.\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou'll now have made the IFTTT applet that will cause a Pushover notification to a particular device for a particular NS alarm, once the first applet records the alarm in the google spreadsheet.  Keep the \"receive notification when this Applet runs\" toggled off and click the Finish button.\n\n\n\n\n\n\n\n\n\n\n\nRevisit Nightscout Alert Levels\n\u2301\n\n\nPutting all these notifications together may cause you to want to revisit the alert levels you have set in your Heroku settings.  Here's a short summary of NS for the looping-related alerts (Note: the last row, Upbat, is the Looping iPhone battery level for Loop users; or the rig's battery level for OpenAPS users.)  If you'd like some of these alarms for your site and don't currently have them activated (they are all off by default unless specifically turned on), the lines you'd need to add are in the last column.  If you like the default values of the WARN and/or URGENT, you don't have to add those extra lines...just the line to enable the alerts will be sufficient.\n\n\n\n\n\n\n\n\nSETTING\n\n\nDEFAULT\nWARN\n\n\nDEFAULT\nURGENT\n\n\nHEROKU\nSETTINGS\n\n\n\n\n\n\n\n\n\n\nCAGE\n\n\n48\n\n\n72\n\n\nCAGE_ENABLE_ALERTS = true\nCAGE_WARN=XX\nCAGE_URGENT=XX\n\n\n\n\n\n\nSAGE\n\n\n164\n\n\n168\n\n\nSAGE_ENABLE_ALERTS = true\nSAGE_WARN=XX\nSAGE_URGENT=XX\n\n\n\n\n\n\nIAGE\n\n\n48\n\n\n72\n\n\nIAGE_ENABLE_ALERTS = true\nIAGE_WARN=XX\nIAGE_URGENT=XX\n\n\n\n\n\n\nLOOP\n\n\n30\n\n\n60\n\n\nLOOP_ENABLE_ALERTS = true\nLOOP_WARN=XX\nLOOP_URGENT=XX\n\n\n\n\n\n\nOPENAPS\n\n\n30\n\n\n60\n\n\nOPENAPS_ENABLE_ALERTS = true\nOPENAPS_WARN=XX\nOPENAPS_URGENT=XX\n\n\n\n\n\n\nPUMP_CLOCK\n\n\n30\n\n\n60\n\n\nPUMP_ENABLE_ALERTS = true\nPUMP_WARN_CLOCK=XX\nPUMP_URGENT_CLOCK=XX\n\n\n\n\n\n\nPUMP_RES\n\n\n10\n\n\n5\n\n\nPUMP_ENABLE_ALERTS = true\nPUMP_WARN_RES=XX\nPUMP_URGENT_RES=XX\n\n\n\n\n\n\nPUMP_BATT_P\n\n\n30\n\n\n20\n\n\nPUMP_ENABLE_ALERTS = true\nPUMP_WARN_BATT_P=XX\nPUMP_URGENT_BATT_P=XX\n\n\n\n\n\n\nPUMP_BATT_V\n\n\n1.35\n\n\n1.30\n\n\nPUMP_ENABLE_ALERTS = true\nPUMP_WARN_BATT_V=XX\nPUMP_URGENT_BATT_V=XX\n\n\n\n\n\n\nUPBAT\n\n\n30\n\n\n20\n\n\nUPBAT_ENABLE_ALERTS = true\nUPBAT_WARN=XX\nUPBAT_URGENT=XX\n\n\n\n\n\n\n\n\n\nFinal notes\n\u2301\n\n\n\n\n\n\nYou can use other notification services than Pushover in the last part of the second applet.  For example, you could use the SMS service to send text notifications to your iphone instead of Pushover.  The downside for that is that the SMS service is limited to 100 message each month...some users may exceed that pretty easily.  Another alternative notification would be IFTTT's own Notification service.  This would work well, but does not have the ability to distinguish between devices the way Pushover allows.  If you use IFTTT's Notifications service, every phone using your IFTTT account will get the notices.\n\n\n\n\n\n\nTo be clear, you do \nNOT\n need to have pushover on your ENABLE line nor have \nPUSHOVER_USER_KEY\n, \nPUSHOVER_API_TOKEN\n, or \nPUSHOVER_ANNOUNCEMENT_KEY\n entered into your Heroku settings in order for any of the above to work.  This is not the same Pushover as NS has integrated into it's code.  This is actually through IFTTT services, you just need a Pushover account to link to during the 2nd applet setup.\n\n\n\n\n\n\nTo create more notifications, simply repeat the steps for the 2nd applet you created, only this time use a new filename that corresponds to the spreadsheet tracking the alert you'd like notifications for.  You'll end up with multiple applets of the dark blue type (the pushover notifiers) and only a single light blue (NS alarm general collecter).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHere's examples of the Meal Bolus and Temp Basal ns-event logging spreadsheets\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe 1st applet can only create up to 2000 active rows in a given spreadsheet.  After that, the applet will automatically create a new spreadsheet.  For most alarms, it may take quite sometime to reach 2000 rows of info.  For other alerts, such as temp basals being set, that may fill up rather fast for the average looper.  You can either clean out the data rows periodically to make room, or update your filename in the 2nd applet periodically when a new spreadsheet is made.", 
            "title": "Remote Notifications"
        }, 
        {
            "location": "/nightscout/pushover/#remote-notifications", 
            "text": "While Loop app currently sends notifications locally on Loop user's iPhone, parents and caregivers likely want those messages on their phones, too.  We can achieve this functionality through a combination of Nightscout, IFTTT, Google, and Pushover.  Traditionally, most people may already know of Pushover alerts through their NS site.  The old Loop docs had setup for how to add your  PUSHOVER_ANNOUNCEMENT_KEY  ,  PUSHOVER_API_TOKEN , and  PUSHOVER_USER_KEY  in your Heroku settings to get notifications on the non-looping phones of parents and caregivers.  The drawback for that method is that you could not necessarily fine tune the alerts (maybe you wanted battery alarms on your NS website, but not get pushovers for them...a bit hard to separate out the environments that way) and Pushover had a demanding acknowledgement requirement.  If you failed to acknowledge an alert, you may end up getting alarm fatigue fairly quickly as the alarm repeated itself.  Using Pushover  THROUGH  IFTTT however, we can improve the possible notifications and who receives which ones.  For example, a teenage Looper may want notifications when his/her pump site needs changing and when his/her dexcom is about to expire in the next day.  S/he already gets local notifications on his/her phone via Loop for low reservoir volumes, low pump battery, and Loop failures.  Dexcom app provides high/low BG notifications locally, too.  If s/he were to get those same alarms via Pushover, s/he would inevitably get alarm fatigue.  A remotely-monitoring parent may want additional information, like a pushover alerts when the school nurse bolused for lunch, as well as Loop failures, low iPhone battery level for the child, low pump battery, and other such information that might be useful.  Perhaps there's also an emergency contact person that you only want to get high/low BG alerts...you can set that up as well quite easily.  The basic concept is that NS puts out an event that triggers the IFTTT service called Webhooks (old name was \"Maker Webhooks\" hence you may see references to \"maker\" in NS docs).  Actually, there are several types of events that NS has programmed in all ready to use in IFTTT.     For this setup, we are going to use the most general logging event called  ns-event .  You'll get all the alarms and notifications logged, and then you can decide in subsequent steps which ones you'd actually like to send to your phone for pushover notification.  As a brief roadmap for what we are going to do:   Get necessary accounts setup  Add a folder to your Google Drive  Make an IFTTT applet to log NS events to your Google Spreadsheets  Enable NS to work with that new IFTTT applet  Make an IFTTT applet to send Pushover alert when the Google Spreadsheet is updated", 
            "title": "Remote notifications"
        }, 
        {
            "location": "/nightscout/pushover/#get-prepped", 
            "text": "If you don't already have these steps done, you will need them.  Skip any that you already have done.   Setup a Nightscout site  Get an  IFTTT account  Get a  Pushover Account  Get a  Google Account  Download the Pushover app onto your phone, and any other phone you'd like to receive Pushover alerts  Download the IFTTT app onto your phone, and any other phone you'd like to use IFTTT applets on  Login to the Pushover and IFTTT apps with your login information", 
            "title": "Get Prepped"
        }, 
        {
            "location": "/nightscout/pushover/#add-a-google-drive-folder", 
            "text": "Login to your Google account and select Google Drive       Click on the blue \"New\" button and create a new folder named IFTTT.       Double click on the newly created IFTTT folder, select the blue \"New\" button again, and create a new subfolder called \"Nightscout-Alarms\"      This IFTTT/Nightscout-Alarms folder will eventually contain numerous Google Spreadsheets, one for each NS alarm or infomation that is logged.  As new alarms are triggered, the IFTTT applet we are about to write will add a row to the appropriate spreadsheet logging the time of the alarm and any other reported details that go with the entry.  For now though, your drive will be blank...screenshot below just to give you an idea of where we are going.", 
            "title": "Add a Google Drive folder"
        }, 
        {
            "location": "/nightscout/pushover/#make-1st-ifttt-applet-to-log-ns-alarms", 
            "text": "Login to your IFTTT.com account and select the \"New Applet\" button.       In the screen that appears, click on the blue \"+this\" part of the screen       In the next screen, type \"webhooks\" in the search field and then click on the blue connect button       If this is the first time you are using IFTTT Webhooks service, you will have a \"Connect\" button to select.  If you already have IFTTT applets using Webhooks, you won't see this screen...just move to the next bullet.       Click on the \"receive a web request\" blue box, and then fill in the Event Name as  ns-event  and then press the \"Create trigger\" button.  (Side note:  the event name used here corresponds to the triggers discussed above for core events that NS already has integrated for IFTTT users.  If you want to instead use the other triggers such as ns-warn or ns-urgent, you can.  This example is using the most general trigger so that the options are wider for most users.)       Click on the blue \"+that\" text       Enter  google  in the search field and click on the Google Sheets icon       Select the green \"Add row to spreadsheet\" box       Delete the contents of the \"Spreadsheet Name\" and \"Drive folder path\".  For the \"Spreadsheet Name\", click the \"Add Ingredient\" button and select the \"Value1\".  For the \"Drive folder path\", enter  IFTTT/Nightscout-Alarms .  You do not have to modify the \"Formatted row\" box's contents.  Click the \"Create action\" button at the bottom.       Turn off the toggle for receiving notifications when the applet runs, and then click the Finish button       You'll now have the finished IFTTT applet that will cause a row to be added to a Google spreadsheet...tracking all your NS notifications and alarms.  If it is the first time that alarm has been logged, the applet will also create the spreadsheet itself.  After awhile, your IFTTT/Nightscout-Alarms folder will start to look like the screenshot posted above with numerous spreadsheets for each alarm type.", 
            "title": "Make 1st IFTTT Applet to Log NS Alarms"
        }, 
        {
            "location": "/nightscout/pushover/#enable-ifttt-webhooks-in-your-nightscout-site", 
            "text": "If you already have created IFTTT buttons previously to work with your NS site, you can skip this section.  If those buttons are working, then you've already added your MAKER_KEY and \"maker\" to your ENABLE line in Heroku.    To actually make that first applet work, we need to enter a \"Maker Key\" to get NS and IFTTT talking to each other.  Find your Maker Key by going to your IFTTT account, Services and then clicking on Webhooks.  (Your screen may not have as many services showing; the example account below just happens to already use several services.)           You will see your Maker Key as the last part of the URL; copy that last part (the red circled part)       Navigate to your Heroku account's settings tab, \"reveal config vars\" and (1) add your Maker Key to the MAKER_KEY line and (2) add \"maker\" to your ENABLE line.", 
            "title": "Enable IFTTT Webhooks in your Nightscout site"
        }, 
        {
            "location": "/nightscout/pushover/#make-2nd-ifttt-applet-to-send-pushover-notifications", 
            "text": "In your IFTTT account, select the \"New Applet\" button.       In the screen that appears, click on the blue \"+this\" part of the screen       In the next screen, type \"google\" in the search field and then click on the \"Google Sheets\" logo.       Click on the \"New row added to spreadsheet\" as the trigger.       Enter the following information:  Folder path is  IFTTT/Nightscout-Alarms  and for filename you are going to enter the name of the particular NS alarm or information that you would like to get pushover alerts for.  Click on the \"Create trigger\" button to save the trigger.       This applet can't be created unless your filename (alarm spreadsheet) already exists.  If your 1st applet we created above hasn't run for a long time, the spreadsheets may not exist yet because the alarms haven't triggered.  You have two options...(1) manually create the file in your Google Drive so that you can finish the applet now or (2) wait several days/weeks for the alarms to happen and that will automatically create the files in your Google drive. \nIf you choose option 1, here's a partial list of some of the filenames you could create in advance:   Loop isn't looping  Cannula age 48 hours  Cannula age 72 hours  Meal Bolus  Warning, Pump Reservoir Low  Warning Uploader Battery is Low   Depending on your alert levels you specified in NS, some of the hours in the titles may vary to match your settings    Click on the blue \"+that\" text       Enter  pushover  in the search field and click on the Pushover icon.  If this is your first time linking your IFTTT to Pushover, you will be prompted to enter your Pushover account login and allow IFTTT access.  This only needs to be done once.       Select the \"Send a Pushover notification\" box       Delete the contents of the \"Title\" and \"Message\" and \"URL\" boxes.  For the Title, click the \"Add Ingredient\" button and add  ColumnC .  For the \"Message\", click the \"Add Ingredient\" button and add the values of various columns from your spreadsheet for the infomation you would like to include.  For the alerts:  ColumnC  contains the alarm name,  ColumnA  is the date/time of the alarm, and  ColumnD  has the more detailed information about the info/alarm.  This is a pretty decent recipe to follow to get the useful information in your notification.       Select the \"Message Priority\" that you would like for this particular alarm type.       Select the \"Device\" that you would like to receive this particular alarm type.  The devices listed will be all your devices that have Pushover app installed and logged into.  Click \"Create Action\" when you are finished.       You'll now have made the IFTTT applet that will cause a Pushover notification to a particular device for a particular NS alarm, once the first applet records the alarm in the google spreadsheet.  Keep the \"receive notification when this Applet runs\" toggled off and click the Finish button.", 
            "title": "Make 2nd IFTTT Applet to send Pushover notifications"
        }, 
        {
            "location": "/nightscout/pushover/#revisit-nightscout-alert-levels", 
            "text": "Putting all these notifications together may cause you to want to revisit the alert levels you have set in your Heroku settings.  Here's a short summary of NS for the looping-related alerts (Note: the last row, Upbat, is the Looping iPhone battery level for Loop users; or the rig's battery level for OpenAPS users.)  If you'd like some of these alarms for your site and don't currently have them activated (they are all off by default unless specifically turned on), the lines you'd need to add are in the last column.  If you like the default values of the WARN and/or URGENT, you don't have to add those extra lines...just the line to enable the alerts will be sufficient.     SETTING  DEFAULT WARN  DEFAULT URGENT  HEROKU SETTINGS      CAGE  48  72  CAGE_ENABLE_ALERTS = true CAGE_WARN=XX CAGE_URGENT=XX    SAGE  164  168  SAGE_ENABLE_ALERTS = true SAGE_WARN=XX SAGE_URGENT=XX    IAGE  48  72  IAGE_ENABLE_ALERTS = true IAGE_WARN=XX IAGE_URGENT=XX    LOOP  30  60  LOOP_ENABLE_ALERTS = true LOOP_WARN=XX LOOP_URGENT=XX    OPENAPS  30  60  OPENAPS_ENABLE_ALERTS = true OPENAPS_WARN=XX OPENAPS_URGENT=XX    PUMP_CLOCK  30  60  PUMP_ENABLE_ALERTS = true PUMP_WARN_CLOCK=XX PUMP_URGENT_CLOCK=XX    PUMP_RES  10  5  PUMP_ENABLE_ALERTS = true PUMP_WARN_RES=XX PUMP_URGENT_RES=XX    PUMP_BATT_P  30  20  PUMP_ENABLE_ALERTS = true PUMP_WARN_BATT_P=XX PUMP_URGENT_BATT_P=XX    PUMP_BATT_V  1.35  1.30  PUMP_ENABLE_ALERTS = true PUMP_WARN_BATT_V=XX PUMP_URGENT_BATT_V=XX    UPBAT  30  20  UPBAT_ENABLE_ALERTS = true UPBAT_WARN=XX UPBAT_URGENT=XX", 
            "title": "Revisit Nightscout Alert Levels"
        }, 
        {
            "location": "/nightscout/pushover/#final-notes", 
            "text": "You can use other notification services than Pushover in the last part of the second applet.  For example, you could use the SMS service to send text notifications to your iphone instead of Pushover.  The downside for that is that the SMS service is limited to 100 message each month...some users may exceed that pretty easily.  Another alternative notification would be IFTTT's own Notification service.  This would work well, but does not have the ability to distinguish between devices the way Pushover allows.  If you use IFTTT's Notifications service, every phone using your IFTTT account will get the notices.    To be clear, you do  NOT  need to have pushover on your ENABLE line nor have  PUSHOVER_USER_KEY ,  PUSHOVER_API_TOKEN , or  PUSHOVER_ANNOUNCEMENT_KEY  entered into your Heroku settings in order for any of the above to work.  This is not the same Pushover as NS has integrated into it's code.  This is actually through IFTTT services, you just need a Pushover account to link to during the 2nd applet setup.    To create more notifications, simply repeat the steps for the 2nd applet you created, only this time use a new filename that corresponds to the spreadsheet tracking the alert you'd like notifications for.  You'll end up with multiple applets of the dark blue type (the pushover notifiers) and only a single light blue (NS alarm general collecter).        Here's examples of the Meal Bolus and Temp Basal ns-event logging spreadsheets          The 1st applet can only create up to 2000 active rows in a given spreadsheet.  After that, the applet will automatically create a new spreadsheet.  For most alarms, it may take quite sometime to reach 2000 rows of info.  For other alerts, such as temp basals being set, that may fill up rather fast for the average looper.  You can either clean out the data rows periodically to make room, or update your filename in the 2nd applet periodically when a new spreadsheet is made.", 
            "title": "Final notes"
        }, 
        {
            "location": "/nightscout/reports/", 
            "text": "Reports\n\u2301\n\n\nNightscout offer some fantastic data-crunching report tools in the settings area (the upper right corner, three horizontal lines).  You can play around with various date ranges, target ranges, and provide reports to your endocrinologist to review.", 
            "title": "Reports"
        }, 
        {
            "location": "/nightscout/reports/#reports", 
            "text": "Nightscout offer some fantastic data-crunching report tools in the settings area (the upper right corner, three horizontal lines).  You can play around with various date ranges, target ranges, and provide reports to your endocrinologist to review.", 
            "title": "Reports"
        }
    ]
}