{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Loop\n\n\n\n\n\n\nIntroduction\n\n\nLoop\n is an app template for building an automated insulin delivery system. It is a stone resting on the boulders of work done by many others.  \n\n\nThe app is built on top of \nLoopKit\n. LoopKit is a set of frameworks that provide data storage, retrieval, and calculation, as well as boilerplate view controllers used in Loop.\n\n\nPlease understand that this project:\n\n\n\n\nIs highly experimental\n\n\nIs not approved for therapy\n\n\n\n\nUsing the open source Loop app template, you can build an insulin delivery system that uses specific commercially and open source hardware and software technologies to bring together the insulin pump, continuous glucose monitor (CGM), and insulin dosing algorithm to create a continuous insulin basal dosing \u201cLoop\u201d.  This Loop predicts future glucose based on basal-rate schedules, carbohydrate intake, insulin on board, and current CGM readings.  These glucose forecasts provide Loop with the information needed to recommend a temporary basal rate to attain a targeted glucose range in the future.  The system can either operate as an \u201copen loop\u201d by making recommendations to the user for their approval before enacting or as a \u201cclosed loop\u201d by automatically setting the recommended temporary basal rate.  \nYou take full responsibility for building and running this system and do so at your own risk.\n\n\nYou should undertake this project in stages. For example, first \u201copen loop\u201d to familiarize yourself with Loop\u2019s operation. Also, investigate the code to ensure you understand what it is recommending and why. Then when you progress to \u201cclosed loop\u201d, do so safely by starting with appropriate safety limits and only progress to higher limits after several days of no lows. Please ask questions at this point about why Loop is making the recommendations it does.  It should be similar to the therapy decisions you would make yourself.  If the recommendations it makes are different than you would make, try to figure out why.\n\n\nStay in the Loop!\n\n\nSign up for the Loop Users announcement list\n to stay informed of critical issues that may arise.\n\n\nJoin the gitter chat at \nhttps://gitter.im/LoopKit/Loop\n\n\nThere is also a \nLooped Facebook Group\n that you might wish to join for support.\n\n\nContribute\n\n\nPlease consider submitting any updates and improvements to the docmentation that you want to share by submitting PRs to the \nloopdocs repo\n.  Also, read the \nLICENSE\n and \nCODE_OF_CONDUCT\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-loop", 
            "text": "", 
            "title": "Welcome to Loop"
        }, 
        {
            "location": "/#introduction", 
            "text": "Loop  is an app template for building an automated insulin delivery system. It is a stone resting on the boulders of work done by many others.    The app is built on top of  LoopKit . LoopKit is a set of frameworks that provide data storage, retrieval, and calculation, as well as boilerplate view controllers used in Loop.  Please understand that this project:   Is highly experimental  Is not approved for therapy   Using the open source Loop app template, you can build an insulin delivery system that uses specific commercially and open source hardware and software technologies to bring together the insulin pump, continuous glucose monitor (CGM), and insulin dosing algorithm to create a continuous insulin basal dosing \u201cLoop\u201d.  This Loop predicts future glucose based on basal-rate schedules, carbohydrate intake, insulin on board, and current CGM readings.  These glucose forecasts provide Loop with the information needed to recommend a temporary basal rate to attain a targeted glucose range in the future.  The system can either operate as an \u201copen loop\u201d by making recommendations to the user for their approval before enacting or as a \u201cclosed loop\u201d by automatically setting the recommended temporary basal rate.   You take full responsibility for building and running this system and do so at your own risk.  You should undertake this project in stages. For example, first \u201copen loop\u201d to familiarize yourself with Loop\u2019s operation. Also, investigate the code to ensure you understand what it is recommending and why. Then when you progress to \u201cclosed loop\u201d, do so safely by starting with appropriate safety limits and only progress to higher limits after several days of no lows. Please ask questions at this point about why Loop is making the recommendations it does.  It should be similar to the therapy decisions you would make yourself.  If the recommendations it makes are different than you would make, try to figure out why.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#stay-in-the-loop", 
            "text": "Sign up for the Loop Users announcement list  to stay informed of critical issues that may arise.  Join the gitter chat at  https://gitter.im/LoopKit/Loop  There is also a  Looped Facebook Group  that you might wish to join for support.", 
            "title": "Stay in the Loop!"
        }, 
        {
            "location": "/#contribute", 
            "text": "Please consider submitting any updates and improvements to the docmentation that you want to share by submitting PRs to the  loopdocs repo .  Also, read the  LICENSE  and  CODE_OF_CONDUCT .", 
            "title": "Contribute"
        }, 
        {
            "location": "/requirements/overview/", 
            "text": "Overview\n\n\nLoop has both Hardware and Software requirements.  In general, to use Loop you need to have six components.\n\n\n\n\nCompatible insulin pump\n\n\nCompatible CGM\n\n\nRileyLink\n\n\nCompatible iPhone/iPod Touch\n\n\nApple computer running Mac OS X 10.11.5 or later\n\n\nXcode (a free Apple application)\n\n\n\n\nYou will need to be able to install software on your computer and sign up as an Apple Developer to install the Loop app to your iPhone. You do not have to own an Apple computer to run Loop on a day-to-day basis, but you will need access to an Apple computer anytime you need to build or update your Loop app. For the most part, if you are comfortable with installing Apple software programs on your computer, you will have no problem building and running Loop. There are detailed step-by-step instructions included in these docs.  You should be doing this yourself so you can understand how to fix it when it breaks. You may want to help another person get set up on Loop, and that is noble, but you will serve them much better if you support them doing the work themselves, rather than doing it for them.", 
            "title": "Overview"
        }, 
        {
            "location": "/requirements/overview/#overview", 
            "text": "Loop has both Hardware and Software requirements.  In general, to use Loop you need to have six components.   Compatible insulin pump  Compatible CGM  RileyLink  Compatible iPhone/iPod Touch  Apple computer running Mac OS X 10.11.5 or later  Xcode (a free Apple application)   You will need to be able to install software on your computer and sign up as an Apple Developer to install the Loop app to your iPhone. You do not have to own an Apple computer to run Loop on a day-to-day basis, but you will need access to an Apple computer anytime you need to build or update your Loop app. For the most part, if you are comfortable with installing Apple software programs on your computer, you will have no problem building and running Loop. There are detailed step-by-step instructions included in these docs.  You should be doing this yourself so you can understand how to fix it when it breaks. You may want to help another person get set up on Loop, and that is noble, but you will serve them much better if you support them doing the work themselves, rather than doing it for them.", 
            "title": "Overview"
        }, 
        {
            "location": "/requirements/pump/", 
            "text": "Insulin Pump\n\n\n\n\nThere are a number of insulin pumps manufactured between 2006 \u2013 2012 by Medtronic which are compatible.  Compatibility has two requirements; (1) pump model and (2) firmware.  \n\n\nThe Loop-compatible pumps are as follows:\n\n\n\n  \n\n    \n\n      \n\n      \nInsulin Pump\n\n    \n\n    \n\n      \nMM 515/715\n2\n\n      \nMM 522/722\n2\n\n      \nMM 523/723\n3\n\n      \nMM 554/754\n3\n\n    \n\n  \n\n  \n\n    \n\n      \nCGM\n\n      \nDexcom G4\n1\n \n\n      \n\u2705\n\n      \n\u2705\n\n      \n\u2705\n\n      \n\u2705\n\n    \n\n    \n\n      \nDexcom G5\n\n      \n\u2705\n\n      \n\u2705\n\n      \n\u2705\n\n      \n\u2705\n\n    \n\n    \n\n      \nMM CGM\n\n      \n\u2705\n\n      \n\u2705\n\n      \n\u2705\n\n      \n\u2705\n\n    \n\n  \n\n\n\n\n\n1\n. Offline access to glucose requires a Receiver with Share and the \nShare2 app\n to be running on the same device. Internet-dependent access via Share servers is also supported.\n\n2\n. Pump must have a remote ID added in the \nRemote Options\n menu.\n\n3\n. Early firmware (US \n= 2.4A, AU/EUR \n= 2.6A) is required for using Closed Loop and Bolus features.\n\n\n\n\nAnd if you want to triple check compatibility, you can check for presence/absence of \"PC connect\" in the pump.  If PC Connect is present, then the pump is NOT compatible.  You can find PC connect in the Medtronic's Main Menu, Utilities, Connect Devices.  PC Connect, if present, will be the first option showing in that menu, above the word \"Meters\".  If you don't see PC Connect there...good!\n\n\n\n\nPump Model\n\n\nTo determine your pump model, look at the back side of your pump.  There should be a sticker on the underside of the pump.  On the right hand side of the sticker, it says REF MMT-XXXXXX\n\n\n\n\nIn the example above, it says the pump model is:  MMT-722NAS\n\n\nMMT         Pump Manufacturer Model (MiniMed Medtronic)\n722         Pump Model Number\nNA          Pump Region (NA=North America, CA=Canada/Australia, WW=Worldwide)\nS           Pump Color (S=Smoke, L=Clear/Lucite, B=Blue, P=Pink/Purple)\n\n\n\nSome pumps may have an \u201cL\u201d or \u201cS\u201d or \"R\" before the pump region, e.g. a model number like MMT-LNAS.  This does not affect Loop compatibility.\n\n\nThe difference between the Medtronic 500 series and the 700 series pumps is the size of the insulin reservoirs.  The 500 series pumps use a 180 unit reservoir, and the 700 series pumps use a 300 unit reservoir (or smaller 180 unit reservoir, if you want).\n\n\nThe difference between the Medtronic x22 pumps and the x23 pumps is primarily three features.  \n\n\n\n\n\n\nThe x23 pumps will allow for increments of 0.025 units, whereas the x22 pumps have larger increments of 0.05 units.  Loop will have the insulin delivery automatically rounded by the pump to the units available in the pump model, and any smaller adjustments (to make up for the rounding) will be made through Loop\u2019s use of temp basals.  \n\n\n\n\n\n\nAdditionally, because of the way Loop fetches information from the pump, the x23 series of pumps are slightly better at conserving battery life through the use of the MySentry.  x22 pumps do not use MySentry.  \n\n\n\n\n\n\nThe x23 series pumps are also faster at delivering large boluses (up to several times faster for boluses \n 10 units).\n\n\n\n\n\n\nPump Firmware\n\n\nA pump\u2019s firmware is the internal software that runs your pump.  Older Medtronic firmware allows Loop to act as a \u201cremote control\u201d to set temp basals and report back pump data.  Newer firmware disabled that \u201cremote control\u201d access and therefore cannot be used with these DIY closed-loop systems.  There is currently no ability to downgrade a pump\u2019s firmware or replace it with older firmware.  So before you buy a used pump, make sure you are getting one with compatible firmware.\n\n\nTo find your pump\u2019s firmware you will need to power it up.  If the pump has not been powered on for some time (i.e., has been in storage without a battery for awhile), it will run through a start-up count and the firmware version will appear on the bottom right of the pump\u2019s screen.  Don\u2019t turn away, as the version number will only be displayed for a little while before the screen moves onto other information displays.  \n\n\nIf the pump has been active recently or has a reservoir installed, follow these steps:\n\n\n\n\n\n\nPress the \n button on your pump.  \n\n\n\n\n\n\nScroll down with the \n button to the bottom of the status display.  \n\n\n\n\n\n\nRead the bottom line of the display.\n\n\n\n\n\n\n\n\nOther pumps\n\n\nWhile we all would love to have our {insert your favorite manufacturer} pump be compatible with a DIY closed-loop system like Loop, unfortunately it just isn't possible right now.  There are efforts being made to crack the software code on other pumps (like Animas and Omnipod), and when they are successful...believe me...we will tell you about it!\n\n\nFinding a Medtronic pump\n\n\nFinding a compatible Medtronic pump is probably the most difficult part for most new Loopers.  Our suggestion:\n\n\n\n\n\n\nTalk to friends in the diabetic community.  \n\n\n\n\n\n\nAsk your endocrinologist.  \n\n\n\n\n\n\nAsk at a local JDRF chapter meeting if someone has an old backup pump they'd be willing to donate to you.  \n\n\n\n\n\n\nJoin diabetic supply groups in Facebook; both for-trade and for-sale groups.  \n\n\n\n\n\n\nCheck Craigslist often and be willing to expand your search area to include larger cities.  \n\n\n\n\n\n\nSearch \nMedwow\n for used Medtronic pumps\n\n\n\n\n\n\nSafe Purchasing\n\n\nIf you choose to purchase from a remote or unknown seller, here are some tips for safe purchasing:\n\n\n\n\n\n\nUse Paypal and purchase using the \"Goods and Services\" payment option.  This costs nothing for the buyer, but the seller will lose 2.95% of the sale to Paypal fees.  Paypal offers some protection for both buyer and seller in the event of fraud.  \n\n\n\n\n\n\nAsk for photos of the pump.  Check to make sure the serial number of the pump on the backside matches the serial number of the pump showing in the display menu.  Ask for a short video of the pump, or at least a photo of the pump turned on, so that you can see the pump's firmware and model number.  Cracks and some wear on these pumps is expected...these pumps are not usually free of any marks.  Many people are successfully looping on pumps that have cracks and rub marks...but you may want to ask if you are concerned about any you see.  \n\n\n\n\n\n\nAsk for shipping that includes a tracking number.  USPS Priority Mail's smallest box is a great option.  It's only $7.15 and includes tracking.  Ask the seller to add a small bit of packing protection such as bubble wrap around the pump to keep it safe during shipping.  Make sure you get a tracking number within a reasonable period of time after you have paid.  \n\n\n\n\n\n\nRed flags that may indicate a scam:\n\n\n\n\n\n\nAsking for payment through \"friends and family\" on Paypal, especially if you don't know the person or have any solid references for them.  Paying in that way offers you no buyer protection.  It's just like giving the seller cash, so you had better trust the seller.  \n\n\n\n\n\n\nOffering an \"almost new\" pump is a big red flag.  These pumps should be at least 5 years old by now.  Do you really think a 5 year old pump should be unused and sitting in shrink wrap at this point?  Seems highly suspicious.  \n\n\n\n\n\n\nNot able to provide new pictures of the pump when requested.  Sure they posted some pictures with the ad, but what if they just downloaded them from other people's ads?  The seller should be able to furnish a couple \"new\" photos are your request.  A good one to ask for is the battery and reservoir tops so you can see the condition of those.\n\n\n\n\n\n\nPump Supplies\n\n\nMedtronic will not sell pump supplies directly to customers who do not have an in-warranty Medtronic pump registered in their system.  Ask your insurance about purchasing pump supplies through a durable medical equipment (DME) provider.  If you are brand new to Medtronic infusion sites, you may want to ask for help from friends to try a variety of infusion sets before purchasing a full 90-day supply of any in particular.", 
            "title": "Insulin Pump"
        }, 
        {
            "location": "/requirements/pump/#insulin-pump", 
            "text": "There are a number of insulin pumps manufactured between 2006 \u2013 2012 by Medtronic which are compatible.  Compatibility has two requirements; (1) pump model and (2) firmware.    The Loop-compatible pumps are as follows:  \n   \n     \n       \n       Insulin Pump \n     \n     \n       MM 515/715 2 \n       MM 522/722 2 \n       MM 523/723 3 \n       MM 554/754 3 \n     \n   \n   \n     \n       CGM \n       Dexcom G4 1   \n       \u2705 \n       \u2705 \n       \u2705 \n       \u2705 \n     \n     \n       Dexcom G5 \n       \u2705 \n       \u2705 \n       \u2705 \n       \u2705 \n     \n     \n       MM CGM \n       \u2705 \n       \u2705 \n       \u2705 \n       \u2705 \n     \n     1 . Offline access to glucose requires a Receiver with Share and the  Share2 app  to be running on the same device. Internet-dependent access via Share servers is also supported. 2 . Pump must have a remote ID added in the  Remote Options  menu. 3 . Early firmware (US  = 2.4A, AU/EUR  = 2.6A) is required for using Closed Loop and Bolus features.   And if you want to triple check compatibility, you can check for presence/absence of \"PC connect\" in the pump.  If PC Connect is present, then the pump is NOT compatible.  You can find PC connect in the Medtronic's Main Menu, Utilities, Connect Devices.  PC Connect, if present, will be the first option showing in that menu, above the word \"Meters\".  If you don't see PC Connect there...good!", 
            "title": "Insulin Pump"
        }, 
        {
            "location": "/requirements/pump/#pump-model", 
            "text": "To determine your pump model, look at the back side of your pump.  There should be a sticker on the underside of the pump.  On the right hand side of the sticker, it says REF MMT-XXXXXX   In the example above, it says the pump model is:  MMT-722NAS  MMT         Pump Manufacturer Model (MiniMed Medtronic)\n722         Pump Model Number\nNA          Pump Region (NA=North America, CA=Canada/Australia, WW=Worldwide)\nS           Pump Color (S=Smoke, L=Clear/Lucite, B=Blue, P=Pink/Purple)  Some pumps may have an \u201cL\u201d or \u201cS\u201d or \"R\" before the pump region, e.g. a model number like MMT-LNAS.  This does not affect Loop compatibility.  The difference between the Medtronic 500 series and the 700 series pumps is the size of the insulin reservoirs.  The 500 series pumps use a 180 unit reservoir, and the 700 series pumps use a 300 unit reservoir (or smaller 180 unit reservoir, if you want).  The difference between the Medtronic x22 pumps and the x23 pumps is primarily three features.      The x23 pumps will allow for increments of 0.025 units, whereas the x22 pumps have larger increments of 0.05 units.  Loop will have the insulin delivery automatically rounded by the pump to the units available in the pump model, and any smaller adjustments (to make up for the rounding) will be made through Loop\u2019s use of temp basals.      Additionally, because of the way Loop fetches information from the pump, the x23 series of pumps are slightly better at conserving battery life through the use of the MySentry.  x22 pumps do not use MySentry.      The x23 series pumps are also faster at delivering large boluses (up to several times faster for boluses   10 units).", 
            "title": "Pump Model"
        }, 
        {
            "location": "/requirements/pump/#pump-firmware", 
            "text": "A pump\u2019s firmware is the internal software that runs your pump.  Older Medtronic firmware allows Loop to act as a \u201cremote control\u201d to set temp basals and report back pump data.  Newer firmware disabled that \u201cremote control\u201d access and therefore cannot be used with these DIY closed-loop systems.  There is currently no ability to downgrade a pump\u2019s firmware or replace it with older firmware.  So before you buy a used pump, make sure you are getting one with compatible firmware.  To find your pump\u2019s firmware you will need to power it up.  If the pump has not been powered on for some time (i.e., has been in storage without a battery for awhile), it will run through a start-up count and the firmware version will appear on the bottom right of the pump\u2019s screen.  Don\u2019t turn away, as the version number will only be displayed for a little while before the screen moves onto other information displays.    If the pump has been active recently or has a reservoir installed, follow these steps:    Press the   button on your pump.      Scroll down with the   button to the bottom of the status display.      Read the bottom line of the display.", 
            "title": "Pump Firmware"
        }, 
        {
            "location": "/requirements/pump/#other-pumps", 
            "text": "While we all would love to have our {insert your favorite manufacturer} pump be compatible with a DIY closed-loop system like Loop, unfortunately it just isn't possible right now.  There are efforts being made to crack the software code on other pumps (like Animas and Omnipod), and when they are successful...believe me...we will tell you about it!", 
            "title": "Other pumps"
        }, 
        {
            "location": "/requirements/pump/#finding-a-medtronic-pump", 
            "text": "Finding a compatible Medtronic pump is probably the most difficult part for most new Loopers.  Our suggestion:    Talk to friends in the diabetic community.      Ask your endocrinologist.      Ask at a local JDRF chapter meeting if someone has an old backup pump they'd be willing to donate to you.      Join diabetic supply groups in Facebook; both for-trade and for-sale groups.      Check Craigslist often and be willing to expand your search area to include larger cities.      Search  Medwow  for used Medtronic pumps", 
            "title": "Finding a Medtronic pump"
        }, 
        {
            "location": "/requirements/pump/#safe-purchasing", 
            "text": "If you choose to purchase from a remote or unknown seller, here are some tips for safe purchasing:    Use Paypal and purchase using the \"Goods and Services\" payment option.  This costs nothing for the buyer, but the seller will lose 2.95% of the sale to Paypal fees.  Paypal offers some protection for both buyer and seller in the event of fraud.      Ask for photos of the pump.  Check to make sure the serial number of the pump on the backside matches the serial number of the pump showing in the display menu.  Ask for a short video of the pump, or at least a photo of the pump turned on, so that you can see the pump's firmware and model number.  Cracks and some wear on these pumps is expected...these pumps are not usually free of any marks.  Many people are successfully looping on pumps that have cracks and rub marks...but you may want to ask if you are concerned about any you see.      Ask for shipping that includes a tracking number.  USPS Priority Mail's smallest box is a great option.  It's only $7.15 and includes tracking.  Ask the seller to add a small bit of packing protection such as bubble wrap around the pump to keep it safe during shipping.  Make sure you get a tracking number within a reasonable period of time after you have paid.      Red flags that may indicate a scam:    Asking for payment through \"friends and family\" on Paypal, especially if you don't know the person or have any solid references for them.  Paying in that way offers you no buyer protection.  It's just like giving the seller cash, so you had better trust the seller.      Offering an \"almost new\" pump is a big red flag.  These pumps should be at least 5 years old by now.  Do you really think a 5 year old pump should be unused and sitting in shrink wrap at this point?  Seems highly suspicious.      Not able to provide new pictures of the pump when requested.  Sure they posted some pictures with the ad, but what if they just downloaded them from other people's ads?  The seller should be able to furnish a couple \"new\" photos are your request.  A good one to ask for is the battery and reservoir tops so you can see the condition of those.", 
            "title": "Safe Purchasing"
        }, 
        {
            "location": "/requirements/pump/#pump-supplies", 
            "text": "Medtronic will not sell pump supplies directly to customers who do not have an in-warranty Medtronic pump registered in their system.  Ask your insurance about purchasing pump supplies through a durable medical equipment (DME) provider.  If you are brand new to Medtronic infusion sites, you may want to ask for help from friends to try a variety of infusion sets before purchasing a full 90-day supply of any in particular.", 
            "title": "Pump Supplies"
        }, 
        {
            "location": "/requirements/cgm/", 
            "text": "Continuous Glucose Monitor\n\n\nA continuous glucose monitor (CGM) provides Loop with current blood glucose readings.  These readings allow Loop to predict what the current glucose trend is, and predict the future glucose based on carbohydrate input and basal profiles. The following are the types of CGMs compatible with Loop.  CGM readings are a required part of looping.  If your Loop is unable to retreive BG data, it will not be able to loop.\n\n\nDexcom G5 CGM \n\n\nDexcom G5 receives CGM data directly to the Dexcom G5 Mobile app on your iPhone via Bluetooth.  It does not require the use of a G5 stand-alone receiver.\n\n\nDexcom G4 CGM with Share Receiver \n\n\nDexcom G4 Share system transmits CGM data from the transmitter to a Dexcom G4 Share Receiver.  The receiver, in turn, connects to the Dexcom Share2 app on your iPhone via Bluetooth.  The Share2 app uploads CGM data to the Dexcom servers.  \n\n\nMedtronic CGM \n\n\nThe Minimed Enlite CGM, available with the Medtronic 523/723 and 554/754, wirelessly sends blood glucose readings to the pump.  Loop can read the Medtronic CGM data directly from the pump using the RileyLink.  \n\n\nOffline Use\n\n\nOffline use means using Loop when there is no cell data or internet available.  For the offline Loop use, the iPhone's Bluetooth still needs to be active; and for Dexcom system's, the Share2 or G5 Mobile apps also still need to be active.  If you put your iPhone into Airplane mode, remember to turn back on the Bluetooth to keep your Loop running.\n\n\nDexcom Servers\n\n\nIn some instances, the Loop may fail to eavesdrop on the Bluetooth transmissions of the CGM systems.  When that happens, the Loop can pull directly from Dexcom Servers to get the data (assuming you have entered your Share account information in the Loop settings).  When Loop is operating in this mode, you will see a small cloud in the CGM reading in the Loop app.  Operating in this mode requires a working internet or cell connection.", 
            "title": "CGM"
        }, 
        {
            "location": "/requirements/cgm/#continuous-glucose-monitor", 
            "text": "A continuous glucose monitor (CGM) provides Loop with current blood glucose readings.  These readings allow Loop to predict what the current glucose trend is, and predict the future glucose based on carbohydrate input and basal profiles. The following are the types of CGMs compatible with Loop.  CGM readings are a required part of looping.  If your Loop is unable to retreive BG data, it will not be able to loop.", 
            "title": "Continuous Glucose Monitor"
        }, 
        {
            "location": "/requirements/cgm/#dexcom-g5-cgm", 
            "text": "Dexcom G5 receives CGM data directly to the Dexcom G5 Mobile app on your iPhone via Bluetooth.  It does not require the use of a G5 stand-alone receiver.", 
            "title": "Dexcom G5 CGM "
        }, 
        {
            "location": "/requirements/cgm/#dexcom-g4-cgm-with-share-receiver", 
            "text": "Dexcom G4 Share system transmits CGM data from the transmitter to a Dexcom G4 Share Receiver.  The receiver, in turn, connects to the Dexcom Share2 app on your iPhone via Bluetooth.  The Share2 app uploads CGM data to the Dexcom servers.", 
            "title": "Dexcom G4 CGM with Share Receiver "
        }, 
        {
            "location": "/requirements/cgm/#medtronic-cgm", 
            "text": "The Minimed Enlite CGM, available with the Medtronic 523/723 and 554/754, wirelessly sends blood glucose readings to the pump.  Loop can read the Medtronic CGM data directly from the pump using the RileyLink.", 
            "title": "Medtronic CGM "
        }, 
        {
            "location": "/requirements/cgm/#offline-use", 
            "text": "Offline use means using Loop when there is no cell data or internet available.  For the offline Loop use, the iPhone's Bluetooth still needs to be active; and for Dexcom system's, the Share2 or G5 Mobile apps also still need to be active.  If you put your iPhone into Airplane mode, remember to turn back on the Bluetooth to keep your Loop running.", 
            "title": "Offline Use"
        }, 
        {
            "location": "/requirements/cgm/#dexcom-servers", 
            "text": "In some instances, the Loop may fail to eavesdrop on the Bluetooth transmissions of the CGM systems.  When that happens, the Loop can pull directly from Dexcom Servers to get the data (assuming you have entered your Share account information in the Loop settings).  When Loop is operating in this mode, you will see a small cloud in the CGM reading in the Loop app.  Operating in this mode requires a working internet or cell connection.", 
            "title": "Dexcom Servers"
        }, 
        {
            "location": "/requirements/rileylink/", 
            "text": "RileyLink (Required) \n\n\nThe RileyLink is an open-source hardware device that can bridge Bluetooth Low Energy (BLE) to 916MHz wireless communication. What does that mean to you? It means RileyLink is the communication highway between your insulin pump, CGM, and iPhone.\n\n\n\n\nThe RileyLink is available as a set of PCB files and software, with instructions on how to build your own RileyLink hardware module.  All this can be found here: \nRileyLink Github\n\nIf you aren\u2019t up to the task of building your own RileyLink (and most of us aren\u2019t), community members periodically do a production run of RileyLinks. You can place an order here: \nRileyLink order site", 
            "title": "RileyLink"
        }, 
        {
            "location": "/requirements/rileylink/#rileylink-required", 
            "text": "The RileyLink is an open-source hardware device that can bridge Bluetooth Low Energy (BLE) to 916MHz wireless communication. What does that mean to you? It means RileyLink is the communication highway between your insulin pump, CGM, and iPhone.   The RileyLink is available as a set of PCB files and software, with instructions on how to build your own RileyLink hardware module.  All this can be found here:  RileyLink Github \nIf you aren\u2019t up to the task of building your own RileyLink (and most of us aren\u2019t), community members periodically do a production run of RileyLinks. You can place an order here:  RileyLink order site", 
            "title": "RileyLink (Required) "
        }, 
        {
            "location": "/requirements/computer/", 
            "text": "Apple Computer\n\n\nown \nborrow\nOS\nlink to apple site", 
            "title": "Computer"
        }, 
        {
            "location": "/requirements/computer/#apple-computer", 
            "text": "own \nborrow\nOS\nlink to apple site", 
            "title": "Apple Computer"
        }, 
        {
            "location": "/requirements/iphone/", 
            "text": "iPhone", 
            "title": "iPhone"
        }, 
        {
            "location": "/requirements/iphone/#iphone", 
            "text": "", 
            "title": "iPhone"
        }, 
        {
            "location": "/build/overview/", 
            "text": "Building your Loop App", 
            "title": "Overview"
        }, 
        {
            "location": "/build/overview/#building-your-loop-app", 
            "text": "", 
            "title": "Building your Loop App"
        }, 
        {
            "location": "/build/installing/", 
            "text": "Installing Loop\n\n\nYou\u2019re ready to get to the real stuff now, right?  Excited to get Looping?  Let\u2019s do it.  Let\u2019s put that Loop on your iPhone.\n\n\nSetup your Apple Computer\n\n\nInstall Xcode\n\n\nDid you go to the \nApple App Store\n? It\u2019s an application on your Apple Computer.  Open it and search for Xcode.  Download and install it for free.  Easy peasy.  Except it takes about 20-40 minutes to download depending on your internet speed.\n\n\n\n\nInstall Carthage\n\n\nThe installation of Carthage has a few different ways it can be done, but the easiest is to download the Carthage package here:\n\n\nCarthage.pkg download\n       \n\n\nFind the downloaded \ncarthage.pkg\n in your Downloads folder (option-command-L while in Finder will bring up your Downloads folder).  Double-click the file and follow the directions to install (basically give your computer\u2019s password and it does the rest).  Done.  Nothing more needs to happen with Carthage (it runs in the background).\n\n\n\n\n\nIF you have problems with that method, you can use the \u201cHomebrew method\u201d.  And here\u2019s how it is done:\nOpen the Terminal application on your Apple computer (it is located in the Utilities application folder)\n\n\nCopy and paste the line below into the prompt in Terminal.  Press return after you paste it in.\n\n\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\n\nThere will be a prompt asking if you want to continue (press return to continue, then it may prompt for your password.  enter your computer user password.).  Wait while the script does its thing...you\u2019ll see info scroll by and then it will pause for awhile.  Eventually, it will be done and you\u2019ll see something that says \u201cInstallation successful\u201d and you\u2019ll have a ready terminal prompt again.\n\n\nType \nbrew update\n and press return.\n\n\nType \nbrew install carthage\n and press return.\n\n\nYou can close the Terminal application now.  You\u2019re done with it.  Phew.\n\n\n\n\nDownload Loop Source Code\n\n\nYou\u2019ll need to obtain the Loop\u2019s source code in order to build the app on your computer.  There are various ways of doing that; from super easy to more advanced. Pick whichever method you are comfortable with.  The first two options do not require a GitHub account.  The last option will require you to have a GitHub account.\n\n\n{Note: What\u2019s the disadvantage of the Super Easy option below?  Any customizations you do in Xcode will remain on your local computer only.  If Loop\u2019s source code updates to a new version, you will have to re-enter your customizations if/when you decide to update your Loop to subsequent versions.  However, most customizations are probably going to be fairly quick and easy to redo, just like they were the first time.}\n\n\nOption 1: Direct Download (Super Easy)\n\n\nIf you click on the link below, a copy of the Loop source code\u2019s master branch will be downloaded to your downloads folder.\n\n\nLoop Master branch\n\n\nOption 2: Clone with Terminal (Sorta easy)\n\n\nOpen Terminal Application, copy and paste the line below.  This will download a clone of the master branch to your root directory of your computer user account:\n\n\ngit clone https://github.com/LoopKit/Loop.git\n\n\nOption 3: GitHub Desktop, Fork and Pull the Repo (Advanced)\n\n\nLogin to your GitHub account and fork a copy of the \nLoop repository\n.  \n\n\nSetup a sync between your GitHub repository and your computer by installing \nGithub Desktop\n onto your computer.\n\n\nGo back to your Loop repository in GitHub and press the green \u201cClone or download\u201d button and choose \u201copen in desktop\u201d.  You will now have a copy of the selected branch in stored in your local folder.  \n\n\n\n\nYou can later go into the GitHub desktop client and commit your changes, change branches, etc as you test various configurations.  See Section 4.3.6 for further information about how to commit those changes back to your repository.\n\n\nInstall Loop using Xcode\n\n\nHere\u2019s where the fun really begins.  You\u2019re about to build your Loop app.\n\n\nIf you\u2019ve used the direct download option (super easy), go to your Downloads folder, open the Loop folder, and double click on Loop.xcodeproj.  \n\n\n\n\nIf you used another option, find the Loop folder on your computer and double click on Loop.xcodeproj\n\n\nA warning may appear asking if you really want to open it, click Open.  Xcode will open the project, and take a few moments to organize the files.\n\n\n\n\nOnce Xcode has finished indexing, the Loop project will appear in the far left column.  Click on the blue Loop icon, and then click on the file called Loop.xcconfig.  The middle portion of Xcode window will populate and this is where you will find the MAIN_APP_BUNDLE_IDENTIFIER. The default is com.loopkit\n\n\n\n\nYou need to change the MAIN_APP_BUNDLE_IDENTIFIER  to your own unique identifier.  Keep it in the reverse-domain syntax, meaning start with \u201ccom.\u201d (no quotes though).  After you enter your new MAIN_APP_BUNDLE_IDENTIFIER, save the project using Command-S, and then click on the blue \u201cLoop\u201d file in the far left column.\n\n\n\n\nThe next steps are to \u201csign\u201d the application so that Apple will allow its use on the iPhone.  You will need to select a \u201cteam\u201d.  If you already have a team from previous Xcode projects, you may see teams listed.  Use the dropdown menu to select the appropriate team.  Make sure you keep the \u201cautomatically manage signing\u201d box checked.  \n\n\nIf, however, this is your first time signing an app in Xcode, your screen may instead look like the screen to the right.  In which case, you will need to add a developer account (either free or paid) by clicking on \u201cAdd Account\u201d.  \n\n\n\n\n\u201cAdd Account\u201d will open the Xcode preferences window, as shown below.  You will need to sign in with your Apple ID (or create one, if you don\u2019t already have one).\n\n\n\n\nOnce you get signed in, your Apple ID will appear under the Accounts section as shown below.  Close that window by pressing the little red circle in the upper left corner, and you will return to the main Xcode screen again.\n\n\nNote: You may need to close Xcode and restart to see your Apple account for signing to appear in the Signing section.\n\n\n\n\n\n\nBeginning of SIDE NOTE about signing and Provisioning Profiles.\n\n\nThe 7-day free Provisioning Profiles are signed from \u201c(Personal Team)\u201d.\n\n\nThe full-year paid Provisioning Profiles do NOT have \u201c(Personal Team)\u201d\n\n\n\n\nMany people think \u201cHey I\u2019ll try to build this Loop for free and if I like it, then I\u2019ll buy the $99 Apple Developer license.\u201d  If that\u2019s you right now, please come back here when you are ready to reinstall as a paid developer account.  You will need to:\n\n\n\n\nSelect the correct team because now there will be two to choose from.  Use the one without the \u201c(Personal Team)\u201d to build apps that last a full 12 months.\n\n\nWhen you rebuild your app, choose a new MAIN_APP_BUNDLE_IDENTIFIER different than your previous one.  For example, if you used \u201ccom.yourname\u201d on the free app then choose \u201ccom.yourname2\u201d for the new paid app.  \n\n\nYou will have to re-enter your Loop settings on your new app once it is installed (hopefully, you took written notes of them from when you were running your free app..hint hint).\n\n\n\n\nEnd of SIDE NOTE\n\n\n\n\nWhen you return to the main screen, select your team name and you may see two status warnings.  The first warning may appear if you do not have an iPhone plugged into the Mac.  The \u201cfailed to create a provisioning profile\u201d has details that should alert you to plug in your device (iPhone).  Once you connect your iPhone via cable to the Mac, select your iPhone from the hidden drop down list (see red arrow below).  Your device\u2019s personal name should be at the top of the list.  Select your personal device. You may need to \u201cregister the device\u201d if this is your first time using Xcode with that iphone, follow the prompt if that\u2019s the case.\n\n\n\n\nOnce you select your device, Xcode should resolve the warnings and generate a Provisioning Profile.  If you click on the information icon (little \u201ci\u201d in the circle), for the Provisioning Profile, you can verify the signing date and mark your calendar for rebuilding in 7 days if you are using a free Apple Developer account.  If you are enrolled in the Apple Developer Program (aka paid the $99), the expiration date will be for a year from the creation date.\n\n\nFinally, you need to make sure to sign all FOUR \u201ctargets\u201d to the application; Loop, Loop Status Extension, WatchApp, and WatchApp Extension.  So far, we have only signed the Loop target.  Click on the blue \u201cLoop\u201d on the left and then the box with the vertical line to drop down the targets list.  Choose each of the remaining three targets and then select the signing team that you selected previously in the Loop target signing. Make sure you have signed all four targets.  If the \u201cloopkit\u201d still appears on the Bundle Identifier line, don\u2019t worry about it.  Xcode will update that to your chosen MAIN_APP name when it builds.  Sometimes Xcode is just slow to rename.  Just leave that Bundle Identifier line untouched.\n\n\n\n\n\n\nAt this point in the process, you should make any custom configurations to your Loop app before you finish with the installation of Loop on your iPhone.  If you want to make any of the customizations yourself, the step-by-step instructions are provided below (or by clicking on the link to the left).  When you\u2019ve completed those customizations, please return here and follow the next steps to finish the installation of Loop.\n\n\n\n\nAll done with customizations? Let\u2019s finish the installation of the Loop app onto your iPhone.  Select your device and then press the \u201cplay\u201d button (or build button) to start Xcode on its way.  [You may be prompted to add the iPhone to your Developer Account...go ahead and do so.]  You\u2019ll see the progression of the build in the status window.  If the build is successful, it will say \u201cfinished running Loop\u201d in the status bar.  If the build fails, it will show you red error alerts and you can read what the failure was.  Yellow error alerts do not cause the build to fail, those are just warnings.\n\n\n\n\nIf this is the first time you have installed an app on your iPhone using your Developer Account, you may get a warning like this.  Just follow the directions in the warning, and the issue resolves very quickly.  Click ok and you can safely disconnect your iPhone from the computer.  (If you don\u2019t get a warning and the Loop app installs but does not open, you may still need to go to Settings-\nGeneral-\nDevice Management and enable trust for your Developer Account.)\n\n\n\n\nYou can confirm Loop has installed on your phone simply by looking on the iphone.  Turn it on and check if the Loop app is running, or locating the Loop app icon.  If you don\u2019t see it, try pressing the build (play) button again.  There should be a message at the top of Xcode window indicating a successful build.  Once you get confirmation and can see Loop on your iPhone, you can simply unplug from computer.  \n\n\nCONGRATS!  YOU JUST INSTALLED LOOP!\n\n\n...\n\n\nCode Customizations\n\n\nBased on Loop users\u2019 experience, there are some customizations that you may want to incorporate ahead of building your Loop app.  These customizations must be done prior to building the Loop app onto your iPhone, they cannot be done from within the app itself.\n\n\n[Note: To help you find the Line numbers in Xcode, it may be helpful to turn them on now.  Go to Xcode Preferences, under Text Editing, click the box to Show Line Numbers.  Every effort will be made to update the line numbers as the code is updated periodically, but there may be times where the screenshots and line numbers are slightly different than the current version of Loop code.]\n\n\nDefault Carb Absorption Times\n\n\n\n\nLoop\u2019s default carb absorption times are based on the high, medium, and low glycemic index absorption curves presented in \nThink Like A Pancreas\n by Gary Scheiner.  Currently the lollipop icon is set for 120 minutes, taco icon for 180 minutes, and pizza icon for 240 minutes.  These default values may not work for everyone, you will need to find what works for you.\n\n\nYou can modify these defaults to suit your needs, however it would be best to test your own carb absorption patterns before necessarily adjusting the defaults.  You can always modify these after you\u2019ve had some Loop experience and simply reinstall the Loop.  (after all, you\u2019re a pro at that now)  Section 6 provides some examples of analyzing meal and Loop behaviors to determine if your carb absorption times are accurate.\n\n\nIf you would like to modify those defaults, you can do so in the DeviceDataManager.swift Line 1040.  Note, the times are in hours, not minutes, in the code.\n\n\n\n\nLoop Logo\n\n\nIf you want an app logo other than the default green circle for your Loop app, you can easily customize this.  To make it easy to generate the correct sizes of icons, you can use a site like \nappicon.build\n and just drag and drop your source image. The site will email you a zip file.  Double click the zip file, choose the \u201cios\u201d folder, and copy the contents of the Appicon.appiconset as shown highlighted below.\n\n\n\n\nNow navigate to the corresponding Loop folder as shown below.  Replace the contents of the Appicon.appiconset with your copied images.\n\n\n\n\nYou can confirm the successful change by looking in Xcode.  You should see your custom logo in the Appicon set now.  You will also likely see a yellow alert that there are \u201c5 unassigned children\u201d.  This alert will not prevent your app from building, it\u2019s simply because the zipfile contained more sizes of images than Loop app uses.  You can just leave the unassigned images as is.\n\n\n\n\nLoop Graph hours\n\n\nIf you want the Loop\u2019s graphs to display different time length than the default, you will go to the StatusTableViewController.swift line 181. This code keeps track of how many hours to display in total and how far into the future to display on your graphs. For total hours it does a calculation based upon your screen size and how granular to display between each segment. For how far forward to display, it currently uses your Insulin Action Duration setting to determine this (and if that number is missing for some reason it defaults to 4 hours).\n\n\nPlease note, using this will make it more difficult to see changes in other charts on your screen (like length of temp basal).\n\n\n\n\nHere are a couple of ways you could modify line 181 based on your specific wants:\n\n\nWant double the amount of total hours shown?\n\nlet historyHours = (totalHours * 2) - (dataManager.insulinActionDuration ?? TimeInterval(hours: 4)).hours\n\n\nWant 1/2 of my Insulin Action Duration to show in the future?\n\nlet historyHours = totalHours - ((dataManager.insulinActionDuration / 2) ?? TimeInterval(hours: 4)).hours\n\n\nWant 2.5 x the total time and only 2 hours forward within that?\n\nlet historyHours = (totalHours * 2.5) - (TimeInterval(hours: 2)).hours\n\n\nWorkout Range Duration\n\n\n\nIf you\u2019d like more than just the standard 1 or 2 hour duration for the Workout Range, you can add or modify the code to add another time interval or edit the existing ones.\n\n\nGo to the Loop\nExtensions\nUIAlertController.swift and modify Line 30.  The default has 1 and 2 hours as shown where the arrow is pointing in the screenshot.  You can edit those to whatever duration you want (in units of hours) and add a duration if you prefer.  If you\u2019d like 1, 2, and 3 hours options...simply edit the numbers in the brackets to read [1, 2, 3]. It is possible to enter less than 1 hour intervals such as 15min, 30 min, 45 min by editing the brackets to read [0.25, 0.5, 0.75].\n\n\n\n\nApple Watch Customizations\n\n\nRecommended Bolus Autofill\n\n\nThe Apple Watch's default is to autofill to 75% of the recommended bolus.  If you wish, you can customize so that the watch autofills a different percentage. To do this, the multiplier can be changed from 0.75 to a value of your choice. A value of 1 will autofill 100% of the recommended bolus. A value of 0 will autofill 0% of the recommended bolus.   Go to the Loop Watchapp Extension Folder, within that go to the controllers folder, within that go to BolusInterfaceController.swift. Edit the section of line 97 as indicated on the picture below.\n\n\n\n\nAdjust sensitivity of digital crown for carb and bolus entry\n\n\nThe rate of change of the carb and bolus entry pickers when using the digital crown can be altered. Navigate to the WatchApp Extension folder and within that the Controllers folder. Edit line 130 of AddCarbsInterfaceController.swift and line 161 of BolusInterfaceController.swift. The 1/24 value is the ratio of rotations of the crown to the amount of change in the value. Changing it to 1/12 would mean that twice as many turns would be needed for the same amount of carb or bolus entry.\n\n\nCommit to GitHub\n\n\nOptional Step:  If you would like to commit customizations back into your GitHub repository, you can do that quite easily IF you used the GitHub desktop client to get your Loop source code.  The advantage of doing this is that when Loop releases a new version, you can use GitHub to update your Loop\u2019s code to the new version without needing to redo your code customizations.  You will also have a copy of your customized Loop code available online if you need to do a Loop app rebuild while away from home.\n\n\nAfter you\u2019ve made your customizations to your Loop code, go to the Xcode Source Control menu and choose \u201cCommit\u201d.\n\n\n\n\nOnce you have committed the changes, you will be able to see the changes highlighted in your GitHub desktop client\n\n\n\n\nFinally, go to the same Source Control menu in Xcode that you just used to \u201cCommit\u201d and this time choose \u201cPush\u201d.  This will push your code customizations up to your GitHub repository.  You can confirm this by finding the Loop.xcconfig file and looking at the MAIN_APP_BUNDLE_IDENTIFIER.  It should no longer say \ncom.loopkit\n.", 
            "title": "Installing"
        }, 
        {
            "location": "/build/installing/#installing-loop", 
            "text": "You\u2019re ready to get to the real stuff now, right?  Excited to get Looping?  Let\u2019s do it.  Let\u2019s put that Loop on your iPhone.", 
            "title": "Installing Loop"
        }, 
        {
            "location": "/build/installing/#setup-your-apple-computer", 
            "text": "", 
            "title": "Setup your Apple Computer"
        }, 
        {
            "location": "/build/installing/#install-xcode", 
            "text": "Did you go to the  Apple App Store ? It\u2019s an application on your Apple Computer.  Open it and search for Xcode.  Download and install it for free.  Easy peasy.  Except it takes about 20-40 minutes to download depending on your internet speed.", 
            "title": "Install Xcode"
        }, 
        {
            "location": "/build/installing/#install-carthage", 
            "text": "The installation of Carthage has a few different ways it can be done, but the easiest is to download the Carthage package here:  Carthage.pkg download          Find the downloaded  carthage.pkg  in your Downloads folder (option-command-L while in Finder will bring up your Downloads folder).  Double-click the file and follow the directions to install (basically give your computer\u2019s password and it does the rest).  Done.  Nothing more needs to happen with Carthage (it runs in the background).   IF you have problems with that method, you can use the \u201cHomebrew method\u201d.  And here\u2019s how it is done:\nOpen the Terminal application on your Apple computer (it is located in the Utilities application folder)  Copy and paste the line below into the prompt in Terminal.  Press return after you paste it in.  /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"  There will be a prompt asking if you want to continue (press return to continue, then it may prompt for your password.  enter your computer user password.).  Wait while the script does its thing...you\u2019ll see info scroll by and then it will pause for awhile.  Eventually, it will be done and you\u2019ll see something that says \u201cInstallation successful\u201d and you\u2019ll have a ready terminal prompt again.  Type  brew update  and press return.  Type  brew install carthage  and press return.  You can close the Terminal application now.  You\u2019re done with it.  Phew.", 
            "title": "Install Carthage"
        }, 
        {
            "location": "/build/installing/#download-loop-source-code", 
            "text": "You\u2019ll need to obtain the Loop\u2019s source code in order to build the app on your computer.  There are various ways of doing that; from super easy to more advanced. Pick whichever method you are comfortable with.  The first two options do not require a GitHub account.  The last option will require you to have a GitHub account.  {Note: What\u2019s the disadvantage of the Super Easy option below?  Any customizations you do in Xcode will remain on your local computer only.  If Loop\u2019s source code updates to a new version, you will have to re-enter your customizations if/when you decide to update your Loop to subsequent versions.  However, most customizations are probably going to be fairly quick and easy to redo, just like they were the first time.}", 
            "title": "Download Loop Source Code"
        }, 
        {
            "location": "/build/installing/#option-1-direct-download-super-easy", 
            "text": "If you click on the link below, a copy of the Loop source code\u2019s master branch will be downloaded to your downloads folder.  Loop Master branch", 
            "title": "Option 1: Direct Download (Super Easy)"
        }, 
        {
            "location": "/build/installing/#option-2-clone-with-terminal-sorta-easy", 
            "text": "Open Terminal Application, copy and paste the line below.  This will download a clone of the master branch to your root directory of your computer user account:  git clone https://github.com/LoopKit/Loop.git", 
            "title": "Option 2: Clone with Terminal (Sorta easy)"
        }, 
        {
            "location": "/build/installing/#option-3-github-desktop-fork-and-pull-the-repo-advanced", 
            "text": "Login to your GitHub account and fork a copy of the  Loop repository .    Setup a sync between your GitHub repository and your computer by installing  Github Desktop  onto your computer.  Go back to your Loop repository in GitHub and press the green \u201cClone or download\u201d button and choose \u201copen in desktop\u201d.  You will now have a copy of the selected branch in stored in your local folder.     You can later go into the GitHub desktop client and commit your changes, change branches, etc as you test various configurations.  See Section 4.3.6 for further information about how to commit those changes back to your repository.", 
            "title": "Option 3: GitHub Desktop, Fork and Pull the Repo (Advanced)"
        }, 
        {
            "location": "/build/installing/#install-loop-using-xcode", 
            "text": "Here\u2019s where the fun really begins.  You\u2019re about to build your Loop app.  If you\u2019ve used the direct download option (super easy), go to your Downloads folder, open the Loop folder, and double click on Loop.xcodeproj.     If you used another option, find the Loop folder on your computer and double click on Loop.xcodeproj  A warning may appear asking if you really want to open it, click Open.  Xcode will open the project, and take a few moments to organize the files.   Once Xcode has finished indexing, the Loop project will appear in the far left column.  Click on the blue Loop icon, and then click on the file called Loop.xcconfig.  The middle portion of Xcode window will populate and this is where you will find the MAIN_APP_BUNDLE_IDENTIFIER. The default is com.loopkit   You need to change the MAIN_APP_BUNDLE_IDENTIFIER  to your own unique identifier.  Keep it in the reverse-domain syntax, meaning start with \u201ccom.\u201d (no quotes though).  After you enter your new MAIN_APP_BUNDLE_IDENTIFIER, save the project using Command-S, and then click on the blue \u201cLoop\u201d file in the far left column.   The next steps are to \u201csign\u201d the application so that Apple will allow its use on the iPhone.  You will need to select a \u201cteam\u201d.  If you already have a team from previous Xcode projects, you may see teams listed.  Use the dropdown menu to select the appropriate team.  Make sure you keep the \u201cautomatically manage signing\u201d box checked.    If, however, this is your first time signing an app in Xcode, your screen may instead look like the screen to the right.  In which case, you will need to add a developer account (either free or paid) by clicking on \u201cAdd Account\u201d.     \u201cAdd Account\u201d will open the Xcode preferences window, as shown below.  You will need to sign in with your Apple ID (or create one, if you don\u2019t already have one).   Once you get signed in, your Apple ID will appear under the Accounts section as shown below.  Close that window by pressing the little red circle in the upper left corner, and you will return to the main Xcode screen again.  Note: You may need to close Xcode and restart to see your Apple account for signing to appear in the Signing section.    Beginning of SIDE NOTE about signing and Provisioning Profiles.  The 7-day free Provisioning Profiles are signed from \u201c(Personal Team)\u201d.  The full-year paid Provisioning Profiles do NOT have \u201c(Personal Team)\u201d   Many people think \u201cHey I\u2019ll try to build this Loop for free and if I like it, then I\u2019ll buy the $99 Apple Developer license.\u201d  If that\u2019s you right now, please come back here when you are ready to reinstall as a paid developer account.  You will need to:   Select the correct team because now there will be two to choose from.  Use the one without the \u201c(Personal Team)\u201d to build apps that last a full 12 months.  When you rebuild your app, choose a new MAIN_APP_BUNDLE_IDENTIFIER different than your previous one.  For example, if you used \u201ccom.yourname\u201d on the free app then choose \u201ccom.yourname2\u201d for the new paid app.    You will have to re-enter your Loop settings on your new app once it is installed (hopefully, you took written notes of them from when you were running your free app..hint hint).   End of SIDE NOTE   When you return to the main screen, select your team name and you may see two status warnings.  The first warning may appear if you do not have an iPhone plugged into the Mac.  The \u201cfailed to create a provisioning profile\u201d has details that should alert you to plug in your device (iPhone).  Once you connect your iPhone via cable to the Mac, select your iPhone from the hidden drop down list (see red arrow below).  Your device\u2019s personal name should be at the top of the list.  Select your personal device. You may need to \u201cregister the device\u201d if this is your first time using Xcode with that iphone, follow the prompt if that\u2019s the case.   Once you select your device, Xcode should resolve the warnings and generate a Provisioning Profile.  If you click on the information icon (little \u201ci\u201d in the circle), for the Provisioning Profile, you can verify the signing date and mark your calendar for rebuilding in 7 days if you are using a free Apple Developer account.  If you are enrolled in the Apple Developer Program (aka paid the $99), the expiration date will be for a year from the creation date.  Finally, you need to make sure to sign all FOUR \u201ctargets\u201d to the application; Loop, Loop Status Extension, WatchApp, and WatchApp Extension.  So far, we have only signed the Loop target.  Click on the blue \u201cLoop\u201d on the left and then the box with the vertical line to drop down the targets list.  Choose each of the remaining three targets and then select the signing team that you selected previously in the Loop target signing. Make sure you have signed all four targets.  If the \u201cloopkit\u201d still appears on the Bundle Identifier line, don\u2019t worry about it.  Xcode will update that to your chosen MAIN_APP name when it builds.  Sometimes Xcode is just slow to rename.  Just leave that Bundle Identifier line untouched.    At this point in the process, you should make any custom configurations to your Loop app before you finish with the installation of Loop on your iPhone.  If you want to make any of the customizations yourself, the step-by-step instructions are provided below (or by clicking on the link to the left).  When you\u2019ve completed those customizations, please return here and follow the next steps to finish the installation of Loop.   All done with customizations? Let\u2019s finish the installation of the Loop app onto your iPhone.  Select your device and then press the \u201cplay\u201d button (or build button) to start Xcode on its way.  [You may be prompted to add the iPhone to your Developer Account...go ahead and do so.]  You\u2019ll see the progression of the build in the status window.  If the build is successful, it will say \u201cfinished running Loop\u201d in the status bar.  If the build fails, it will show you red error alerts and you can read what the failure was.  Yellow error alerts do not cause the build to fail, those are just warnings.   If this is the first time you have installed an app on your iPhone using your Developer Account, you may get a warning like this.  Just follow the directions in the warning, and the issue resolves very quickly.  Click ok and you can safely disconnect your iPhone from the computer.  (If you don\u2019t get a warning and the Loop app installs but does not open, you may still need to go to Settings- General- Device Management and enable trust for your Developer Account.)   You can confirm Loop has installed on your phone simply by looking on the iphone.  Turn it on and check if the Loop app is running, or locating the Loop app icon.  If you don\u2019t see it, try pressing the build (play) button again.  There should be a message at the top of Xcode window indicating a successful build.  Once you get confirmation and can see Loop on your iPhone, you can simply unplug from computer.    CONGRATS!  YOU JUST INSTALLED LOOP!  ...", 
            "title": "Install Loop using Xcode"
        }, 
        {
            "location": "/build/installing/#code-customizations", 
            "text": "Based on Loop users\u2019 experience, there are some customizations that you may want to incorporate ahead of building your Loop app.  These customizations must be done prior to building the Loop app onto your iPhone, they cannot be done from within the app itself.  [Note: To help you find the Line numbers in Xcode, it may be helpful to turn them on now.  Go to Xcode Preferences, under Text Editing, click the box to Show Line Numbers.  Every effort will be made to update the line numbers as the code is updated periodically, but there may be times where the screenshots and line numbers are slightly different than the current version of Loop code.]", 
            "title": "Code Customizations"
        }, 
        {
            "location": "/build/installing/#default-carb-absorption-times", 
            "text": "Loop\u2019s default carb absorption times are based on the high, medium, and low glycemic index absorption curves presented in  Think Like A Pancreas  by Gary Scheiner.  Currently the lollipop icon is set for 120 minutes, taco icon for 180 minutes, and pizza icon for 240 minutes.  These default values may not work for everyone, you will need to find what works for you.  You can modify these defaults to suit your needs, however it would be best to test your own carb absorption patterns before necessarily adjusting the defaults.  You can always modify these after you\u2019ve had some Loop experience and simply reinstall the Loop.  (after all, you\u2019re a pro at that now)  Section 6 provides some examples of analyzing meal and Loop behaviors to determine if your carb absorption times are accurate.  If you would like to modify those defaults, you can do so in the DeviceDataManager.swift Line 1040.  Note, the times are in hours, not minutes, in the code.", 
            "title": "Default Carb Absorption Times"
        }, 
        {
            "location": "/build/installing/#loop-logo", 
            "text": "If you want an app logo other than the default green circle for your Loop app, you can easily customize this.  To make it easy to generate the correct sizes of icons, you can use a site like  appicon.build  and just drag and drop your source image. The site will email you a zip file.  Double click the zip file, choose the \u201cios\u201d folder, and copy the contents of the Appicon.appiconset as shown highlighted below.   Now navigate to the corresponding Loop folder as shown below.  Replace the contents of the Appicon.appiconset with your copied images.   You can confirm the successful change by looking in Xcode.  You should see your custom logo in the Appicon set now.  You will also likely see a yellow alert that there are \u201c5 unassigned children\u201d.  This alert will not prevent your app from building, it\u2019s simply because the zipfile contained more sizes of images than Loop app uses.  You can just leave the unassigned images as is.", 
            "title": "Loop Logo"
        }, 
        {
            "location": "/build/installing/#loop-graph-hours", 
            "text": "If you want the Loop\u2019s graphs to display different time length than the default, you will go to the StatusTableViewController.swift line 181. This code keeps track of how many hours to display in total and how far into the future to display on your graphs. For total hours it does a calculation based upon your screen size and how granular to display between each segment. For how far forward to display, it currently uses your Insulin Action Duration setting to determine this (and if that number is missing for some reason it defaults to 4 hours).  Please note, using this will make it more difficult to see changes in other charts on your screen (like length of temp basal).   Here are a couple of ways you could modify line 181 based on your specific wants:  Want double the amount of total hours shown? let historyHours = (totalHours * 2) - (dataManager.insulinActionDuration ?? TimeInterval(hours: 4)).hours  Want 1/2 of my Insulin Action Duration to show in the future? let historyHours = totalHours - ((dataManager.insulinActionDuration / 2) ?? TimeInterval(hours: 4)).hours  Want 2.5 x the total time and only 2 hours forward within that? let historyHours = (totalHours * 2.5) - (TimeInterval(hours: 2)).hours", 
            "title": "Loop Graph hours"
        }, 
        {
            "location": "/build/installing/#workout-range-duration", 
            "text": "If you\u2019d like more than just the standard 1 or 2 hour duration for the Workout Range, you can add or modify the code to add another time interval or edit the existing ones.  Go to the Loop Extensions UIAlertController.swift and modify Line 30.  The default has 1 and 2 hours as shown where the arrow is pointing in the screenshot.  You can edit those to whatever duration you want (in units of hours) and add a duration if you prefer.  If you\u2019d like 1, 2, and 3 hours options...simply edit the numbers in the brackets to read [1, 2, 3]. It is possible to enter less than 1 hour intervals such as 15min, 30 min, 45 min by editing the brackets to read [0.25, 0.5, 0.75].", 
            "title": "Workout Range Duration"
        }, 
        {
            "location": "/build/installing/#apple-watch-customizations", 
            "text": "", 
            "title": "Apple Watch Customizations"
        }, 
        {
            "location": "/build/installing/#recommended-bolus-autofill", 
            "text": "The Apple Watch's default is to autofill to 75% of the recommended bolus.  If you wish, you can customize so that the watch autofills a different percentage. To do this, the multiplier can be changed from 0.75 to a value of your choice. A value of 1 will autofill 100% of the recommended bolus. A value of 0 will autofill 0% of the recommended bolus.   Go to the Loop Watchapp Extension Folder, within that go to the controllers folder, within that go to BolusInterfaceController.swift. Edit the section of line 97 as indicated on the picture below.", 
            "title": "Recommended Bolus Autofill"
        }, 
        {
            "location": "/build/installing/#adjust-sensitivity-of-digital-crown-for-carb-and-bolus-entry", 
            "text": "The rate of change of the carb and bolus entry pickers when using the digital crown can be altered. Navigate to the WatchApp Extension folder and within that the Controllers folder. Edit line 130 of AddCarbsInterfaceController.swift and line 161 of BolusInterfaceController.swift. The 1/24 value is the ratio of rotations of the crown to the amount of change in the value. Changing it to 1/12 would mean that twice as many turns would be needed for the same amount of carb or bolus entry.", 
            "title": "Adjust sensitivity of digital crown for carb and bolus entry"
        }, 
        {
            "location": "/build/installing/#commit-to-github", 
            "text": "Optional Step:  If you would like to commit customizations back into your GitHub repository, you can do that quite easily IF you used the GitHub desktop client to get your Loop source code.  The advantage of doing this is that when Loop releases a new version, you can use GitHub to update your Loop\u2019s code to the new version without needing to redo your code customizations.  You will also have a copy of your customized Loop code available online if you need to do a Loop app rebuild while away from home.  After you\u2019ve made your customizations to your Loop code, go to the Xcode Source Control menu and choose \u201cCommit\u201d.   Once you have committed the changes, you will be able to see the changes highlighted in your GitHub desktop client   Finally, go to the same Source Control menu in Xcode that you just used to \u201cCommit\u201d and this time choose \u201cPush\u201d.  This will push your code customizations up to your GitHub repository.  You can confirm this by finding the Loop.xcconfig file and looking at the MAIN_APP_BUNDLE_IDENTIFIER.  It should no longer say  com.loopkit .", 
            "title": "Commit to GitHub"
        }, 
        {
            "location": "/build/configuration/", 
            "text": "Configuring your Loop\n\n\nNow that you have the Loop app installed on your iPhone, we need to input the settings so that the Loop can work for you.  In this section, we cover the details and provide information about the Loop displays.  Finally, we will cover some extras like Apple Watch and useful external integrations.\n\n\nSettings\n\n\n\n\n\n\n \n\n\nNormally, we would start by explaining the displays on an application, but your Loop won\u2019t have much showing initially until we get some basic settings input.  So, let\u2019s start by clicking on the Loop Settings button in the tool bar.  It looks like a little sprocket.\n\n\nLoop Version\n\n\n\n\n\n\n\n\n\nThe first graphic at the top of the Loop settings display shows the version of the software, e.g.,  Loop v1.1 in this example.  This can be helpful when working with other users of the software to know what version you are running.\n\n\nClosed Loop\n\n\nThe Closed Loop switch controls the Loop operation mode for the application. This operation mode determines whether Loop automatically enacts recommendations (i.e., sets temp basals) to the insulin pump.  \n\n\n\n\n\n\n\n\n\nWhen the Closed Loop switch is in the (Off\n   ) position, Loop WILL NOT enact recommended temp basals automatically.  Instead, it will display Recommended Temp Basals on the main status display, just above the Glucose graph.  This is called \u201cOpen Loop\u201d, and is a good way to understand how Loop will function, and what type of recommendations it would make.  \n\n\n\n\n\n\n\n\n\nWhen the Closed Loop switch is in the (\n   On) position, Loop WILL automatically enact recommended temp basals on the configured insulin pump. This is known as a \u201cClosed Loop\u201d.  Typically, Loop will show the recommended temp basal just above the Glucose graph prior to automatically enacting it.  It may take a minute or so for the Loop to enact the recommended basal.  Once the temp basal has been enacted successfully on the pump, the recommended temp basal will disappear from the screen and the new temp basal will be represented in the insulin delivery graphics.\n\n\nPreferred Data Source\n\n\n\n\n\n\n\n\n\nIf Preferred Data Source is set to \u201cEvent History\u201d, then the pump will periodically be polled for treatment events.  This will cause your battery to be used at a faster rate, but will allow Loop to upload \u201ctreatments\u201d to Nightscout. \nEvent History must be selected for Nightscout to display temp basals, carbs, and boluses from Loop.\n\n\nEven with Preferred Data Source set to \u201cEvent History\u201d, the reservoir volume will still be used to determine IOB, except in a few cases, such as when reservoir volumes have increased (in other words, reservoir was changed or refilled), or when the reservoir history is missing at least 30 minutes of continuous readings.\n\n\nEvent History = More Accurate Treatment Data, and Upload of Treatments to Nightscout\n\n\nReservoir = Improved pump battery economy by using MySentry data for Reservoir Readings (x23 pumps only) \n\n\nIssue Report\n\n\nIf you run into problems or errors with your Loop, the Issue Report can be used to help identify where the problem is occurring.  The Issue Report is automatically generated and you can share it via email.  Frequently, if you go to Gitter or Facebook for help with a technical problem, an Issue Report will provide insight to what the potential problem is.\n\n\nPump ID\n\n\nFairly self-explanatory.  You need to enter your pump\u2019s six-digit ID here.  To find your pump ID, press ESC button on the pump, scroll down.  You will find a the six digit ID as the \u201cS/N#\u201d.  You will also find the same ID number on the back of the pump as six numbers beneath the pump\u2019s model number.  There are also explanations so you can identify if the pump\u2019s region.  This makes a difference for how the RileyLink will tune its frequency for pump communications.\n\n\nPump Battery Type\n\n\nAgain fairly self-explanatory.  Click which battery type you are using so that the battery percentages are more accurately displayed in your HUD.  The battery displays are designed to give you approximately 8-10 hours notice before looping would fail.  However, every battery manufacturer has its own decay curve for its specific batteries.  Typically, low battery levels will cause looping failures prior to the actual pump failing to delivery insulin. \n\n\nCGM Selection\n\n\nSelect one of the options from the menu:\n\n\n\n\nFetch Enlite Data\n\n\nG4 Share Receiver\n\n\nG5 Transmitter\n\n\n\n\nIf you select the G5 Transmitter, you will be prompted to enter the transmitter ID number.  Don't forget to update your transmitter ID when you change transmitters, otherwise your loop will not work.\n\n\nTarget Range\n\n\nThis is where you set your target blood glucose range.  This is the low and high BG values that Loop will attempt to keep you between.  Click the + in the upper right corner to add target BG range(s).  You can have multiple targets based on time of day, but for safety purposes the first setting of the day should begin at midnight to be consistent with your Medtronic pump.  \n\n\nTargets will be entered in mg/dl or mmoL automatically based upon how your BG values appear your BG chart. By default they are set to mg/dl, however once BG values arrive in mmoL these settings can be entered in mmoL. If you are planning to use mmoL, be sure to wait to set your target range up until after you have started to receive BG values. If you do these in the wrong order, then your chart may have incorrect Y axis. If you come across this issue, you can also remove all of your target ranges and enter them again. Once you are receiving BG values in mmoL, you can add your Target Range in mmoL.\n\n\nYou can also set the \u201coverride\u201d targets here to temporarily use alternate BG targets.  These override targets will only be enacted when you specifically activate \u201cWorkout Mode\u201d.\n\n\nWhen initially setting up the Loop, it may be safer to start with a slightly higher target range than you may normally use.  This safety factor helps prevent lows in case your basals or other T1D-specific inputs were not well-determined prior to using Loop.  Slowly adjust the target BG range as you become more comfortable with the Loop\u2019s performance and refine your T1D inputs.   \n\n\nTarget range can be a single number, such as 100-100 mg/dL, but is not necessarily advised or \u201cbetter\u201d.\n\n\nMinimum BG Guard (Loop v1.3 or newer)\n\n\nMinimum BG Guard is a required data entry for successful configuration of Loop.  This feature was added in Loop version v1.3 and later.  \nYour Loop will not turn green without setting this value.\n  \n\n\nMinimum BG Guard allows a user to bolus when their BG is below their \u201cTarget Range\u201d but not below the value of the Minimum BG Guard.  To help users understand how this setting is affecting their usage of Loop, users will see a new notification icon and details of why there is no recommended bolus if the predicted BG is below the Minimum BG Guard.  \n\n\nInsulin Action Duration (DIA)\n\n\nEnter your insulin action duration here in hours.  This is also called Duration of Insulin Action (DIA).  Typically, close-loopers use between 3-4 hours with good success.  However, your diabetes may vary.  This number is a real number so decimals work here for fractions of hours. Like (2.5) = 2hrs 30 mins\n\n\nBasal Rates\n\n\nEnter your basal rates here.  These should match the values entered in your pump. Entering them here will not override your pump\u2019s values, so make sure they match. This is fairly standard stuff that most T1Ds are already familiar with.  However, if you are new to Medtronic pumps...keep in mind that your insulin needs may change slightly when changing pump systems.  If in doubt, try some basal testing to see if your old basal rates may need adjustments with the switch to Medtronic pumps and infusion sets.\n\n\nOnly one basal pattern may be set in each Loop app.  If you are accustomed to switching between two or more basal patterns frequently, you have two options:\n\n\n\n\nmanually editing the basal profiles in this area each time you change basals, or\n\n\ninstalling a duplicate Loop app for each basal pattern and switching when needed.\n\n\n\n\nIf you choose to have duplicate Loop apps, you will need to use different MAIN_APP_BUNDLE_IDENTIFIERs for each app.  Additionally, you must remember to close  the unused Loop app (double-click iPhone home button and up-swipe Loop app).  Only one Loop app can run successfully at a time.  When you switch to the new Loop app, it may take 5-15 minutes for the Loop to turn green.  The good news is that all your carb entries, insulin doses and such will automatically populate in the new Loop within a relatively short amount of time and the transition is therefore seamless for Loop functionality.  \n\n\nCarb Ratios\n\n\nClick the + in the upper right to add carb ratios for various times of day. Loop works best if you have tested and optimized your carb ratio settings for accuracy.\n\n\nInsulin Sensitivities\n\n\nClick the + in the upper right to add insulin sensitivities for various times of day. Loop works best if you have tested and optimized your ISF settings for accuracy.  Insulin sensitivities can change for many reasons including waiting too long to change your infusion set.  Loop will not auto-detect changes in ISF.\n\n\nMaximum Basal Rate\n\n\nMaximum basal rate is the maximum temporary basal rate that the Loop is allowed to enact to correct to your target BG range.  \n\n\nWhen you are first beginning to use Loop, it is important to be conservative (low) in setting your maximum basal rate.  If your settings are incorrect in other areas (basal rates, carb absorption time, carb ratio, etc), the Loop may enact incorrectly aggressive high temp basals.  Gradually increase your maximum basal rate as your comfort and confidence in Loop increase.  Typically, experienced closed loop users set their max basal rate no more than 3-4 times their average basal rate.  \n\n\nNOTE:  A frequent error for new Loop users is when they set their maximum basal rate here to a value HIGHER than the corresponding setting on the pump.  This will result in an error message that the temp basal failed to enact.  For example, Loop cannot successfully tell the pump to deliver 4 units per hour if the pump\u2019s maximum is set to only 3.8 units per hour.  If you are seeing failures of the Loop to set a high temp basal, check to see if your pump\u2019s maximum basal is at greater than or equal to the Loop\u2019s maximum basal.\n\n\nMaximum Bolus\n\n\nEnter your desired single bolus maximum here.\n\n\nServices\n\n\nThe services listed in this section are optional.  You can choose to leave them empty and your Loop will still work.  \n\n\nDexcom Share\n\n\nAdding your Dexcom Share account information here will allow Loop to pull CGM data from the Dexcom servers in the event the Loop is not able to pull the data directly from the G4 receiver.  When Loop is receiving CGM data using this option, a little cloud icon will appear on the CGM reading in the Loop\u2019s mainscreen.\n\n\nNightscout\n\n\nIf you have an existing Nightscout site, add the Site URL and API Secret to have your Loop data transmitted to your Nightscout site. If you can\u2019t remember your API Secret, it can be found under Settings, Reveal Config Vars for Heroku sites (or Application Settings, Connection Strings for Azure sites). \n\n\nFor additional information about how to configure your Nightscout site for Loop use, please see the Nightscout section of these docs.\n\n\nmLab\n\n\nEnter your database name and API Key here.  \n\n\nAmplitude\n\n\nEnter your API Key and click \u201cadd account\u201d.\n\n\nRileyLink\n\n\nIf you ordered your RileyLink preassembled, you should plug in the battery cable.  Please make sure your RileyLink\u2019s battery cable is securely pushed all the way into the socket.  Poor battery cable connection can make the Loop communications fail.\n\n\nRileyLink with loose battery cable.\n\n\nRileyLink with properly secured battery cable.\n\n\nRileyLink is turned on with a little switch on the side of the circuit board (little blue lights will flash briefly and then turn off).  The \u201con\u201d position is with the switch towards the battery plug.  Now that you have it turned on, go back to your Loop settings and under \u201cDevices\u201d, there will be a connection to turn on.  Turn it on (slide to green) and then click on the arrow to the right of the green slider to open the RileyLink settings area.  {Note: your RileyLink will now have a solid green light showing.  The solid green light indicates a working bluetooth connection with your iPhone.}\n\n\nDevice\n\n\nThe settings under the Device section are mostly for your information only.  However, you can rename your RileyLink to something more unique.  This is a good idea if you own more than one or are ever in the presence of more than one RileyLink...you will be able to pick out your connection easier amongst a crowd of \u201cRileyLinks\u201d\n\n\nPump\n\n\nThe Pump ID should be automatically filled in from the setting you have already entered previously.  The pump model will say unknown until we proceed with \u201cTune Radio Frequency.\u201d \n\n\nCommands\n\n\n\n\nTune Radio Frequency: Choose \u201cTune Radio Frequency\u201d. (This may be seen as Settings/Commands/916.65MHz with a right arrow to enter the screen.)  It may take about a minute, but soon you will see a list of frequencies and you can exit back to the main RileyLink settings.  The Command line will now show the frequency (916.60 MHz in this case) in the first command line and the timestamp of the tune.  Now your pump and RileyLink are tuned to talk to each other.\n\n\n\n\nNote:  The strength of the radio communications with the pump is shown by the last number of the tune.  Tuning with -99 means NO communications were established.  Generally, if you have tuning in the -90s, your RileyLink-pump communications will not work.  If you have tuning in the -80s, you may have periodic communication failures.  If your tuning is in the -70s or better, your communications should be pretty stable.\n\n\n(Note: for the rest of these items you may first need to set a pump Remote ID as per section 5.1.8, if you haven\u2019t already.)\n\n\n\n\n\n\nChange Time:  Choose \u201cchange time\u201d so that pump and Loop times will match exactly.  You should never use the pump itself to set the pump\u2019s time.  Use the RileyLink and Loop app.\n\n\n\n\n\n\nMySentry Pair:  MySentry Pairing is for x23 and x54 pumps.  Follow the directions on the iPhone screen.  You do not have to worry about this command if you are using an x15 or x22 model pump, as they do not have MySentry.\n\n\n\n\n\n\nFetch Recent History, Fetch Recent Glucose, Get Pump Model, and Send Button Press are all ways of asking the pump for information you might be interested in.  They are not part of setting up the Loop.  Send Button Press can be useful to see if the communication between the RileyLink and pump is working.  If successful, the screen on the pump will light up and Loop will confirm the button press with a \u201csuccess\u201d message.\n\n\n\n\n\n\nPump Setup\n\n\nNow that you are done with your Loop app settings, you need to finish setting up your pump for Loop use.  Generally, the setup of the pump is similar to setting up any pump for non-looping use.  {Except, you will need to change those batteries more often with Looping.  Loop will drain pump batteries much faster than regular pump regimes, and Loop failures will increase in frequency as the pump battery gets low.}\n\n\nWhile not every setting NEEDS to match between Loop and pump, it is safer to have them match in case your Loop fails and you revert back to normal pump use.  You should program the pump settings to match for:\n\n\n\n\nBasal program(s)\n\n\nCarb ratio\n\n\nISF\n\n\nMax bolus\n\n\nInsulin action duration\n\n\nBG targets\n\n\n\n\nThree settings in particular need to be done, OR ELSE YOUR LOOP WON'T WORK:\n\n Set \u201cmax temp basal\u201d in pump to at least equal to (or slightly greater) than the Loop\u2019s max basal\n\n Set \u201ctemp basal type\u201d to \u201cinsulin rate (u/h)\u201d\n* Set Remote ID to \"on\" and enter any random ID (000000 will work). This is found in the pump's Utilities (for x23 continue to Connect Devices, Remotes) and turn ON the Remote Options.\n\n\n\nCONGRATS...your Loop is ready for use.  But are you?  Have you read through the algorithm?  Have you watched the pump in open loop mode?  Have you read about how to safely do site changes and priming?  Do you know how to troubleshoot your Loop?  Please take the time to read the other sections of this guide as they will help you navigate safe looping practices.", 
            "title": "Configuration"
        }, 
        {
            "location": "/build/configuration/#configuring-your-loop", 
            "text": "Now that you have the Loop app installed on your iPhone, we need to input the settings so that the Loop can work for you.  In this section, we cover the details and provide information about the Loop displays.  Finally, we will cover some extras like Apple Watch and useful external integrations.", 
            "title": "Configuring your Loop"
        }, 
        {
            "location": "/build/configuration/#settings", 
            "text": "Normally, we would start by explaining the displays on an application, but your Loop won\u2019t have much showing initially until we get some basic settings input.  So, let\u2019s start by clicking on the Loop Settings button in the tool bar.  It looks like a little sprocket.", 
            "title": "Settings"
        }, 
        {
            "location": "/build/configuration/#loop-version", 
            "text": "The first graphic at the top of the Loop settings display shows the version of the software, e.g.,  Loop v1.1 in this example.  This can be helpful when working with other users of the software to know what version you are running.", 
            "title": "Loop Version"
        }, 
        {
            "location": "/build/configuration/#closed-loop", 
            "text": "The Closed Loop switch controls the Loop operation mode for the application. This operation mode determines whether Loop automatically enacts recommendations (i.e., sets temp basals) to the insulin pump.       When the Closed Loop switch is in the (Off    ) position, Loop WILL NOT enact recommended temp basals automatically.  Instead, it will display Recommended Temp Basals on the main status display, just above the Glucose graph.  This is called \u201cOpen Loop\u201d, and is a good way to understand how Loop will function, and what type of recommendations it would make.       When the Closed Loop switch is in the (    On) position, Loop WILL automatically enact recommended temp basals on the configured insulin pump. This is known as a \u201cClosed Loop\u201d.  Typically, Loop will show the recommended temp basal just above the Glucose graph prior to automatically enacting it.  It may take a minute or so for the Loop to enact the recommended basal.  Once the temp basal has been enacted successfully on the pump, the recommended temp basal will disappear from the screen and the new temp basal will be represented in the insulin delivery graphics.", 
            "title": "Closed Loop"
        }, 
        {
            "location": "/build/configuration/#preferred-data-source", 
            "text": "If Preferred Data Source is set to \u201cEvent History\u201d, then the pump will periodically be polled for treatment events.  This will cause your battery to be used at a faster rate, but will allow Loop to upload \u201ctreatments\u201d to Nightscout.  Event History must be selected for Nightscout to display temp basals, carbs, and boluses from Loop.  Even with Preferred Data Source set to \u201cEvent History\u201d, the reservoir volume will still be used to determine IOB, except in a few cases, such as when reservoir volumes have increased (in other words, reservoir was changed or refilled), or when the reservoir history is missing at least 30 minutes of continuous readings.  Event History = More Accurate Treatment Data, and Upload of Treatments to Nightscout  Reservoir = Improved pump battery economy by using MySentry data for Reservoir Readings (x23 pumps only)", 
            "title": "Preferred Data Source"
        }, 
        {
            "location": "/build/configuration/#issue-report", 
            "text": "If you run into problems or errors with your Loop, the Issue Report can be used to help identify where the problem is occurring.  The Issue Report is automatically generated and you can share it via email.  Frequently, if you go to Gitter or Facebook for help with a technical problem, an Issue Report will provide insight to what the potential problem is.", 
            "title": "Issue Report"
        }, 
        {
            "location": "/build/configuration/#pump-id", 
            "text": "Fairly self-explanatory.  You need to enter your pump\u2019s six-digit ID here.  To find your pump ID, press ESC button on the pump, scroll down.  You will find a the six digit ID as the \u201cS/N#\u201d.  You will also find the same ID number on the back of the pump as six numbers beneath the pump\u2019s model number.  There are also explanations so you can identify if the pump\u2019s region.  This makes a difference for how the RileyLink will tune its frequency for pump communications.", 
            "title": "Pump ID"
        }, 
        {
            "location": "/build/configuration/#pump-battery-type", 
            "text": "Again fairly self-explanatory.  Click which battery type you are using so that the battery percentages are more accurately displayed in your HUD.  The battery displays are designed to give you approximately 8-10 hours notice before looping would fail.  However, every battery manufacturer has its own decay curve for its specific batteries.  Typically, low battery levels will cause looping failures prior to the actual pump failing to delivery insulin.", 
            "title": "Pump Battery Type"
        }, 
        {
            "location": "/build/configuration/#cgm-selection", 
            "text": "Select one of the options from the menu:   Fetch Enlite Data  G4 Share Receiver  G5 Transmitter   If you select the G5 Transmitter, you will be prompted to enter the transmitter ID number.  Don't forget to update your transmitter ID when you change transmitters, otherwise your loop will not work.", 
            "title": "CGM Selection"
        }, 
        {
            "location": "/build/configuration/#target-range", 
            "text": "This is where you set your target blood glucose range.  This is the low and high BG values that Loop will attempt to keep you between.  Click the + in the upper right corner to add target BG range(s).  You can have multiple targets based on time of day, but for safety purposes the first setting of the day should begin at midnight to be consistent with your Medtronic pump.    Targets will be entered in mg/dl or mmoL automatically based upon how your BG values appear your BG chart. By default they are set to mg/dl, however once BG values arrive in mmoL these settings can be entered in mmoL. If you are planning to use mmoL, be sure to wait to set your target range up until after you have started to receive BG values. If you do these in the wrong order, then your chart may have incorrect Y axis. If you come across this issue, you can also remove all of your target ranges and enter them again. Once you are receiving BG values in mmoL, you can add your Target Range in mmoL.  You can also set the \u201coverride\u201d targets here to temporarily use alternate BG targets.  These override targets will only be enacted when you specifically activate \u201cWorkout Mode\u201d.  When initially setting up the Loop, it may be safer to start with a slightly higher target range than you may normally use.  This safety factor helps prevent lows in case your basals or other T1D-specific inputs were not well-determined prior to using Loop.  Slowly adjust the target BG range as you become more comfortable with the Loop\u2019s performance and refine your T1D inputs.     Target range can be a single number, such as 100-100 mg/dL, but is not necessarily advised or \u201cbetter\u201d.", 
            "title": "Target Range"
        }, 
        {
            "location": "/build/configuration/#minimum-bg-guard-loop-v13-or-newer", 
            "text": "Minimum BG Guard is a required data entry for successful configuration of Loop.  This feature was added in Loop version v1.3 and later.   Your Loop will not turn green without setting this value.     Minimum BG Guard allows a user to bolus when their BG is below their \u201cTarget Range\u201d but not below the value of the Minimum BG Guard.  To help users understand how this setting is affecting their usage of Loop, users will see a new notification icon and details of why there is no recommended bolus if the predicted BG is below the Minimum BG Guard.", 
            "title": "Minimum BG Guard (Loop v1.3 or newer)"
        }, 
        {
            "location": "/build/configuration/#insulin-action-duration-dia", 
            "text": "Enter your insulin action duration here in hours.  This is also called Duration of Insulin Action (DIA).  Typically, close-loopers use between 3-4 hours with good success.  However, your diabetes may vary.  This number is a real number so decimals work here for fractions of hours. Like (2.5) = 2hrs 30 mins", 
            "title": "Insulin Action Duration (DIA)"
        }, 
        {
            "location": "/build/configuration/#basal-rates", 
            "text": "Enter your basal rates here.  These should match the values entered in your pump. Entering them here will not override your pump\u2019s values, so make sure they match. This is fairly standard stuff that most T1Ds are already familiar with.  However, if you are new to Medtronic pumps...keep in mind that your insulin needs may change slightly when changing pump systems.  If in doubt, try some basal testing to see if your old basal rates may need adjustments with the switch to Medtronic pumps and infusion sets.  Only one basal pattern may be set in each Loop app.  If you are accustomed to switching between two or more basal patterns frequently, you have two options:   manually editing the basal profiles in this area each time you change basals, or  installing a duplicate Loop app for each basal pattern and switching when needed.   If you choose to have duplicate Loop apps, you will need to use different MAIN_APP_BUNDLE_IDENTIFIERs for each app.  Additionally, you must remember to close  the unused Loop app (double-click iPhone home button and up-swipe Loop app).  Only one Loop app can run successfully at a time.  When you switch to the new Loop app, it may take 5-15 minutes for the Loop to turn green.  The good news is that all your carb entries, insulin doses and such will automatically populate in the new Loop within a relatively short amount of time and the transition is therefore seamless for Loop functionality.", 
            "title": "Basal Rates"
        }, 
        {
            "location": "/build/configuration/#carb-ratios", 
            "text": "Click the + in the upper right to add carb ratios for various times of day. Loop works best if you have tested and optimized your carb ratio settings for accuracy.", 
            "title": "Carb Ratios"
        }, 
        {
            "location": "/build/configuration/#insulin-sensitivities", 
            "text": "Click the + in the upper right to add insulin sensitivities for various times of day. Loop works best if you have tested and optimized your ISF settings for accuracy.  Insulin sensitivities can change for many reasons including waiting too long to change your infusion set.  Loop will not auto-detect changes in ISF.", 
            "title": "Insulin Sensitivities"
        }, 
        {
            "location": "/build/configuration/#maximum-basal-rate", 
            "text": "Maximum basal rate is the maximum temporary basal rate that the Loop is allowed to enact to correct to your target BG range.    When you are first beginning to use Loop, it is important to be conservative (low) in setting your maximum basal rate.  If your settings are incorrect in other areas (basal rates, carb absorption time, carb ratio, etc), the Loop may enact incorrectly aggressive high temp basals.  Gradually increase your maximum basal rate as your comfort and confidence in Loop increase.  Typically, experienced closed loop users set their max basal rate no more than 3-4 times their average basal rate.    NOTE:  A frequent error for new Loop users is when they set their maximum basal rate here to a value HIGHER than the corresponding setting on the pump.  This will result in an error message that the temp basal failed to enact.  For example, Loop cannot successfully tell the pump to deliver 4 units per hour if the pump\u2019s maximum is set to only 3.8 units per hour.  If you are seeing failures of the Loop to set a high temp basal, check to see if your pump\u2019s maximum basal is at greater than or equal to the Loop\u2019s maximum basal.", 
            "title": "Maximum Basal Rate"
        }, 
        {
            "location": "/build/configuration/#maximum-bolus", 
            "text": "Enter your desired single bolus maximum here.", 
            "title": "Maximum Bolus"
        }, 
        {
            "location": "/build/configuration/#services", 
            "text": "The services listed in this section are optional.  You can choose to leave them empty and your Loop will still work.", 
            "title": "Services"
        }, 
        {
            "location": "/build/configuration/#dexcom-share", 
            "text": "Adding your Dexcom Share account information here will allow Loop to pull CGM data from the Dexcom servers in the event the Loop is not able to pull the data directly from the G4 receiver.  When Loop is receiving CGM data using this option, a little cloud icon will appear on the CGM reading in the Loop\u2019s mainscreen.", 
            "title": "Dexcom Share"
        }, 
        {
            "location": "/build/configuration/#nightscout", 
            "text": "If you have an existing Nightscout site, add the Site URL and API Secret to have your Loop data transmitted to your Nightscout site. If you can\u2019t remember your API Secret, it can be found under Settings, Reveal Config Vars for Heroku sites (or Application Settings, Connection Strings for Azure sites).   For additional information about how to configure your Nightscout site for Loop use, please see the Nightscout section of these docs.", 
            "title": "Nightscout"
        }, 
        {
            "location": "/build/configuration/#mlab", 
            "text": "Enter your database name and API Key here.", 
            "title": "mLab"
        }, 
        {
            "location": "/build/configuration/#amplitude", 
            "text": "Enter your API Key and click \u201cadd account\u201d.", 
            "title": "Amplitude"
        }, 
        {
            "location": "/build/configuration/#rileylink", 
            "text": "If you ordered your RileyLink preassembled, you should plug in the battery cable.  Please make sure your RileyLink\u2019s battery cable is securely pushed all the way into the socket.  Poor battery cable connection can make the Loop communications fail.  RileyLink with loose battery cable.  RileyLink with properly secured battery cable.  RileyLink is turned on with a little switch on the side of the circuit board (little blue lights will flash briefly and then turn off).  The \u201con\u201d position is with the switch towards the battery plug.  Now that you have it turned on, go back to your Loop settings and under \u201cDevices\u201d, there will be a connection to turn on.  Turn it on (slide to green) and then click on the arrow to the right of the green slider to open the RileyLink settings area.  {Note: your RileyLink will now have a solid green light showing.  The solid green light indicates a working bluetooth connection with your iPhone.}", 
            "title": "RileyLink"
        }, 
        {
            "location": "/build/configuration/#device", 
            "text": "The settings under the Device section are mostly for your information only.  However, you can rename your RileyLink to something more unique.  This is a good idea if you own more than one or are ever in the presence of more than one RileyLink...you will be able to pick out your connection easier amongst a crowd of \u201cRileyLinks\u201d", 
            "title": "Device"
        }, 
        {
            "location": "/build/configuration/#pump", 
            "text": "The Pump ID should be automatically filled in from the setting you have already entered previously.  The pump model will say unknown until we proceed with \u201cTune Radio Frequency.\u201d", 
            "title": "Pump"
        }, 
        {
            "location": "/build/configuration/#commands", 
            "text": "Tune Radio Frequency: Choose \u201cTune Radio Frequency\u201d. (This may be seen as Settings/Commands/916.65MHz with a right arrow to enter the screen.)  It may take about a minute, but soon you will see a list of frequencies and you can exit back to the main RileyLink settings.  The Command line will now show the frequency (916.60 MHz in this case) in the first command line and the timestamp of the tune.  Now your pump and RileyLink are tuned to talk to each other.   Note:  The strength of the radio communications with the pump is shown by the last number of the tune.  Tuning with -99 means NO communications were established.  Generally, if you have tuning in the -90s, your RileyLink-pump communications will not work.  If you have tuning in the -80s, you may have periodic communication failures.  If your tuning is in the -70s or better, your communications should be pretty stable.  (Note: for the rest of these items you may first need to set a pump Remote ID as per section 5.1.8, if you haven\u2019t already.)    Change Time:  Choose \u201cchange time\u201d so that pump and Loop times will match exactly.  You should never use the pump itself to set the pump\u2019s time.  Use the RileyLink and Loop app.    MySentry Pair:  MySentry Pairing is for x23 and x54 pumps.  Follow the directions on the iPhone screen.  You do not have to worry about this command if you are using an x15 or x22 model pump, as they do not have MySentry.    Fetch Recent History, Fetch Recent Glucose, Get Pump Model, and Send Button Press are all ways of asking the pump for information you might be interested in.  They are not part of setting up the Loop.  Send Button Press can be useful to see if the communication between the RileyLink and pump is working.  If successful, the screen on the pump will light up and Loop will confirm the button press with a \u201csuccess\u201d message.", 
            "title": "Commands"
        }, 
        {
            "location": "/build/configuration/#pump-setup", 
            "text": "Now that you are done with your Loop app settings, you need to finish setting up your pump for Loop use.  Generally, the setup of the pump is similar to setting up any pump for non-looping use.  {Except, you will need to change those batteries more often with Looping.  Loop will drain pump batteries much faster than regular pump regimes, and Loop failures will increase in frequency as the pump battery gets low.}  While not every setting NEEDS to match between Loop and pump, it is safer to have them match in case your Loop fails and you revert back to normal pump use.  You should program the pump settings to match for:   Basal program(s)  Carb ratio  ISF  Max bolus  Insulin action duration  BG targets   Three settings in particular need to be done, OR ELSE YOUR LOOP WON'T WORK:  Set \u201cmax temp basal\u201d in pump to at least equal to (or slightly greater) than the Loop\u2019s max basal  Set \u201ctemp basal type\u201d to \u201cinsulin rate (u/h)\u201d\n* Set Remote ID to \"on\" and enter any random ID (000000 will work). This is found in the pump's Utilities (for x23 continue to Connect Devices, Remotes) and turn ON the Remote Options.  CONGRATS...your Loop is ready for use.  But are you?  Have you read through the algorithm?  Have you watched the pump in open loop mode?  Have you read about how to safely do site changes and priming?  Do you know how to troubleshoot your Loop?  Please take the time to read the other sections of this guide as they will help you navigate safe looping practices.", 
            "title": "Pump Setup"
        }, 
        {
            "location": "/build/watch/", 
            "text": "Apple Watch", 
            "title": "Apple Watch"
        }, 
        {
            "location": "/build/watch/#apple-watch", 
            "text": "", 
            "title": "Apple Watch"
        }, 
        {
            "location": "/build/updating/", 
            "text": "How to update your Loop app", 
            "title": "Updating"
        }, 
        {
            "location": "/build/updating/#how-to-update-your-loop-app", 
            "text": "", 
            "title": "How to update your Loop app"
        }, 
        {
            "location": "/build/troubleshooting/", 
            "text": "Troubleshooting for Loop app builds", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/build/troubleshooting/#troubleshooting-for-loop-app-builds", 
            "text": "", 
            "title": "Troubleshooting for Loop app builds"
        }, 
        {
            "location": "/use/overview/", 
            "text": "Overview of Loop\n\n\nThis section of the docs will go over the Loop displays available and what information they offer.  Information about your Loop's actions (or inactions) can often be found simply by looking at the visuals presented in the app.  \n\n\nStatus Screen\n\n\nThe Status Screen is the main root navigation screen in Loop.  It is broken up into 3 main display areas; Heads Up display (HUD), Charts, and Toolbar. The HUD is the top area of the screen.  This shows status of the last time loop ran, current BG Reading, current temp-basal, current insulin reservoir volume remaining, and current pump percentage battery remaining. The next area is the charting area. This includes, glucose trend and prediction, Active Insulin, Insulin Delivery, and Carbohydrates.  The final display area is the toolbar which has buttons for Carbohydrate, Insulin Bolus, Workout Mode, and Settings.\n\n\n\n\nHeads Up Display\n\n\nLoop Status\n\n\nThe Loop Status is the colored circle in the upper left corner of the main Loop display.  There are four colors that are typically displayed.  \n\n\nA grey circle indicates the Loop is warming up and hasn\u2019t yet completed its initial loop.  When the Loop is first activated, it may take about 15-20 minutes to complete the first Loop, and the grey circle will be displayed.  It needs CGM data to be gathered, so be patient.  When it finally completes its first loop, the circle will turn green.  If you can't get the loop to turn grey, try reading the Use guide for Green Loop.\n\n\nA green circle indicates the Loop has been successfully completed within the last 5 minutes.  The time since the loop last completed will be displayed under the circle.\n\n\nA yellow circle indicates the Loop has not completed in the last 5-15 minutes.  It is not unusual to have a few instances of yellow circles throughout a day of looping.  They can be caused by temporarily getting too far away from RileyLink or iPhone (more than about 3-10 feet depending on conditions), CGM failing to read or being in ???, radio frequency \u201cnoise\u201d interference, and such.  Generally, most yellow circles will self-resolve without needing any special troubleshooting. \n\n\nA red circle indicates the Loop has not completed in over 15 minutes.  This is not a typical state, and you should troubleshoot why Loop is not completing.  Please review the Use sections' Green Loop page for troubleshooting tips.   If you have Nightscout integration, you can also use the Loop Pill to help troubleshoot.  Clicking on the red circle will also popup the last error message to help guide your troubleshooting.\n\n\nWhen the circle is notched and not complete, that means the Loop is operating in \u201copen loop\u201d mode.  When the \u201cclosed loop\u201d setting is turned on, the loop status will show a completed circle.\n\n\nThe loop status circle will pulse slightly when RileyLink is giving the pump a new temp basal setting.  The pulsing will stop when the temp basal has been set by the pump.\n\n\nGlucose\n\n\nThe current BG reading from the CGM will display, including trending arrow and time the reading was taken.  If the BG is being read straight from the G5 transmitter or G4 receiver, no special symbols will appear.  \n\n\nIf the BG is being read from the Dexcom Share Servers, a small cloud icon will be in the corner of the BG reading.  Internet access is required to run in this mode.\n\n\nWhen you first start Loop, there may be a small yellow alert next to the BG.  This should go away within a short period of time (around 5 minutes or less).  If the yellow alert remains, something is wrong with fetching BG data.  You can try restarting the Loop app (double tap home button, upswipe on app to close) to see if BG data will resume.  Loop will not work when a yellow BG alert is shown (*note G5 exception below).\n\n\n*For Dexcom G5 users, a yellow alert will appear when a calibration is needed.  The alert will clear once the calibration is given, but typically Loop will work IF the yellow alert is only for a needed G5 calibration. \n\n\nTemp Basal\n\n\nThe temp basal will display the enacted temp basal change relative to the scheduled basal.  So if the scheduled basal was 1.0 units per hour and Loop has set a temp basal of 0.2 units per hour, the temp basal icon will display -0.8 U (as shown in the graphic to the left).\n\n\nReservoir\n\n\nThe reservoir icon will remain grey and plain until insulin volume decreases.  At 25% reservoir volume remaining, the reservoir icon will turn yellow.  At 10% reservoir volume remaining, the reservoir icon will turn red.  The remaining units will be displayed when it gets to these lower thresholds.\n\n\nBattery\n\n\nFor x23, x54 pumps, the battery icon will show 100/75/50/25% increments just as the pump does.  As the battery level decreases, the icon will turn from grey to yellow to red.  For x22 pumps, the battery icon will read discrete % values.  \n\n\nCharts\n\n\nThere are several charts that help you navigate your Loop actions.  Clicking on each of the charts will also open up additional information.\n\n\nGlucose Chart\n\n\n\n\n\n\n\n\n\nThe glucose chart displays BG values in your preferred units. The vertical scale of the chart is calculated on the fly by Loop to be as useful as possible while including the highest and lowest readings in the chart.\n\n\nThe horizontal axis is set to go forward from the current time until your DIA forward (so you can see what Loop eventually thinks BG will be). It then goes back in time as far as it can based upon the width in pixels of your screen. Note, if you turn your device to landscape mode you will have more screen real estate and thus will be able to see further back in time. If you would like to see further back in time you can use Nightscout or you can modify your Loop Graph hours (see the customizations available when you build your Loop app).\n\n\nThe target BG range is shown as a blue bar on the glucose chart.  If you have a single-value target BG range (such as 100-100 mg/dl), no blue range will appear.\n\n\nThe eventual BG displayed in the right side of the chart does NOT take into account a recently enacted temp basal.  In other words, if you are above BG target and Loop just enacted a high temp basal to help, the eventual BG does not reflect the expected lowering of BGs that would result from that recently enacted temp basal.  Loop waits until the insulin has actually been delivery before it \"uses\" the insulin in its calculations for BG impacts.  If you suspended your pump or had a \"no delivery\" alarm shortly after the temp basal was started, you would want that accurately reflected in the insulin on board and associated eventual BG.\n\n\nIf you tap on the Glucose Chart itself, it will open the Predicted Glucose chart\n\n\nPredicted Glucose Chart\n\n\n\n\n\n\n\n\n\nThe predicted glucose view is a great way to gain insight into the various components\u2019 importance in Loop\u2019s prediction of eventual BG. The graph at the top of this view will match your Glucose Chart. Below this chart you will see a very detailed explanation of all of the variables that Loop takes into account in predicting your future BG value. Each of those effects (including Carbohydrates, Insulin, Glucose Momentum and Retrospective Correction) includes details of the calculation use. You can tap on any of the entries to turn them off and on for visualization. The resulting changes can be viewed by the changes in the dashed lines.\n\n\nAdditionally, at the bottom of this screen there is a setting to \u201cEnable Retrospective Correction\u201d. By enabling it, it will more aggressively increase or decrease basal delivery when BG movement doesn\u2019t match the carbohydrates and insulin-based model.  You can read more about this setting in the Algorithm section of these docs.\n\n\nActive Insulin Chart\n\n\n\n\n\n\n\n\n\nThe Active Insulin chart displays the total insulin contribution from both temp basals and boluses.  Active IOB can be either positive and negative IOB.  Negative IOB results from the suspension of normally scheduled basals.  The active insulin displayed in the upper right corner of the chart does NOT include insulin contributions from a recently enacted temp basal or bolus until the pump\u2019s reservoir volume is read and confirms a drop in reservoir volume (confirming the insulin has actually been delivered).\n\n\nInsulin Delivery Chart\n\n\n\n\n\n\n\n\n\nThe Insulin Delivery chart displays a history of the temp basals enacted by Loop.  The display is relative to the scheduled basal rates entered in the Loop settings.  So, a rate displayed in this chart as \u201c+0 units\u201d would indicate no temp basal was set, and Loop defaulted to the scheduled basal rate.  Individual boluses are indicated by an orange triangle on the chart (shown in the graphic above, near the left-most time).  The total insulin delivered, including all basals and boluses, is given in the upper right corner of the graph.\n\n\nPlease be patient for a bolus delivery to appear.  There is a lag time from when you press the \u201cdeliver\u201d bolus button.  The insulin has to be delivered and then the pump reservoir needs to be read to confirm delivery, before the triangle will appear and IOB will be added.  On large boluses, the time to actually deliver the bolus may be several minutes.\n\n\nReservoir and Event History\n\n\n\n\n\n\n\n\n\nClicking on either the Active Insulin or Insulin Delivery charts will open your Insulin Delivery history.  The top of the screen will display the current IOB and the total insulin delivered for the day since midnight (or since the time the loop became active if you started Loop after midnight).  There are two viewing options; Reservoir or Event History.  \n\n\nLoop\u2019s default is to use actual reservoir volumes for determining the insulin delivered.  When there is a gap of 30 minutes or more in reservoir history, Loop classifies these readings as \u201cnot continuous\u201d and therefore unreliable for the purposes of determining insulin deliveries.  Therefore in those instances, Loop will rely on the event histories to determine insulin deliveries during the non-continuous times.  \n\n\nThe reservoir volume history can also be intentionally edited to cause a \u201cnot continuous\u201d instance.  Please see the Priming and Site Changes section of these docs for important information regarding IOB considerations during those activities, and how a \u201cnot continuous\u201d edit may help resolve erroneous IOB.\n\n\nCarbohydrate Chart\n\n\n\n\n\n\n\n\n\nThe Carbohydrate chart displays the carbs used by Loop to predict BG changes.  The active COB is displayed in the upper right corner of the chart.  Clicking on the chart will open the Carb Entries history and you can edit any previous entries through that screen.\n\n\nTool Bar\n\n\n\n\n\n\n\n\n\nThe tool bar is where your inputs to the Loop behavior take place.  The individual components of the tool bar are discussed in further detail in separate sections of the docs.", 
            "title": "Overview"
        }, 
        {
            "location": "/use/overview/#overview-of-loop", 
            "text": "This section of the docs will go over the Loop displays available and what information they offer.  Information about your Loop's actions (or inactions) can often be found simply by looking at the visuals presented in the app.", 
            "title": "Overview of Loop"
        }, 
        {
            "location": "/use/overview/#status-screen", 
            "text": "The Status Screen is the main root navigation screen in Loop.  It is broken up into 3 main display areas; Heads Up display (HUD), Charts, and Toolbar. The HUD is the top area of the screen.  This shows status of the last time loop ran, current BG Reading, current temp-basal, current insulin reservoir volume remaining, and current pump percentage battery remaining. The next area is the charting area. This includes, glucose trend and prediction, Active Insulin, Insulin Delivery, and Carbohydrates.  The final display area is the toolbar which has buttons for Carbohydrate, Insulin Bolus, Workout Mode, and Settings.", 
            "title": "Status Screen"
        }, 
        {
            "location": "/use/overview/#heads-up-display", 
            "text": "", 
            "title": "Heads Up Display"
        }, 
        {
            "location": "/use/overview/#loop-status", 
            "text": "The Loop Status is the colored circle in the upper left corner of the main Loop display.  There are four colors that are typically displayed.    A grey circle indicates the Loop is warming up and hasn\u2019t yet completed its initial loop.  When the Loop is first activated, it may take about 15-20 minutes to complete the first Loop, and the grey circle will be displayed.  It needs CGM data to be gathered, so be patient.  When it finally completes its first loop, the circle will turn green.  If you can't get the loop to turn grey, try reading the Use guide for Green Loop.  A green circle indicates the Loop has been successfully completed within the last 5 minutes.  The time since the loop last completed will be displayed under the circle.  A yellow circle indicates the Loop has not completed in the last 5-15 minutes.  It is not unusual to have a few instances of yellow circles throughout a day of looping.  They can be caused by temporarily getting too far away from RileyLink or iPhone (more than about 3-10 feet depending on conditions), CGM failing to read or being in ???, radio frequency \u201cnoise\u201d interference, and such.  Generally, most yellow circles will self-resolve without needing any special troubleshooting.   A red circle indicates the Loop has not completed in over 15 minutes.  This is not a typical state, and you should troubleshoot why Loop is not completing.  Please review the Use sections' Green Loop page for troubleshooting tips.   If you have Nightscout integration, you can also use the Loop Pill to help troubleshoot.  Clicking on the red circle will also popup the last error message to help guide your troubleshooting.  When the circle is notched and not complete, that means the Loop is operating in \u201copen loop\u201d mode.  When the \u201cclosed loop\u201d setting is turned on, the loop status will show a completed circle.  The loop status circle will pulse slightly when RileyLink is giving the pump a new temp basal setting.  The pulsing will stop when the temp basal has been set by the pump.", 
            "title": "Loop Status"
        }, 
        {
            "location": "/use/overview/#glucose", 
            "text": "The current BG reading from the CGM will display, including trending arrow and time the reading was taken.  If the BG is being read straight from the G5 transmitter or G4 receiver, no special symbols will appear.    If the BG is being read from the Dexcom Share Servers, a small cloud icon will be in the corner of the BG reading.  Internet access is required to run in this mode.  When you first start Loop, there may be a small yellow alert next to the BG.  This should go away within a short period of time (around 5 minutes or less).  If the yellow alert remains, something is wrong with fetching BG data.  You can try restarting the Loop app (double tap home button, upswipe on app to close) to see if BG data will resume.  Loop will not work when a yellow BG alert is shown (*note G5 exception below).  *For Dexcom G5 users, a yellow alert will appear when a calibration is needed.  The alert will clear once the calibration is given, but typically Loop will work IF the yellow alert is only for a needed G5 calibration.", 
            "title": "Glucose"
        }, 
        {
            "location": "/use/overview/#temp-basal", 
            "text": "The temp basal will display the enacted temp basal change relative to the scheduled basal.  So if the scheduled basal was 1.0 units per hour and Loop has set a temp basal of 0.2 units per hour, the temp basal icon will display -0.8 U (as shown in the graphic to the left).", 
            "title": "Temp Basal"
        }, 
        {
            "location": "/use/overview/#reservoir", 
            "text": "The reservoir icon will remain grey and plain until insulin volume decreases.  At 25% reservoir volume remaining, the reservoir icon will turn yellow.  At 10% reservoir volume remaining, the reservoir icon will turn red.  The remaining units will be displayed when it gets to these lower thresholds.", 
            "title": "Reservoir"
        }, 
        {
            "location": "/use/overview/#battery", 
            "text": "For x23, x54 pumps, the battery icon will show 100/75/50/25% increments just as the pump does.  As the battery level decreases, the icon will turn from grey to yellow to red.  For x22 pumps, the battery icon will read discrete % values.", 
            "title": "Battery"
        }, 
        {
            "location": "/use/overview/#charts", 
            "text": "There are several charts that help you navigate your Loop actions.  Clicking on each of the charts will also open up additional information.", 
            "title": "Charts"
        }, 
        {
            "location": "/use/overview/#glucose-chart", 
            "text": "The glucose chart displays BG values in your preferred units. The vertical scale of the chart is calculated on the fly by Loop to be as useful as possible while including the highest and lowest readings in the chart.  The horizontal axis is set to go forward from the current time until your DIA forward (so you can see what Loop eventually thinks BG will be). It then goes back in time as far as it can based upon the width in pixels of your screen. Note, if you turn your device to landscape mode you will have more screen real estate and thus will be able to see further back in time. If you would like to see further back in time you can use Nightscout or you can modify your Loop Graph hours (see the customizations available when you build your Loop app).  The target BG range is shown as a blue bar on the glucose chart.  If you have a single-value target BG range (such as 100-100 mg/dl), no blue range will appear.  The eventual BG displayed in the right side of the chart does NOT take into account a recently enacted temp basal.  In other words, if you are above BG target and Loop just enacted a high temp basal to help, the eventual BG does not reflect the expected lowering of BGs that would result from that recently enacted temp basal.  Loop waits until the insulin has actually been delivery before it \"uses\" the insulin in its calculations for BG impacts.  If you suspended your pump or had a \"no delivery\" alarm shortly after the temp basal was started, you would want that accurately reflected in the insulin on board and associated eventual BG.  If you tap on the Glucose Chart itself, it will open the Predicted Glucose chart", 
            "title": "Glucose Chart"
        }, 
        {
            "location": "/use/overview/#predicted-glucose-chart", 
            "text": "The predicted glucose view is a great way to gain insight into the various components\u2019 importance in Loop\u2019s prediction of eventual BG. The graph at the top of this view will match your Glucose Chart. Below this chart you will see a very detailed explanation of all of the variables that Loop takes into account in predicting your future BG value. Each of those effects (including Carbohydrates, Insulin, Glucose Momentum and Retrospective Correction) includes details of the calculation use. You can tap on any of the entries to turn them off and on for visualization. The resulting changes can be viewed by the changes in the dashed lines.  Additionally, at the bottom of this screen there is a setting to \u201cEnable Retrospective Correction\u201d. By enabling it, it will more aggressively increase or decrease basal delivery when BG movement doesn\u2019t match the carbohydrates and insulin-based model.  You can read more about this setting in the Algorithm section of these docs.", 
            "title": "Predicted Glucose Chart"
        }, 
        {
            "location": "/use/overview/#active-insulin-chart", 
            "text": "The Active Insulin chart displays the total insulin contribution from both temp basals and boluses.  Active IOB can be either positive and negative IOB.  Negative IOB results from the suspension of normally scheduled basals.  The active insulin displayed in the upper right corner of the chart does NOT include insulin contributions from a recently enacted temp basal or bolus until the pump\u2019s reservoir volume is read and confirms a drop in reservoir volume (confirming the insulin has actually been delivered).", 
            "title": "Active Insulin Chart"
        }, 
        {
            "location": "/use/overview/#insulin-delivery-chart", 
            "text": "The Insulin Delivery chart displays a history of the temp basals enacted by Loop.  The display is relative to the scheduled basal rates entered in the Loop settings.  So, a rate displayed in this chart as \u201c+0 units\u201d would indicate no temp basal was set, and Loop defaulted to the scheduled basal rate.  Individual boluses are indicated by an orange triangle on the chart (shown in the graphic above, near the left-most time).  The total insulin delivered, including all basals and boluses, is given in the upper right corner of the graph.  Please be patient for a bolus delivery to appear.  There is a lag time from when you press the \u201cdeliver\u201d bolus button.  The insulin has to be delivered and then the pump reservoir needs to be read to confirm delivery, before the triangle will appear and IOB will be added.  On large boluses, the time to actually deliver the bolus may be several minutes.", 
            "title": "Insulin Delivery Chart"
        }, 
        {
            "location": "/use/overview/#reservoir-and-event-history", 
            "text": "Clicking on either the Active Insulin or Insulin Delivery charts will open your Insulin Delivery history.  The top of the screen will display the current IOB and the total insulin delivered for the day since midnight (or since the time the loop became active if you started Loop after midnight).  There are two viewing options; Reservoir or Event History.    Loop\u2019s default is to use actual reservoir volumes for determining the insulin delivered.  When there is a gap of 30 minutes or more in reservoir history, Loop classifies these readings as \u201cnot continuous\u201d and therefore unreliable for the purposes of determining insulin deliveries.  Therefore in those instances, Loop will rely on the event histories to determine insulin deliveries during the non-continuous times.    The reservoir volume history can also be intentionally edited to cause a \u201cnot continuous\u201d instance.  Please see the Priming and Site Changes section of these docs for important information regarding IOB considerations during those activities, and how a \u201cnot continuous\u201d edit may help resolve erroneous IOB.", 
            "title": "Reservoir and Event History"
        }, 
        {
            "location": "/use/overview/#carbohydrate-chart", 
            "text": "The Carbohydrate chart displays the carbs used by Loop to predict BG changes.  The active COB is displayed in the upper right corner of the chart.  Clicking on the chart will open the Carb Entries history and you can edit any previous entries through that screen.", 
            "title": "Carbohydrate Chart"
        }, 
        {
            "location": "/use/overview/#tool-bar", 
            "text": "The tool bar is where your inputs to the Loop behavior take place.  The individual components of the tool bar are discussed in further detail in separate sections of the docs.", 
            "title": "Tool Bar"
        }, 
        {
            "location": "/use/open-loop/", 
            "text": "Open Loop\n\n\nOpen loop is a great place to start with Loop. When you are operating in open loop mode, Loop is offering recommedendations for temp basals and will display them on the main screen.  The recommendations will not be enacted unless you specifically choose to enact the temp basal.  Usually in open loop mode, you aren't really enacting the recommended basals but instead watching how the recommendations come in and figuring out WHY they are being recommended.\n\n\nIt is understandable to want to jump straight away into close loop mode, but a lot can be learned by watching Loop operate in open mode.  Becoming familiar with the algorithm can be easier by watching it in action rather than only reading about it in docs.\n\n\nTesting\n\n\nA great benefit of open loop mode is that you can establish a baseline of BG trends without the influence of temp basals from Loop.  This is particularly helpful if you haven't used Medtronic sites/pumps prior to Loop.  You may find that your basal rates change significantly coming from other brands of pumps.  Taking the time to establish a good Medtronic pump basal profile will set you up for a smoother transition to close loop mode.  Test your ISF during open loop time too, as ISF is an important component for every Loop calculation for temp basals.  Every 5 minutes, Loop uses your ISF...so it's worth testing it ahead of close loop mode.\n\n\nEventual BG\n\n\nOne of the best things you can do is to train yourself to watch the eventual BG rather than the current BG for helping understand Loop recommendations for temp basals.  So many of us have become accustomed to dealing with current BGs and perhaps IOB at the same time...but Loop is also looking at BG momentum, carbs on board, restrospective trends.  Loop is utilizing all of those variables to predict an eventual BG.  It's current decisions are based on that eventual BG.  Training yourself to watch that eventual BG will help you understand the temp basals being offered at any given time.\n\n\nCarb Absorption\n\n\nProbably the next most difficult transition involves using carb absorption as a component to every meal bolus.  Understand that the default carb absorption times in Loop may not work for your particular body.  Similar to how you perhaps had used extended boluses for meals that impacted BGs longer than the duration of your insulin...that same idea applies to estimating your carb absorption times.  Watch your meals and try to estimate how long they are impacting your BG for various types of food.  Watch the times when Loop would've wanted to suspend or high temp basal...ask yourself why it would be doing that.  Especially ask yourself if that is the same decision as you would've made at that time in a meal normally.  Would you be worried that you might go low later if you see Loop offering high temp basal early after a meal?  Would you be worried about going high later if Loop wants to suspend basals instead?  If you put some effort into this effort before closing the loop, it will pay off with a smoother transition to closed loop.\n\n\nTroubleshooting\n\n\nGet used to carrying the RileyLink around.  Find how far your connectivity stretches before you have pump communication problems.  Get used to troubleshooting yellow and red loops, finding out the pattern/cause of any potential loop issues.  You'll be less frustrated starting on closed loop if you aren't dealing with learning new electronics at the same time as you are learning carb absorption times in a closed loop.  Learn how to retune your RL. \n\n\nBolus\n\n\nBolus meals from the Loop, rather than the pump.  Become familiar with entering carbs into the Loop, as well as editing them.  Watch how long it takes for Loop app to display the bolus after you enact it (hint: there's a delay until the bolus finishes delivery and the pump gets read).  Familiarize yourself with the \"Bolus May Have Failed\" notifications and how to handle them.  Double check the pump and watch to see if the bolus indeed didn't enact before trying to give the bolus again.  \n\n\nCaregiver training\n\n\nIf you are the parent of a t1d kid using Loop, make sure you take the time to educate caregivers around your family and school for how to use Loop.  Perhaps you want to draft individualized quick info sheets for those caregivers to use with Loop.  If your child needs a site change at school, school staff or your child need to know how to delete reservoir history or change to open loop for the duration of DIA.  Try to watch Nightscout while you get to know Loop so that you can become better at remote troubleshooting of any problems that you might encounter.", 
            "title": "Open Loop"
        }, 
        {
            "location": "/use/open-loop/#open-loop", 
            "text": "Open loop is a great place to start with Loop. When you are operating in open loop mode, Loop is offering recommedendations for temp basals and will display them on the main screen.  The recommendations will not be enacted unless you specifically choose to enact the temp basal.  Usually in open loop mode, you aren't really enacting the recommended basals but instead watching how the recommendations come in and figuring out WHY they are being recommended.  It is understandable to want to jump straight away into close loop mode, but a lot can be learned by watching Loop operate in open mode.  Becoming familiar with the algorithm can be easier by watching it in action rather than only reading about it in docs.", 
            "title": "Open Loop"
        }, 
        {
            "location": "/use/open-loop/#testing", 
            "text": "A great benefit of open loop mode is that you can establish a baseline of BG trends without the influence of temp basals from Loop.  This is particularly helpful if you haven't used Medtronic sites/pumps prior to Loop.  You may find that your basal rates change significantly coming from other brands of pumps.  Taking the time to establish a good Medtronic pump basal profile will set you up for a smoother transition to close loop mode.  Test your ISF during open loop time too, as ISF is an important component for every Loop calculation for temp basals.  Every 5 minutes, Loop uses your ISF...so it's worth testing it ahead of close loop mode.", 
            "title": "Testing"
        }, 
        {
            "location": "/use/open-loop/#eventual-bg", 
            "text": "One of the best things you can do is to train yourself to watch the eventual BG rather than the current BG for helping understand Loop recommendations for temp basals.  So many of us have become accustomed to dealing with current BGs and perhaps IOB at the same time...but Loop is also looking at BG momentum, carbs on board, restrospective trends.  Loop is utilizing all of those variables to predict an eventual BG.  It's current decisions are based on that eventual BG.  Training yourself to watch that eventual BG will help you understand the temp basals being offered at any given time.", 
            "title": "Eventual BG"
        }, 
        {
            "location": "/use/open-loop/#carb-absorption", 
            "text": "Probably the next most difficult transition involves using carb absorption as a component to every meal bolus.  Understand that the default carb absorption times in Loop may not work for your particular body.  Similar to how you perhaps had used extended boluses for meals that impacted BGs longer than the duration of your insulin...that same idea applies to estimating your carb absorption times.  Watch your meals and try to estimate how long they are impacting your BG for various types of food.  Watch the times when Loop would've wanted to suspend or high temp basal...ask yourself why it would be doing that.  Especially ask yourself if that is the same decision as you would've made at that time in a meal normally.  Would you be worried that you might go low later if you see Loop offering high temp basal early after a meal?  Would you be worried about going high later if Loop wants to suspend basals instead?  If you put some effort into this effort before closing the loop, it will pay off with a smoother transition to closed loop.", 
            "title": "Carb Absorption"
        }, 
        {
            "location": "/use/open-loop/#troubleshooting", 
            "text": "Get used to carrying the RileyLink around.  Find how far your connectivity stretches before you have pump communication problems.  Get used to troubleshooting yellow and red loops, finding out the pattern/cause of any potential loop issues.  You'll be less frustrated starting on closed loop if you aren't dealing with learning new electronics at the same time as you are learning carb absorption times in a closed loop.  Learn how to retune your RL.", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/use/open-loop/#bolus", 
            "text": "Bolus meals from the Loop, rather than the pump.  Become familiar with entering carbs into the Loop, as well as editing them.  Watch how long it takes for Loop app to display the bolus after you enact it (hint: there's a delay until the bolus finishes delivery and the pump gets read).  Familiarize yourself with the \"Bolus May Have Failed\" notifications and how to handle them.  Double check the pump and watch to see if the bolus indeed didn't enact before trying to give the bolus again.", 
            "title": "Bolus"
        }, 
        {
            "location": "/use/open-loop/#caregiver-training", 
            "text": "If you are the parent of a t1d kid using Loop, make sure you take the time to educate caregivers around your family and school for how to use Loop.  Perhaps you want to draft individualized quick info sheets for those caregivers to use with Loop.  If your child needs a site change at school, school staff or your child need to know how to delete reservoir history or change to open loop for the duration of DIA.  Try to watch Nightscout while you get to know Loop so that you can become better at remote troubleshooting of any problems that you might encounter.", 
            "title": "Caregiver training"
        }, 
        {
            "location": "/use/close-loop/", 
            "text": "Close Loop\n\n\nWhen you feel like you have learned what you need from open loop, you should be ready to switch to close loop.  There are several ways you can help make that transition as smooth as possible.  \n\n\nTiming\n\n\nMany people choose to transition to close loop in a step-wise fashion.  Starting close loop on weekends is an easier starting point so that you can minimize distractions (let's face it...you'll probably be staring at the Loop a lot for those first few days). Typically, people have an easier time transitioning to close loop for parts of their day that don't involve food...so nighttimes tend to be easier than daytimes to start.\n\n\nBG targets\n\n\nIf your basals, ISF, or carb ratios aren't set correctly, Loop may overshoot and leave you lower than expected (or with more IOB than you are comfortable with).  Setting your low BG target slightly higher can help prevent unexpected lows or high IOB as you adjust your settings.\n\n\nWatch the IOB\n\n\nWatch whether Loop accumulates positive or negative IOB while holding your BG steady when no food is present.  If you find that you are \"carrying\" positive or negative IOB consistently, you should review your settings to see if perhaps your basal or ISF needs adjusting.\n\n\nMeals\n\n\nMeals will likely be the hardest part of transitioning to close loop.  Starting with foods that you have a high comfort level with is a great idea.  If you have favorite meals that you know well (how high BGs usually go, how much to bolus, how to prebolus, etc), these would be a good starting point.  If you see that you are coming out of meals high or low, you may need to adjust carb absorption times.  Watching when the Loop high temps or suspends basals (early vs late in meal) will really help you adjust to find your typical carb absorption times.  As a general rule, \nassuming other settings are accurate\n\n\n\n\nearly high temps in a meal that leave you low after, you may need to shorten carb absorption time\n\n\nearly suspensions in a meal that leave you high after, you may need to lengthen carb absorption time\n\n\n\n\nThis is definitely an area where YDMV (your diabetes may vary), so don't expect or accept that what works for others will work for you.  Test, observe, and adjust as needed.", 
            "title": "Close Loop"
        }, 
        {
            "location": "/use/close-loop/#close-loop", 
            "text": "When you feel like you have learned what you need from open loop, you should be ready to switch to close loop.  There are several ways you can help make that transition as smooth as possible.", 
            "title": "Close Loop"
        }, 
        {
            "location": "/use/close-loop/#timing", 
            "text": "Many people choose to transition to close loop in a step-wise fashion.  Starting close loop on weekends is an easier starting point so that you can minimize distractions (let's face it...you'll probably be staring at the Loop a lot for those first few days). Typically, people have an easier time transitioning to close loop for parts of their day that don't involve food...so nighttimes tend to be easier than daytimes to start.", 
            "title": "Timing"
        }, 
        {
            "location": "/use/close-loop/#bg-targets", 
            "text": "If your basals, ISF, or carb ratios aren't set correctly, Loop may overshoot and leave you lower than expected (or with more IOB than you are comfortable with).  Setting your low BG target slightly higher can help prevent unexpected lows or high IOB as you adjust your settings.", 
            "title": "BG targets"
        }, 
        {
            "location": "/use/close-loop/#watch-the-iob", 
            "text": "Watch whether Loop accumulates positive or negative IOB while holding your BG steady when no food is present.  If you find that you are \"carrying\" positive or negative IOB consistently, you should review your settings to see if perhaps your basal or ISF needs adjusting.", 
            "title": "Watch the IOB"
        }, 
        {
            "location": "/use/close-loop/#meals", 
            "text": "Meals will likely be the hardest part of transitioning to close loop.  Starting with foods that you have a high comfort level with is a great idea.  If you have favorite meals that you know well (how high BGs usually go, how much to bolus, how to prebolus, etc), these would be a good starting point.  If you see that you are coming out of meals high or low, you may need to adjust carb absorption times.  Watching when the Loop high temps or suspends basals (early vs late in meal) will really help you adjust to find your typical carb absorption times.  As a general rule,  assuming other settings are accurate   early high temps in a meal that leave you low after, you may need to shorten carb absorption time  early suspensions in a meal that leave you high after, you may need to lengthen carb absorption time   This is definitely an area where YDMV (your diabetes may vary), so don't expect or accept that what works for others will work for you.  Test, observe, and adjust as needed.", 
            "title": "Meals"
        }, 
        {
            "location": "/use/green-loop/", 
            "text": "Loop fails to turn green\n\n\nPump\n\n\nLoop/CGM\n\n\nRileyLink", 
            "title": "Green Loop"
        }, 
        {
            "location": "/use/green-loop/#loop-fails-to-turn-green", 
            "text": "", 
            "title": "Loop fails to turn green"
        }, 
        {
            "location": "/use/green-loop/#pump", 
            "text": "", 
            "title": "Pump"
        }, 
        {
            "location": "/use/green-loop/#loopcgm", 
            "text": "", 
            "title": "Loop/CGM"
        }, 
        {
            "location": "/use/green-loop/#rileylink", 
            "text": "", 
            "title": "RileyLink"
        }, 
        {
            "location": "/use/carbs/", 
            "text": "Carb entries for Loop\n\n\ncarb abs time\n\n\nediting\n\n\nthird party apps", 
            "title": "Carb Entries"
        }, 
        {
            "location": "/use/carbs/#carb-entries-for-loop", 
            "text": "", 
            "title": "Carb entries for Loop"
        }, 
        {
            "location": "/use/carbs/#carb-abs-time", 
            "text": "", 
            "title": "carb abs time"
        }, 
        {
            "location": "/use/carbs/#editing", 
            "text": "", 
            "title": "editing"
        }, 
        {
            "location": "/use/carbs/#third-party-apps", 
            "text": "", 
            "title": "third party apps"
        }, 
        {
            "location": "/use/bolus/", 
            "text": "Bolus with Loop\n\n\nbolus guard\n\n\nregular bolus\n\n\ncorrection bolus\n\n\nbolus failure notifications\n\n\npending bolus", 
            "title": "Bolus"
        }, 
        {
            "location": "/use/bolus/#bolus-with-loop", 
            "text": "", 
            "title": "Bolus with Loop"
        }, 
        {
            "location": "/use/bolus/#bolus-guard", 
            "text": "", 
            "title": "bolus guard"
        }, 
        {
            "location": "/use/bolus/#regular-bolus", 
            "text": "", 
            "title": "regular bolus"
        }, 
        {
            "location": "/use/bolus/#correction-bolus", 
            "text": "", 
            "title": "correction bolus"
        }, 
        {
            "location": "/use/bolus/#bolus-failure-notifications", 
            "text": "", 
            "title": "bolus failure notifications"
        }, 
        {
            "location": "/use/bolus/#pending-bolus", 
            "text": "", 
            "title": "pending bolus"
        }, 
        {
            "location": "/use/priming/", 
            "text": "Priming and Site Changes\n\n\nLoop uses event history and reservoir levels to determine how much insulin has actually been delivered through the pump, and correspondingly the Insulin On Board (IOB).  \nIf you manually prime your tubing WITHOUT changing reservoirs\n, Loop will detect that prime as an insulin delivery and count it as IOB.  Therefore, here are some suggestions for priming, set changes, and reservoir changes with Loop in mind.\n\n\nSite Changes\n\n\n\n\n\n\nIf you change sites and increase reservoir volume (i.e., start a new reservoir), don't worry. So long as you are putting in a reservoir that has more insulin than the old one, IOB will be accurate in Loop.  When Loop sees a rewind and an increase in reservoir volume, it will not count any tubing primes as IOB.\n\n\n\n\n\n\nIf you change sites but \ndo NOT increase reservoir volume\n (i.e., you keep existing reservoir going), you will need to go into Loop's reservoir history and delete 30 minutes of continuous reservoir history including the prime event.  By deleting 30 minutes of reservoir history, Loop will use Event History to determine insulin deliveries and IOB. If you cannot get the prime to clear from the IOB, operate in Open Loop mode until the insulin action duration time has passed.  Deleting history is done by:\n\n\n\n\n\n\n1. clicking on the Insulin Delivery Chart  \n\n\n2. selecting the Reservoir history screen  \n\n\n3. swiping to delete individual reservoir readings  \n\n\n4. delete at least 30 minutes of reservoir readings, including the readings that involved priming events\n\n\nPrime Menu\n\n\nWhen you finish priming on a Medtronic pump, please make sure to complete the priming menu.  In other words, finish all the prompts so that you get back to the (nearly blank) normal Medtronic pump screen.  If you don't finish the priming menu, the pump will not begin basal insulin delivery, nor does it alarm.  It is equivalent to the pump being suspended...but you won't be able to see any indication of that in Nightscout as a remotely monitoring parent.  Loop will not detect the prime screen issue and will keep sending temp basal messages...but the pump won't enact them.  On Loop, you could notice it by the active IOB continually going down and then eventually negative IOB, as the basal is not delivered and the reservoir level remains constant.  However, the temp basal graph will still show the bars from the temp basal commands loop has been sending.\n\n\nSo, remember to finish those prime menu screens through to the end.", 
            "title": "Priming and Sites"
        }, 
        {
            "location": "/use/priming/#priming-and-site-changes", 
            "text": "Loop uses event history and reservoir levels to determine how much insulin has actually been delivered through the pump, and correspondingly the Insulin On Board (IOB).   If you manually prime your tubing WITHOUT changing reservoirs , Loop will detect that prime as an insulin delivery and count it as IOB.  Therefore, here are some suggestions for priming, set changes, and reservoir changes with Loop in mind.", 
            "title": "Priming and Site Changes"
        }, 
        {
            "location": "/use/priming/#site-changes", 
            "text": "If you change sites and increase reservoir volume (i.e., start a new reservoir), don't worry. So long as you are putting in a reservoir that has more insulin than the old one, IOB will be accurate in Loop.  When Loop sees a rewind and an increase in reservoir volume, it will not count any tubing primes as IOB.    If you change sites but  do NOT increase reservoir volume  (i.e., you keep existing reservoir going), you will need to go into Loop's reservoir history and delete 30 minutes of continuous reservoir history including the prime event.  By deleting 30 minutes of reservoir history, Loop will use Event History to determine insulin deliveries and IOB. If you cannot get the prime to clear from the IOB, operate in Open Loop mode until the insulin action duration time has passed.  Deleting history is done by:    1. clicking on the Insulin Delivery Chart    2. selecting the Reservoir history screen    3. swiping to delete individual reservoir readings    4. delete at least 30 minutes of reservoir readings, including the readings that involved priming events", 
            "title": "Site Changes"
        }, 
        {
            "location": "/use/priming/#prime-menu", 
            "text": "When you finish priming on a Medtronic pump, please make sure to complete the priming menu.  In other words, finish all the prompts so that you get back to the (nearly blank) normal Medtronic pump screen.  If you don't finish the priming menu, the pump will not begin basal insulin delivery, nor does it alarm.  It is equivalent to the pump being suspended...but you won't be able to see any indication of that in Nightscout as a remotely monitoring parent.  Loop will not detect the prime screen issue and will keep sending temp basal messages...but the pump won't enact them.  On Loop, you could notice it by the active IOB continually going down and then eventually negative IOB, as the basal is not delivered and the reservoir level remains constant.  However, the temp basal graph will still show the bars from the temp basal commands loop has been sending.  So, remember to finish those prime menu screens through to the end.", 
            "title": "Prime Menu"
        }, 
        {
            "location": "/use/time-change/", 
            "text": "Time Changes with Loop\n\n\nLoop is built to fully work across time zone and daylight savings time changes as long as a few basic instructions are followed.\n\n\niPhone\n\n\nLoop will assume your iPhone's time (UTC, not time zone) is always correct. This theoretically may not be the case if a nearby cell tower is improperly configured (though there are likely resilience mechanisms in iOS to handle this). Automatic time setting can always be disabled in Settings.\n\n\nMinimed Pump and CGM\n\n\nThe Minimed pump doesn't expose a universal clock, instead it exposes the components of a date (YMDHIS). It has no concept of political time zones, and just continues to increment its components on schedule. Therefore, Loop assumes that the pump's date, until changed, remains at a fixed offset from UTC.\n\n\nThat offset is stored by Loop the first time the pump ID is changed, and every time the pump's time is changed from the RileyLink Settings screen.\n\n\nDo not change the pump's time directly on the pump.\n Instead, always use Loop's RileyLink \"Change Pump Time\".\n\n\nDexcom CGM\n\n\nNo particular input is needed on your part for Loop to work with Dexcom CGM data. All times are UTC.  However, at time changes you may want to manually change your G4 receiver time setting just so the time visually appears correct when you are viewing the screen.\n\n\nTraveling across time zones and daylight savings\n\n\nWhen traveling, there is no urgency to update the pump's time to match the wall-clocks in your geography. Configuration schedules\u2014basal rates, target ranges, carb ratios, and insulin sensitivities\u2014will all remain in the pump's time zone. The app's graphs and status will always display in the time zone of the iPhone, and Loop will understand the difference in offset between the two, highlighting it when attempting to change configuration schedules.\n\n\nWhen you're ready to update the pump's time, simply use the Loop's RileyLink \"Change Pump Time\". This will also shift your configuration schedules to the current time zone.", 
            "title": "Time Changes"
        }, 
        {
            "location": "/use/time-change/#time-changes-with-loop", 
            "text": "Loop is built to fully work across time zone and daylight savings time changes as long as a few basic instructions are followed.", 
            "title": "Time Changes with Loop"
        }, 
        {
            "location": "/use/time-change/#iphone", 
            "text": "Loop will assume your iPhone's time (UTC, not time zone) is always correct. This theoretically may not be the case if a nearby cell tower is improperly configured (though there are likely resilience mechanisms in iOS to handle this). Automatic time setting can always be disabled in Settings.", 
            "title": "iPhone"
        }, 
        {
            "location": "/use/time-change/#minimed-pump-and-cgm", 
            "text": "The Minimed pump doesn't expose a universal clock, instead it exposes the components of a date (YMDHIS). It has no concept of political time zones, and just continues to increment its components on schedule. Therefore, Loop assumes that the pump's date, until changed, remains at a fixed offset from UTC.  That offset is stored by Loop the first time the pump ID is changed, and every time the pump's time is changed from the RileyLink Settings screen.  Do not change the pump's time directly on the pump.  Instead, always use Loop's RileyLink \"Change Pump Time\".", 
            "title": "Minimed Pump and CGM"
        }, 
        {
            "location": "/use/time-change/#dexcom-cgm", 
            "text": "No particular input is needed on your part for Loop to work with Dexcom CGM data. All times are UTC.  However, at time changes you may want to manually change your G4 receiver time setting just so the time visually appears correct when you are viewing the screen.", 
            "title": "Dexcom CGM"
        }, 
        {
            "location": "/use/time-change/#traveling-across-time-zones-and-daylight-savings", 
            "text": "When traveling, there is no urgency to update the pump's time to match the wall-clocks in your geography. Configuration schedules\u2014basal rates, target ranges, carb ratios, and insulin sensitivities\u2014will all remain in the pump's time zone. The app's graphs and status will always display in the time zone of the iPhone, and Loop will understand the difference in offset between the two, highlighting it when attempting to change configuration schedules.  When you're ready to update the pump's time, simply use the Loop's RileyLink \"Change Pump Time\". This will also shift your configuration schedules to the current time zone.", 
            "title": "Traveling across time zones and daylight savings"
        }, 
        {
            "location": "/use/rileylink/", 
            "text": "Riley Link\n\n\ntuning\n\n\nbluetooth\n\n\ncharging\n\n\nlights\n\n\nrange\n\n\nlipo battery care", 
            "title": "RileyLink"
        }, 
        {
            "location": "/use/rileylink/#riley-link", 
            "text": "", 
            "title": "Riley Link"
        }, 
        {
            "location": "/use/rileylink/#tuning", 
            "text": "", 
            "title": "tuning"
        }, 
        {
            "location": "/use/rileylink/#bluetooth", 
            "text": "", 
            "title": "bluetooth"
        }, 
        {
            "location": "/use/rileylink/#charging", 
            "text": "", 
            "title": "charging"
        }, 
        {
            "location": "/use/rileylink/#lights", 
            "text": "", 
            "title": "lights"
        }, 
        {
            "location": "/use/rileylink/#range", 
            "text": "", 
            "title": "range"
        }, 
        {
            "location": "/use/rileylink/#lipo-battery-care", 
            "text": "", 
            "title": "lipo battery care"
        }, 
        {
            "location": "/algorithm/overview/", 
            "text": "Overview\n\n\nLoop\u2019s algorithm for adjusting insulin delivery is oriented around making a glucose prediction.  Every five minutes, triggered by new BG data, it generates a new prediction.  Both \nbolus recommendations\n and \ntemporary basal rates\n are set based on this prediction.\n\n\nTerminology\n\n\nThis graph and legend illustrates terms commonly used in discussing Loop's algorithm,\nand shows them in the context of historical and forecasted BG in a style similar to the\nstatus screen of Loop.\n\n\n\n\n\n\nInsulin Action Duration\nA configuration value that provides an estimate of how long insulin stays active after delivery.\n\n\nTarget Range\n\n\nThis is the low and high BG values that Loop will attempt to keep you between.\n\n\nPredicted Glucose\n\n\nLoop makes a prediction of glucose values out for a length of time equal to your Insulin Action Duration.\n\n\nEventual BG\n\n\nThe last value of the prediction.\n\n\nMinimum BG\n\n\nThe lowest glucose value at any point in time within the prediction.\n\n\nMinimum BG Guard\n\n\nA configuration value below which Loop will suspend all insulin delivery.\n\n\nCGM Data\n\n\nActual glucose measurements made by a continuous glucose monitor.\n\n\nInsulin Sensitivity\n\n\nA configuration value that provides an estimate of how much blood glucose will drop given a unit of insulin.", 
            "title": "Overview"
        }, 
        {
            "location": "/algorithm/overview/#overview", 
            "text": "Loop\u2019s algorithm for adjusting insulin delivery is oriented around making a glucose prediction.  Every five minutes, triggered by new BG data, it generates a new prediction.  Both  bolus recommendations  and  temporary basal rates  are set based on this prediction.", 
            "title": "Overview"
        }, 
        {
            "location": "/algorithm/overview/#terminology", 
            "text": "This graph and legend illustrates terms commonly used in discussing Loop's algorithm,\nand shows them in the context of historical and forecasted BG in a style similar to the\nstatus screen of Loop.    Insulin Action Duration A configuration value that provides an estimate of how long insulin stays active after delivery.  Target Range  This is the low and high BG values that Loop will attempt to keep you between.  Predicted Glucose  Loop makes a prediction of glucose values out for a length of time equal to your Insulin Action Duration.  Eventual BG  The last value of the prediction.  Minimum BG  The lowest glucose value at any point in time within the prediction.  Minimum BG Guard  A configuration value below which Loop will suspend all insulin delivery.  CGM Data  Actual glucose measurements made by a continuous glucose monitor.  Insulin Sensitivity  A configuration value that provides an estimate of how much blood glucose will drop given a unit of insulin.", 
            "title": "Terminology"
        }, 
        {
            "location": "/algorithm/prediction/", 
            "text": "Glucose Prediction\n\n\nLoop makes a new glucose prediction every five minutes by computing the effects\nof insulin that has been administered from the pump, and carbohydrate records that\nhave been entered into Loop. Two additional terms, glucose momentum, and optionally\nretrospective correction will also be used.\n\n\nYou can see the individual contributions of these effects by tapping on the\npredicted glucose graph on Loop's status screen.\n\n\nThis section needs to be fleshed out with details of how insulin and carb\neffects are calculated, and how momentum and retrospective correction work. For\nnow, refer to:\n\n\n\n\nCarbStore.getGlucoseEffects()\n\n\nDoseStore.getGlucoseEffects()\n\n\nGlucoseStore.getRecentMomentumEffect()\n\n\nLoopDataManager.updateRetrospectiveGlucoseEffect()", 
            "title": "Glucose Prediction"
        }, 
        {
            "location": "/algorithm/prediction/#glucose-prediction", 
            "text": "Loop makes a new glucose prediction every five minutes by computing the effects\nof insulin that has been administered from the pump, and carbohydrate records that\nhave been entered into Loop. Two additional terms, glucose momentum, and optionally\nretrospective correction will also be used.  You can see the individual contributions of these effects by tapping on the\npredicted glucose graph on Loop's status screen.  This section needs to be fleshed out with details of how insulin and carb\neffects are calculated, and how momentum and retrospective correction work. For\nnow, refer to:   CarbStore.getGlucoseEffects()  DoseStore.getGlucoseEffects()  GlucoseStore.getRecentMomentumEffect()  LoopDataManager.updateRetrospectiveGlucoseEffect()", 
            "title": "Glucose Prediction"
        }, 
        {
            "location": "/algorithm/temp_basal/", 
            "text": "Temp Basal Adjustments\n\n\nIf blood glucose is predicted to stray outside of the desired target range, Loop will adjust the basal rate temporarily in an attempt to keep actual blood glucose in range.  To illustrate how it does this, we\u2019ll go through a few examples.\n\n\nEventual BG Above Target Range\n\n\n\n\nWhen eventual BG is predicted to go above the current target range, Loop will calculate a delta from eventual bg to the midpoint of the target range.  Using the currently scheduled insulin sensitivity factor, loop calculates a temporary basal rate above your currently scheduled basal rate that would deliver, over 30 minutes, enough insulin to bring glucose levels back into range, capped at the max basal rate.\n\n\nEventual BG Below Target Range\n\n\n\n\nWhen eventual BG is predicted to go below the current target range, Loop will calculate a delta from eventual bg to the midpoint of the target range.  Using the currently scheduled insulin sensitivity factor, loop calculates a temporary basal rate below your currently scheduled basal rate that would reduce insulin delivery, over 30 minutes, enough to bring glucose levels back into range.  It will reduce delivery to zero if needed.\n\n\nTemporary Excursion Below Range\n\n\n\n\nIf the prediction has a temporary excursion below range, but Eventual BG is in range, Loop will revert to using your normal basal schedule, as long as Minimum BG is above the guard.\n\n\nMinimum BG Below Minimum BG Guard\n\n\n\n\nIf Minimum BG drops below Minimum BG Guard, Loop will zero temp your pump regardless of where Eventual BG is.", 
            "title": "Temp Basal Adjustments"
        }, 
        {
            "location": "/algorithm/temp_basal/#temp-basal-adjustments", 
            "text": "If blood glucose is predicted to stray outside of the desired target range, Loop will adjust the basal rate temporarily in an attempt to keep actual blood glucose in range.  To illustrate how it does this, we\u2019ll go through a few examples.", 
            "title": "Temp Basal Adjustments"
        }, 
        {
            "location": "/algorithm/temp_basal/#eventual-bg-above-target-range", 
            "text": "When eventual BG is predicted to go above the current target range, Loop will calculate a delta from eventual bg to the midpoint of the target range.  Using the currently scheduled insulin sensitivity factor, loop calculates a temporary basal rate above your currently scheduled basal rate that would deliver, over 30 minutes, enough insulin to bring glucose levels back into range, capped at the max basal rate.", 
            "title": "Eventual BG Above Target Range"
        }, 
        {
            "location": "/algorithm/temp_basal/#eventual-bg-below-target-range", 
            "text": "When eventual BG is predicted to go below the current target range, Loop will calculate a delta from eventual bg to the midpoint of the target range.  Using the currently scheduled insulin sensitivity factor, loop calculates a temporary basal rate below your currently scheduled basal rate that would reduce insulin delivery, over 30 minutes, enough to bring glucose levels back into range.  It will reduce delivery to zero if needed.", 
            "title": "Eventual BG Below Target Range"
        }, 
        {
            "location": "/algorithm/temp_basal/#temporary-excursion-below-range", 
            "text": "If the prediction has a temporary excursion below range, but Eventual BG is in range, Loop will revert to using your normal basal schedule, as long as Minimum BG is above the guard.", 
            "title": "Temporary Excursion Below Range"
        }, 
        {
            "location": "/algorithm/temp_basal/#minimum-bg-below-minimum-bg-guard", 
            "text": "If Minimum BG drops below Minimum BG Guard, Loop will zero temp your pump regardless of where Eventual BG is.", 
            "title": "Minimum BG Below Minimum BG Guard"
        }, 
        {
            "location": "/algorithm/bolus/", 
            "text": "Bolus Recommendations\n\n\nLoop also uses the forecast to generate recommendations for bolus amounts. Carbs are not directly used in bolus calculations, but rather indirectly through the forecast. After carbs are entered, the forecast is updated using the carb amounts, and then a recommendation is generated using the forecast.\n\n\nThe forecast used for bolusing is slightly different than the forecast used for adjust temp basals in that positive BG momentum is not included.\n\n\nEventual BG Above Target Range\n\n\n\n\nA bolus recommendation is given if Eventual BG is above Target Range.  The delta between Eventual BG and the top of the Target Range is used, along with your current Insulin Sensitivity to calculate the recommendation.", 
            "title": "Bolus Recommendations"
        }, 
        {
            "location": "/algorithm/bolus/#bolus-recommendations", 
            "text": "Loop also uses the forecast to generate recommendations for bolus amounts. Carbs are not directly used in bolus calculations, but rather indirectly through the forecast. After carbs are entered, the forecast is updated using the carb amounts, and then a recommendation is generated using the forecast.  The forecast used for bolusing is slightly different than the forecast used for adjust temp basals in that positive BG momentum is not included.", 
            "title": "Bolus Recommendations"
        }, 
        {
            "location": "/algorithm/bolus/#eventual-bg-above-target-range", 
            "text": "A bolus recommendation is given if Eventual BG is above Target Range.  The delta between Eventual BG and the top of the Target Range is used, along with your current Insulin Sensitivity to calculate the recommendation.", 
            "title": "Eventual BG Above Target Range"
        }, 
        {
            "location": "/nightscout/overview/", 
            "text": "Overview\n\n\nNightscout (NS) is an excellent tool to remotely view Loop's actions.  It allows for easy remote monitoring of Loop activities, troubleshooting of Loop errors, history of CGM, carbs, boluses, \n temp basals, reports to analyze data trends and patterns. There is a Nightscout app in your iPhone App Store, or you can use a web browser to view the data.  Setting up Nightscout is free and fairly quick.  Once setup, the site can be accessed by anyone that you share your unique Nightscout URL with.  \n\n\nNightscout is highly recommended for Loop users, especially those using Loop as caregivers to t1ds.  Nightscout displays are often the easiest way to troubleshoot Loop settings, if you are having problems and seeking input from others.  Below is some discussion about the general Nightscout display, as well as some Loop-specific display information.\n\n\n\n\n\n\nBlood Glucose\n\n\n\nYour blood glucose (BG) readings from your CGM are shown in green, yellow, or red in the main graph area of NS.  You can adjust your high and low BG targets in NS (when NS alerts will start for high/low BGs), but those will not affect your Loop performance.  Loop only uses the BG targets given in the Loop app settings.  The main screen of BGs is displaying the time duration you have selected (in the example above, 12 hours of BG history).  The bottom of the screen shows the last 48-hours of BG trends.  You can scan backwards by dragging the bottom timeline to the left, if you want to review specific Loop actions or data in the last two days. \n\n\n\nCarbs\n\n\n\nCarbs are automatically uploaded to NS by the Loop app.  The amount of carbs on board (active carbs or COB) can be seen by clicking the Loop pill.  The size of a white carb dot on the graph is proportional to the amount of carbs entered...bigger meals get bigger dots. Loop does not read carbs from NS for use in looping caluclations, it only uploads carbs to NS that have been entered in the Loop app.\n\n\n\nBoluses\n\n\n\nInsulin boluses are also automatically uploaded to NS by the Loop app.  The bolus is shown as a filled in blue lower-half of the dot, and the specific amount of the bolus is also shown.  There may be a slight delay between when the carbs for a meal are uploaded to NS to when the meal bolus appears.  This is because depending on the pump model and size of bolus, the bolus may take a few minutes to actually be given and then Loop has to perform a pump read to verify the reservoir volume has decreased (i.e., the bolus was given).  As shown in the example above, the meal carbs have been uploaded, but the bolus delivery is still in progress.  Insulin on board (active insulin or IOB) is also shown in the Loop pill.\n\n\n\nTemp Basals\n\n\n\nWithin your NS profile, you will enter in the scheduled basal for your t1d.  This is not automatically updated when you update the Loop app or your pump; you will have to manually update your basal profile in your NS site if you change your basal profile in Loop and/or pump.  If you don't update the NS basal profile, it doesn't cause any problems in Loop function...you simply won't have accurate VISUAL representation of high/low temp basals within NS. The dashed blue line represents the scheduled basal profile (as entered in your NS profile).  The solid blue lines indicate the actual basal amounts set for a given time...so as Loop sets temp basals higher or lower than your scheduled basal rate, the solid blue line will jump above or below your dashed blue line.  There is a slight delay (up to 2-5 minutes) in the rendering of basal changes on the blue lines, so if you want the accurate current basal rate, you can check the Loop pill.\n\n\n\nPredicted BG\n\n\n\nThe purple line to the right of the BG is Loop's predicted BG.  Watching the behavior of that purple line can help you understand why Loop is making decisions regarding high or low temps.  You can read more on that topic in the Algorithm section of these docs.\n\n\n\nLoop pill\n\n\n\nThe Loop pill is the little display box which when hovered over, or clicked, will provide additional information about recent Loop activities and status.  Information included is the last time Loop ran, the temp basal set, IOB, and COB.  Looking at the Loop pill is a quick method for assessing if you loop is currently active, as well.  The small symbols to the right of the word Loop have specific meaning.  The small horizontal lightning bolt, shown in this example, is an active loop which recently enacted a temp basal.  You can read the section on Troubleshooting using the Loop Pill for additional information about the various symbols.\n\n\n\nSAGE and CAGE pills\n\n\n\nThe SAGE and CAGE pills are for Sensor Age and Cannula Age.  These optional pills track the time since your CGM sensor and Pump site were last changed.  You can set up custom alerts to remind you when it is time to change the devices, or simply use the visuals to keep track of your particular timing for site/sensor changes.", 
            "title": "Overview"
        }, 
        {
            "location": "/nightscout/overview/#overview", 
            "text": "Nightscout (NS) is an excellent tool to remotely view Loop's actions.  It allows for easy remote monitoring of Loop activities, troubleshooting of Loop errors, history of CGM, carbs, boluses,   temp basals, reports to analyze data trends and patterns. There is a Nightscout app in your iPhone App Store, or you can use a web browser to view the data.  Setting up Nightscout is free and fairly quick.  Once setup, the site can be accessed by anyone that you share your unique Nightscout URL with.    Nightscout is highly recommended for Loop users, especially those using Loop as caregivers to t1ds.  Nightscout displays are often the easiest way to troubleshoot Loop settings, if you are having problems and seeking input from others.  Below is some discussion about the general Nightscout display, as well as some Loop-specific display information.    Blood Glucose  Your blood glucose (BG) readings from your CGM are shown in green, yellow, or red in the main graph area of NS.  You can adjust your high and low BG targets in NS (when NS alerts will start for high/low BGs), but those will not affect your Loop performance.  Loop only uses the BG targets given in the Loop app settings.  The main screen of BGs is displaying the time duration you have selected (in the example above, 12 hours of BG history).  The bottom of the screen shows the last 48-hours of BG trends.  You can scan backwards by dragging the bottom timeline to the left, if you want to review specific Loop actions or data in the last two days.   Carbs  Carbs are automatically uploaded to NS by the Loop app.  The amount of carbs on board (active carbs or COB) can be seen by clicking the Loop pill.  The size of a white carb dot on the graph is proportional to the amount of carbs entered...bigger meals get bigger dots. Loop does not read carbs from NS for use in looping caluclations, it only uploads carbs to NS that have been entered in the Loop app.  Boluses  Insulin boluses are also automatically uploaded to NS by the Loop app.  The bolus is shown as a filled in blue lower-half of the dot, and the specific amount of the bolus is also shown.  There may be a slight delay between when the carbs for a meal are uploaded to NS to when the meal bolus appears.  This is because depending on the pump model and size of bolus, the bolus may take a few minutes to actually be given and then Loop has to perform a pump read to verify the reservoir volume has decreased (i.e., the bolus was given).  As shown in the example above, the meal carbs have been uploaded, but the bolus delivery is still in progress.  Insulin on board (active insulin or IOB) is also shown in the Loop pill.  Temp Basals  Within your NS profile, you will enter in the scheduled basal for your t1d.  This is not automatically updated when you update the Loop app or your pump; you will have to manually update your basal profile in your NS site if you change your basal profile in Loop and/or pump.  If you don't update the NS basal profile, it doesn't cause any problems in Loop function...you simply won't have accurate VISUAL representation of high/low temp basals within NS. The dashed blue line represents the scheduled basal profile (as entered in your NS profile).  The solid blue lines indicate the actual basal amounts set for a given time...so as Loop sets temp basals higher or lower than your scheduled basal rate, the solid blue line will jump above or below your dashed blue line.  There is a slight delay (up to 2-5 minutes) in the rendering of basal changes on the blue lines, so if you want the accurate current basal rate, you can check the Loop pill.  Predicted BG  The purple line to the right of the BG is Loop's predicted BG.  Watching the behavior of that purple line can help you understand why Loop is making decisions regarding high or low temps.  You can read more on that topic in the Algorithm section of these docs.  Loop pill  The Loop pill is the little display box which when hovered over, or clicked, will provide additional information about recent Loop activities and status.  Information included is the last time Loop ran, the temp basal set, IOB, and COB.  Looking at the Loop pill is a quick method for assessing if you loop is currently active, as well.  The small symbols to the right of the word Loop have specific meaning.  The small horizontal lightning bolt, shown in this example, is an active loop which recently enacted a temp basal.  You can read the section on Troubleshooting using the Loop Pill for additional information about the various symbols.  SAGE and CAGE pills  The SAGE and CAGE pills are for Sensor Age and Cannula Age.  These optional pills track the time since your CGM sensor and Pump site were last changed.  You can set up custom alerts to remind you when it is time to change the devices, or simply use the visuals to keep track of your particular timing for site/sensor changes.", 
            "title": "Overview"
        }, 
        {
            "location": "/nightscout/new_user/", 
            "text": "New Nightscout Users\n\n\nTwo options exist for easy hosting of NS; Azure or Heroku. Both hosting services are free.  However,  Azure has data quotas monthly and shorter term CPU quotas.  If you exceed those quotas, you may be facing a monthly data-use bill or being locked out of NS for about 12 hours until the quotas reset.  As you start to use NS more intensively for alarms, pebble watches, etc\u2026it is possible that you may exceed your monthly data cap on Azure.  Many Loop users have transitioned their old sites from Azure over to Heroku and have found the hosting change to be beneficial.  Heroku also has some memory limits, but those limits have been more than adequate for Loop users.  Therefore, we recommend new users start with Heroku.\n\n\nHEROKU NIGHTSCOUT SET-UP\n\n\n\n\nCreate an account at \nHeroku\n and choose the Primary Development Language to be Node.js when you create your account.  You\u2019re going to use a free account, but you will still need to enter credit card information for your account setup.  Don\u2019t forget to check your email to confirm your Heroku account.\n\n\n\n\n\n\n\n\n\n\nCreate an account at \nGitHub\n\n\n\n\n\n\nGo to the \nNightscout cgm-remote-monitor repository\n\n\n\n\n\n\nClick the \u201cFork\u201d button in the upper right corner\n\n\n\n\n\n\n\n\n\n\nScroll down until you see the purple \u201cdeploy to Heroku\u201d button.  Click that button.\n\n\n\n\n\n\n\n\n\n\nGive your app a name, this will be the prefix of your NS site\u2019s URL. For example, https://yourappname.herokuapp.com\n\n\n\n\n\n\nFill out the information lines in the \u201cConfig Variables\u201d Section of that page, as shown below.  Some of the lines can stay with the default entries already provided.\n\n\n\n\n\n\n\n\nAPI_SECRET\n\n\nCreate your own API_SECRET\u2026this is like the password to your NS site.  Please write it down somewhere safe or commit it to memory, you will be using it in the future.  It needs to be at least 12 characters long and should NOT use the `@` symbol.\n\n\n\nDISPLAY_UNITS\n\n\nenter either mg/dl or mmol\n\n\n\nENABLE\n\n\nbridge loop pump iob cob basal careportal sage cage\n\n(enter all of the ENABLE words, without commas.  Just a single space between each word. Make sure autocorrect does not add space between careportal)\n\n\n\nDISABLE\n\n\nLeave blank\n\n\n\nALARM_TYPES\n\n\nsimple\n\n\n\nBG_HIGH\n\n\nenter the numeric value of BG you\u2019d like as an high urgent alarm (Red urgent alert)\n\n\n\nBG_TARGET TOP\n\n\nenter the numeric value of the top of your target BG or the value you\u2019d like NS to start to alert you to high BG values (Yellow warning alert)\n\n\n\nBG_TARGET_BOTTOM\n\n\nenter the numeric value of the bottom of your target BG or the value you\u2019d like NS to start to alert you to low BG values (Yellow warning alert)\n\n\n\nBG_LOW\n\n\nenter the numeric value of the BG you\u2019d like as an urgent low alarm (Red urgent alert)\n\n\n\nPUSHOVER lines\n\n\nCan be left blank for now.   See PUSHOVER section if you want to integrate PUSHOVER notifications with NS later.\n\n\n\nCUSTOM_TITLE\n\n\nThis will be the text displayed in the upper left part of the NS website\n\n\n\nTHEME\n\n\nchange the them from default to colors\n\n\n\nBRIDGE_USER_NAME\n\n\nEnter your Dexcom Share Account login name.  This should be the same account name that the t1d's Share2 app is using in the account settings tab on the Share2 app.\n\n\n\nBRIDGE_PASSWORD\n\n\nEnter your Dexcom Share Account password\n\n\n\nThe remaining variables can be left at their default values.\n\n\n\n\n\n\n\nClick the purple Deploy button at the bottom of screen\n\n\n\n\n\n\n\n\nWait a little bit while Heroku builds your NS app.  You\u2019ll see some text scroll by in the Build App box, and then finally, you will have a message that the NS app was successfully deployed.\n\n\n\n\n\n\n\n\nYou can verify your site\u2019s successful build by clicking View (you should see black site with a profile warning).  You will be redirected to a profile set-up page.  (If it doesn't redirect automatically, refresh your webpage).  \n\n\n\n\n\n\nYou do not have to enter all the information in the Profile if you are using Loop (since Loop will be providing the information for IOB and COB rather than letting NS calculate them), but you do have to fill out the Basal Profile and TimeZone at a minimum in order to have your temp basals properly display.  Click Save when you have entered the information.  You will be prompted to \u201cauthenticate\u201d, if it is the first time you\u2019ve used the device to make changes in your profile.  Click on the Authenticate link at the bottom of the site, and enter your API_SECRET to complete the authentication.\n\n\n\n\n\n\nAssuming your previous browser tab is still open for \"Create a new App | Heroku\", let's go back to that tab.  This time instead of choosing the \"View app\" option, we are going to select the \"Manage App\" button. Then, select the \u201csettings\u201d tab near the top of the screen on your Heroku app.\n\n\n\n\n\n\n\n\nClick on \u201cReveal Config  Vars\u201d.  Scroll down the bottom of the Config Vars lines until you find the last blank one.  You are going to add several additional lines of config vars for Loop use; the DEVICESTATUS_ADVANCED is a required line, the others just make Nightscout more useful when Looping.\n\n\n\n\n\n\n\n\nDEVICESTATUS_ADVANCED\n\n\ntrue\n\n\n\nPUMP_RETRO_FIELDS\n\n\nbattery reservoir clock status\n\n\n\nPUMP_FIELDS\n\n\nbattery reservoir clock status\n\n\n\nSHOW_FORECAST\n\n\nloop\n\n\n\nSHOW_PLUGINS\n\n\nloop pump cob iob sage cage careportal\n\n\n\nPUMP_ENABLE_ALERTS\n\n\ntrue\n\n\n\nPUMP_URGENT_BATT_U\n\n\n30\n\n(this is the pump battery percentage that will trigger a red, urgent alert in NS)\n\n\nPUMP_URGENT_BATT_V\n\n\n1.25\n\n(this is the pump battery voltage that will trigger a red, urgent alert in NS)\n\n\nPUMP_URGENT_RES\n\n\n10\n\n(this is the reservoir volume that will trigger a red, urgent alert in NS)\n\n\nPUMP_URGENT_CLOCK\n\n\n30\n\n\nLOOP_ENABLE_ALERTS\n\n\ntrue\n\n\n\nLOOP_WARN\n\n\n20\n\n(this is the minutes since Loop last successfully looped, the t1d will have a similar notification at this time through the Loop app.  this will be a yellow alert in NS.)\n\n\nLOOP_URGENT\n\n\n60\n\n(same as the alert above, but will be red in color and have a shorter snooze option)\n\n\n\n\n\n\nClick on \u201cOpen App\u201d in the top right corner of your Heroku site.\n\n\n\n\n\n\n\n\nClick on the settings (those three horizontal lines in upper right corner).  Now check  that your basal render is selected to either default or icicle (personal preference for how the temp basals show as blue lines in NS site), check the boxes that you\u2019d like pills showing for info on your NS site in the SHOW PLUGINS (usually all of them), and then press save.\n\n\n\n\n\n\nYour NIGHTSCOUT site is all set-up.  Congrats!\n\n\nEVENT HISTORY\n\n\nDon't forget to keep you Loop App's Preferred Source set to \"Event History\" if you want your NS site to smoothly integrate.  Preferred Source set to \"Reservoir Volumes\" will result in carbs not being uploaded and temp basals not being displayed.", 
            "title": "Setup New Site"
        }, 
        {
            "location": "/nightscout/new_user/#new-nightscout-users", 
            "text": "Two options exist for easy hosting of NS; Azure or Heroku. Both hosting services are free.  However,  Azure has data quotas monthly and shorter term CPU quotas.  If you exceed those quotas, you may be facing a monthly data-use bill or being locked out of NS for about 12 hours until the quotas reset.  As you start to use NS more intensively for alarms, pebble watches, etc\u2026it is possible that you may exceed your monthly data cap on Azure.  Many Loop users have transitioned their old sites from Azure over to Heroku and have found the hosting change to be beneficial.  Heroku also has some memory limits, but those limits have been more than adequate for Loop users.  Therefore, we recommend new users start with Heroku.", 
            "title": "New Nightscout Users"
        }, 
        {
            "location": "/nightscout/new_user/#heroku-nightscout-set-up", 
            "text": "Create an account at  Heroku  and choose the Primary Development Language to be Node.js when you create your account.  You\u2019re going to use a free account, but you will still need to enter credit card information for your account setup.  Don\u2019t forget to check your email to confirm your Heroku account.      Create an account at  GitHub    Go to the  Nightscout cgm-remote-monitor repository    Click the \u201cFork\u201d button in the upper right corner      Scroll down until you see the purple \u201cdeploy to Heroku\u201d button.  Click that button.      Give your app a name, this will be the prefix of your NS site\u2019s URL. For example, https://yourappname.herokuapp.com    Fill out the information lines in the \u201cConfig Variables\u201d Section of that page, as shown below.  Some of the lines can stay with the default entries already provided.     API_SECRET  Create your own API_SECRET\u2026this is like the password to your NS site.  Please write it down somewhere safe or commit it to memory, you will be using it in the future.  It needs to be at least 12 characters long and should NOT use the `@` symbol.  DISPLAY_UNITS  enter either mg/dl or mmol  ENABLE  bridge loop pump iob cob basal careportal sage cage\n\n(enter all of the ENABLE words, without commas.  Just a single space between each word. Make sure autocorrect does not add space between careportal)  DISABLE  Leave blank  ALARM_TYPES  simple  BG_HIGH  enter the numeric value of BG you\u2019d like as an high urgent alarm (Red urgent alert)  BG_TARGET TOP  enter the numeric value of the top of your target BG or the value you\u2019d like NS to start to alert you to high BG values (Yellow warning alert)  BG_TARGET_BOTTOM  enter the numeric value of the bottom of your target BG or the value you\u2019d like NS to start to alert you to low BG values (Yellow warning alert)  BG_LOW  enter the numeric value of the BG you\u2019d like as an urgent low alarm (Red urgent alert)  PUSHOVER lines  Can be left blank for now.   See PUSHOVER section if you want to integrate PUSHOVER notifications with NS later.  CUSTOM_TITLE  This will be the text displayed in the upper left part of the NS website  THEME  change the them from default to colors  BRIDGE_USER_NAME  Enter your Dexcom Share Account login name.  This should be the same account name that the t1d's Share2 app is using in the account settings tab on the Share2 app.  BRIDGE_PASSWORD  Enter your Dexcom Share Account password  The remaining variables can be left at their default values.    Click the purple Deploy button at the bottom of screen     Wait a little bit while Heroku builds your NS app.  You\u2019ll see some text scroll by in the Build App box, and then finally, you will have a message that the NS app was successfully deployed.     You can verify your site\u2019s successful build by clicking View (you should see black site with a profile warning).  You will be redirected to a profile set-up page.  (If it doesn't redirect automatically, refresh your webpage).      You do not have to enter all the information in the Profile if you are using Loop (since Loop will be providing the information for IOB and COB rather than letting NS calculate them), but you do have to fill out the Basal Profile and TimeZone at a minimum in order to have your temp basals properly display.  Click Save when you have entered the information.  You will be prompted to \u201cauthenticate\u201d, if it is the first time you\u2019ve used the device to make changes in your profile.  Click on the Authenticate link at the bottom of the site, and enter your API_SECRET to complete the authentication.    Assuming your previous browser tab is still open for \"Create a new App | Heroku\", let's go back to that tab.  This time instead of choosing the \"View app\" option, we are going to select the \"Manage App\" button. Then, select the \u201csettings\u201d tab near the top of the screen on your Heroku app.     Click on \u201cReveal Config  Vars\u201d.  Scroll down the bottom of the Config Vars lines until you find the last blank one.  You are going to add several additional lines of config vars for Loop use; the DEVICESTATUS_ADVANCED is a required line, the others just make Nightscout more useful when Looping.     DEVICESTATUS_ADVANCED  true  PUMP_RETRO_FIELDS  battery reservoir clock status  PUMP_FIELDS  battery reservoir clock status  SHOW_FORECAST  loop  SHOW_PLUGINS  loop pump cob iob sage cage careportal  PUMP_ENABLE_ALERTS  true  PUMP_URGENT_BATT_U  30 \n(this is the pump battery percentage that will trigger a red, urgent alert in NS) PUMP_URGENT_BATT_V  1.25 \n(this is the pump battery voltage that will trigger a red, urgent alert in NS) PUMP_URGENT_RES  10 \n(this is the reservoir volume that will trigger a red, urgent alert in NS) PUMP_URGENT_CLOCK  30 LOOP_ENABLE_ALERTS  true  LOOP_WARN  20 \n(this is the minutes since Loop last successfully looped, the t1d will have a similar notification at this time through the Loop app.  this will be a yellow alert in NS.) LOOP_URGENT  60 \n(same as the alert above, but will be red in color and have a shorter snooze option)   Click on \u201cOpen App\u201d in the top right corner of your Heroku site.     Click on the settings (those three horizontal lines in upper right corner).  Now check  that your basal render is selected to either default or icicle (personal preference for how the temp basals show as blue lines in NS site), check the boxes that you\u2019d like pills showing for info on your NS site in the SHOW PLUGINS (usually all of them), and then press save.    Your NIGHTSCOUT site is all set-up.  Congrats!", 
            "title": "HEROKU NIGHTSCOUT SET-UP"
        }, 
        {
            "location": "/nightscout/new_user/#event-history", 
            "text": "Don't forget to keep you Loop App's Preferred Source set to \"Event History\" if you want your NS site to smoothly integrate.  Preferred Source set to \"Reservoir Volumes\" will result in carbs not being uploaded and temp basals not being displayed.", 
            "title": "EVENT HISTORY"
        }, 
        {
            "location": "/nightscout/update_user/", 
            "text": "UPDATING NIGHTSCOUT SITE\n\n\nIf you are new to Loop and haven\u2019t updated your NS site since before December 1, 2016, you will want to update your NS site.  You can run either the \"master\" or \"dev\" branches of cgm-remote-monitor with Loop.  To check what version your Nightscout site is running, go to your Nightscout site and pull open the site settings by clicking on the three horizontal lines at the top right of the screen.  Scroll down and see if you are running 0.9.2-dev-20161201 or newer for \"dev\" branch.  Notice the \u201cdev\u201d branch is date stamped 0.9.x-dev-YYYMMDD; or you\u2019ll see version 0.9.2 for \"master\" branch deployments.\n\n\nIf you are a current NS user and simply want to update your site, this procedure will work as well.\n\n\nUpdating your repository in GitHub\n\n\n\n\nCopy, paste, and goto the one of the following links depending on which branch of cgm-remote-monitor you are currently running (replace \"yourgithubname\" with your actual GitHub user name)\n\n\n\n\nFor dev branch deployments:\n\n\nhttps://github.com/yourgithubname/cgm-remote-monitor/compare/dev...nightscout:dev\n\n\nor for master branch deployments:\n\n\nhttps://github.com/yourgithubname/cgm-remote-monitor/compare/master...nightscout:master\n\n\n\n\nClick the big green \"create pull request\" button. Another screen will appear, fill in a title and click button to create the pull request, and then you can \"Merge Pull Request\", and finally \"confirm merge\".\n\u2003\n\n\n\n\n\n\n\nIf you don\u2019t have your Heroku set-up to automatically update when your repository is updated, you may have to go into your Heroku \u201cdeploy\u201d section and manually deploy your branch now that your repository has been updated.  Make sure you are connected to your GitHub cgm-remote-monitor repository.\n\n\n\n\nNew Loopers Variables\n\n\nFor new Loopers (but old Nightscout users), you will need to add some variables to your Heroku site to Loop.  \n\n\n\n\nLogin to your Heroku site, select the \u201csettings\u201d tab near the top of the screen on your Heroku app.\n\n\n\n\n\n\n\n\nClick on \u201cReveal Config  Vars\u201d.  Scroll down the bottom of the Config Vars lines until you find the last blank one.  You are going to add several additional lines of config vars for Loop use; the DEVICESTATUS_ADVANCED and ENABLE lines are required, the others just make Nightscout more useful when Looping.\n\n\n\n\n\n\n\n\nDEVICESTATUS_ADVANCED\n\n\ntrue\n\n\n\nENABLE\n\n\nloop pump careportal bridge basal iob cob sage cage\n\n\n\nSHOW_FORECAST\n\n\nloop\n\n\n\nPUMP_RETRO_FIELDS\n\n\nbattery reservoir clock status\n\n\n\nPUMP_FIELDS\n\n\nbattery reservoir clock status\n\n\n\nSHOW_FORECAST\n\n\nloop\n\n\n\nSHOW_PLUGINS\n\n\nloop pump cob iob sage cage careportal\n\n\n\nPUMP_ENABLE_ALERTS\n\n\ntrue\n\n\n\nPUMP_URGENT_BATT_U\n\n\n30\n\n(this is the pump battery percentage that will trigger a red, urgent alert in NS)\n\n\nPUMP_URGENT_BATT_V\n\n\n1.25\n\n(this is the pump battery voltage that will trigger a red, urgent alert in NS)\n\n\nPUMP_URGENT_RES\n\n\n10\n\n(this is the reservoir volume that will trigger a red, urgent alert in NS)\n\n\nPUMP_URGENT_CLOCK\n\n\n30\n\n\nLOOP_ENABLE_ALERTS\n\n\ntrue\n\n\n\nLOOP_WARN\n\n\n20\n\n(this is the minutes since Loop last successfully looped, the t1d will have a similar notification at this time through the Loop app.  this will be a yellow alert in NS.)\n\n\nLOOP_URGENT\n\n\n60\n\n(same as the alert above, but will be red in color and have a shorter snooze option)\n\n\n\n\n\n\nClick on \u201cOpen App\u201d in the top right corner of your Heroku site.\n\n\n\n\n\n\n\n\nClick on the settings (those three horizontal lines in upper right corner).  Now check  that your basal render is selected to either default or icicle (personal preference for how the temp basals show as blue lines in NS site), check the boxes that you\u2019d like pills showing for info on your NS site in the SHOW PLUGINS (usually all of them), and then press save.\n\n\n\n\n\n\n\n\nDouble check that your NS Profile settings are current and that you have a basal profile entered, if you want to see the temp basals that Loop is setting.\n\n\n\n\nYour NIGHTSCOUT site is all set-up.  Congrats!\n\n\nEVENT HISTORY\n\n\nDon't forget to keep you Loop App's Preferred Source set to \"Event History\" if you want your NS site to smoothly integrate.  Preferred Source set to \"Reservoir Volumes\" will result in carbs not being uploaded and temp basals not being displayed.", 
            "title": "Update Site"
        }, 
        {
            "location": "/nightscout/update_user/#updating-nightscout-site", 
            "text": "If you are new to Loop and haven\u2019t updated your NS site since before December 1, 2016, you will want to update your NS site.  You can run either the \"master\" or \"dev\" branches of cgm-remote-monitor with Loop.  To check what version your Nightscout site is running, go to your Nightscout site and pull open the site settings by clicking on the three horizontal lines at the top right of the screen.  Scroll down and see if you are running 0.9.2-dev-20161201 or newer for \"dev\" branch.  Notice the \u201cdev\u201d branch is date stamped 0.9.x-dev-YYYMMDD; or you\u2019ll see version 0.9.2 for \"master\" branch deployments.  If you are a current NS user and simply want to update your site, this procedure will work as well.", 
            "title": "UPDATING NIGHTSCOUT SITE"
        }, 
        {
            "location": "/nightscout/update_user/#updating-your-repository-in-github", 
            "text": "Copy, paste, and goto the one of the following links depending on which branch of cgm-remote-monitor you are currently running (replace \"yourgithubname\" with your actual GitHub user name)   For dev branch deployments:  https://github.com/yourgithubname/cgm-remote-monitor/compare/dev...nightscout:dev  or for master branch deployments:  https://github.com/yourgithubname/cgm-remote-monitor/compare/master...nightscout:master   Click the big green \"create pull request\" button. Another screen will appear, fill in a title and click button to create the pull request, and then you can \"Merge Pull Request\", and finally \"confirm merge\".\n\u2003    If you don\u2019t have your Heroku set-up to automatically update when your repository is updated, you may have to go into your Heroku \u201cdeploy\u201d section and manually deploy your branch now that your repository has been updated.  Make sure you are connected to your GitHub cgm-remote-monitor repository.", 
            "title": "Updating your repository in GitHub"
        }, 
        {
            "location": "/nightscout/update_user/#new-loopers-variables", 
            "text": "For new Loopers (but old Nightscout users), you will need to add some variables to your Heroku site to Loop.     Login to your Heroku site, select the \u201csettings\u201d tab near the top of the screen on your Heroku app.     Click on \u201cReveal Config  Vars\u201d.  Scroll down the bottom of the Config Vars lines until you find the last blank one.  You are going to add several additional lines of config vars for Loop use; the DEVICESTATUS_ADVANCED and ENABLE lines are required, the others just make Nightscout more useful when Looping.     DEVICESTATUS_ADVANCED  true  ENABLE  loop pump careportal bridge basal iob cob sage cage  SHOW_FORECAST  loop  PUMP_RETRO_FIELDS  battery reservoir clock status  PUMP_FIELDS  battery reservoir clock status  SHOW_FORECAST  loop  SHOW_PLUGINS  loop pump cob iob sage cage careportal  PUMP_ENABLE_ALERTS  true  PUMP_URGENT_BATT_U  30 \n(this is the pump battery percentage that will trigger a red, urgent alert in NS) PUMP_URGENT_BATT_V  1.25 \n(this is the pump battery voltage that will trigger a red, urgent alert in NS) PUMP_URGENT_RES  10 \n(this is the reservoir volume that will trigger a red, urgent alert in NS) PUMP_URGENT_CLOCK  30 LOOP_ENABLE_ALERTS  true  LOOP_WARN  20 \n(this is the minutes since Loop last successfully looped, the t1d will have a similar notification at this time through the Loop app.  this will be a yellow alert in NS.) LOOP_URGENT  60 \n(same as the alert above, but will be red in color and have a shorter snooze option)   Click on \u201cOpen App\u201d in the top right corner of your Heroku site.     Click on the settings (those three horizontal lines in upper right corner).  Now check  that your basal render is selected to either default or icicle (personal preference for how the temp basals show as blue lines in NS site), check the boxes that you\u2019d like pills showing for info on your NS site in the SHOW PLUGINS (usually all of them), and then press save.     Double check that your NS Profile settings are current and that you have a basal profile entered, if you want to see the temp basals that Loop is setting.   Your NIGHTSCOUT site is all set-up.  Congrats!", 
            "title": "New Loopers Variables"
        }, 
        {
            "location": "/nightscout/update_user/#event-history", 
            "text": "Don't forget to keep you Loop App's Preferred Source set to \"Event History\" if you want your NS site to smoothly integrate.  Preferred Source set to \"Reservoir Volumes\" will result in carbs not being uploaded and temp basals not being displayed.", 
            "title": "EVENT HISTORY"
        }, 
        {
            "location": "/nightscout/azure_migration/", 
            "text": "Migrating from Azure to Heroku\n\n\nIf you are a current Azure user who wants to move to Heroku, but not lose all your old NS data, you will need do the following steps:\n\n\n\n\nupdate your repository in GitHub\n\n\ncreate a new heroku nightscout site\n\n\nmigrate your mLab database to new site\n\n\n\n\nUpdating your repository in GitHub\n\n\n\n\nCopy, paste, and goto one of the following links, depending on which branch of cgm-remote-monitor you want to use for your Nightscout site. If you are unsure, use the master branch. (replace \"yourgithubname\" with your actual GitHub user name)\n\n\n\n\nFor dev branch deployments:\n\n\nhttps://github.com/yourgithubname/cgm-remote-monitor/compare/dev...nightscout:dev\n\n\nor for master branch deployments:\n\n\nhttps://github.com/yourgithubname/cgm-remote-monitor/compare/master...nightscout:master\n\n\n\n\n\n\nClick the big green \"create pull request\" button. Another screen will appear, fill in a title and click button to create the pull request, and then you can \"Merge Pull Request\", and finally \"confirm merge\".\n\u2003\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYour cgm-remote-monitor repository is now up-to-date.  Nice work.\n\n\n\n\nHeroku Nightscout Site Setup\n\n\n\n\nCreate an account at \nHeroku\n and choose the Primary Development Language to be Node.js when you create your account.  You\u2019re going to use a free account, but you will still need to enter credit card information for your account setup.  Don\u2019t forget to check your email to confirm your Heroku account.\n\n\n\n\n\n\n\n\n\n\nGo to your Nightscout cgm-remote-monitor repository in GitHub (https://github.com/yourGitHubname/cgm-remote-monitor)\n\n\n\n\n\n\nScroll down until you see the purple \u201cdeploy to Heroku\u201d button.  Click that button.\n\n\n\n\n\n\n\n\n\n\n\n\nGive your app a name, this will be the prefix of your NS site\u2019s URL. For example, https://yourappname.herokuapp.com\n\n\n\n\n\n\nFill out the information lines in the \u201cConfig Variables\u201d Section of that page, as shown below.  Some of the lines can stay with the default entries already provided.\n\n\n\n\n\n\n\n\nAPI_SECRET\n\n\nCreate your own API_SECRET\u2026this is like the password to your NS site.  Please write it down somewhere safe or commit it to memory, you will be using it in the future.  It needs to be at least 12 characters long and should NOT use the `@` symbol.\n\n\n\nDISPLAY_UNITS\n\n\nenter either mg/dl or mmol\n\n\n\nENABLE\n\n\nbridge loop pump iob cob basal careportal sage cage\n\n(enter all of the ENABLE words, without commas.  Just a single space between each word. Make sure autocorrect does not add space between careportal)\n\n\n\nDISABLE\n\n\nLeave blank\n\n\n\nALARM_TYPES\n\n\nsimple\n\n\n\nBG_HIGH\n\n\nenter the numeric value of BG you\u2019d like as an high urgent alarm (Red urgent alert)\n\n\n\nBG_TARGET TOP\n\n\nenter the numeric value of the top of your target BG or the value you\u2019d like NS to start to alert you to high BG values (Yellow warning alert)\n\n\n\nBG_TARGET_BOTTOM\n\n\nenter the numeric value of the bottom of your target BG or the value you\u2019d like NS to start to alert you to low BG values (Yellow warning alert)\n\n\n\nBG_LOW\n\n\nenter the numeric value of the BG you\u2019d like as an urgent low alarm (Red urgent alert)\n\n\n\nPUSHOVER lines\n\n\nCan be left blank for now.   See PUSHOVER section if you want to integrate PUSHOVER notifications with NS later.\n\n\n\nCUSTOM_TITLE\n\n\nThis will be the text displayed in the upper left part of the NS website\n\n\n\nTHEME\n\n\nchange the them from default to colors\n\n\n\nBRIDGE_USER_NAME\n\n\nEnter your Dexcom Share Account login name.  This should be the same account name that the t1d's Share2 app is using in the account settings tab on the Share2 app.\n\n\n\nBRIDGE_PASSWORD\n\n\nEnter your Dexcom Share Account password\n\n\n\nThe remaining variables can be left at their default values.\n\n\n\n\n\n\n\nClick the purple Deploy button at the bottom of screen\n\n\n\n\n\n\n\n\nWait a little bit while Heroku builds your NS app.  You\u2019ll see some text scroll by in the Build App box, and then finally, you will have a message that the NS app was successfully deployed.\n\n\n\n\n\n\n\n\nYou can verify your site\u2019s successful build by clicking View (you should see black site with a profile warning).  You will be redirected to a profile set-up page.  (If it doesn't redirect automatically, refresh your webpage).  \n\n\n\n\n\n\nYou do not have to enter all the information in the Profile if you are using Loop (since Loop will be providing the information for IOB and COB rather than letting NS calculate them), but you do have to fill out the Basal Profile and TimeZone at a minimum in order to have your temp basals properly display.  Click Save when you have entered the information.  You will be prompted to \u201cauthenticate\u201d, if it is the first time you\u2019ve used the device to make changes in your profile.  Click on the Authenticate link at the bottom of the site, and enter your API_SECRET to complete the authentication.\n\n\n\n\n\n\nAssuming your previous browser tab is still open for \"Create a new App | Heroku\", let's go back to that tab.  This time instead of choosing the \"View app\" option, we are going to select the \"Manage App\" button. Then, select the \u201csettings\u201d tab near the top of the screen on your Heroku app.\n\n\n\n\n\n\n\n\nClick on \u201cReveal Config  Vars\u201d.  Scroll down the bottom of the Config Vars lines until you find the last blank one.  You are going to add several additional lines of config vars for Loop use; the DEVICESTATUS_ADVANCED is a required line, the others just make Nightscout more useful when Looping.\n\n\n\n\n\n\n\n\nDEVICESTATUS_ADVANCED\n\n\ntrue\n\n\n\nPUMP_RETRO_FIELDS\n\n\nbattery reservoir clock status\n\n\n\nPUMP_FIELDS\n\n\nbattery reservoir clock status\n\n\n\nSHOW_FORECAST\n\n\nloop\n\n\n\nSHOW_PLUGINS\n\n\nloop pump cob iob sage cage careportal\n\n\n\nPUMP_ENABLE_ALERTS\n\n\ntrue\n\n\n\nPUMP_URGENT_BATT_U\n\n\n30\n\n(this is the pump battery percentage that will trigger a red, urgent alert in NS)\n\n\nPUMP_URGENT_BATT_V\n\n\n1.25\n\n(this is the pump battery voltage that will trigger a red, urgent alert in NS)\n\n\nPUMP_URGENT_RES\n\n\n10\n\n(this is the reservoir volume that will trigger a red, urgent alert in NS)\n\n\nPUMP_URGENT_CLOCK\n\n\n30\n\n\nLOOP_ENABLE_ALERTS\n\n\ntrue\n\n\n\nLOOP_WARN\n\n\n20\n\n(this is the minutes since Loop last successfully looped, the t1d will have a similar notification at this time through the Loop app.  this will be a yellow alert in NS.)\n\n\nLOOP_URGENT\n\n\n60\n\n(same as the alert above, but will be red in color and have a shorter snooze option)\n\n\n\n\n\n\nClick on \u201cOpen App\u201d in the top right corner of your Heroku site.\n\n\n\n\n\n\n\n\nClick on the settings (those three horizontal lines in upper right corner).  Now check  that your basal render is selected to either default or icicle (personal preference for how the temp basals show as blue lines in NS site), check the boxes that you\u2019d like pills showing for info on your NS site in the SHOW PLUGINS (usually all of them), and then press save.\n\n\n\n\n\n\nYour new Nightscout site is all set-up.  Congrats!\n\n\nMigrate mLab database\n\n\nIf you\u2019d like to seamlessly keep all your old Azure NS data showing in your new Heroku NS site, you\u2019ll need to copy and paste your old MONGODB string from your Azure site.  Find it in either Application Settings or Connection strings in your Azure control panel and then go to Heroku\u2019s MONGODB_URI line.  Replace the content with your copied string from Azure.  Double check that your Azure collection used the \u201centries\u201d name\u2026if it doesn\u2019t, then you will need to update that variable in Heroku to match as well.\n\n\n\n\nEVENT HISTORY\n\n\nDon't forget to keep you Loop App's Preferred Source set to \"Event History\" if you want your NS site to smoothly integrate.  Preferred Source set to \"Reservoir Volumes\" will result in carbs not being uploaded and temp basals not being displayed.", 
            "title": "Azure to Heroku"
        }, 
        {
            "location": "/nightscout/azure_migration/#migrating-from-azure-to-heroku", 
            "text": "If you are a current Azure user who wants to move to Heroku, but not lose all your old NS data, you will need do the following steps:   update your repository in GitHub  create a new heroku nightscout site  migrate your mLab database to new site", 
            "title": "Migrating from Azure to Heroku"
        }, 
        {
            "location": "/nightscout/azure_migration/#updating-your-repository-in-github", 
            "text": "Copy, paste, and goto one of the following links, depending on which branch of cgm-remote-monitor you want to use for your Nightscout site. If you are unsure, use the master branch. (replace \"yourgithubname\" with your actual GitHub user name)   For dev branch deployments:  https://github.com/yourgithubname/cgm-remote-monitor/compare/dev...nightscout:dev  or for master branch deployments:  https://github.com/yourgithubname/cgm-remote-monitor/compare/master...nightscout:master    Click the big green \"create pull request\" button. Another screen will appear, fill in a title and click button to create the pull request, and then you can \"Merge Pull Request\", and finally \"confirm merge\".\n\u2003         Your cgm-remote-monitor repository is now up-to-date.  Nice work.", 
            "title": "Updating your repository in GitHub"
        }, 
        {
            "location": "/nightscout/azure_migration/#heroku-nightscout-site-setup", 
            "text": "Create an account at  Heroku  and choose the Primary Development Language to be Node.js when you create your account.  You\u2019re going to use a free account, but you will still need to enter credit card information for your account setup.  Don\u2019t forget to check your email to confirm your Heroku account.      Go to your Nightscout cgm-remote-monitor repository in GitHub (https://github.com/yourGitHubname/cgm-remote-monitor)    Scroll down until you see the purple \u201cdeploy to Heroku\u201d button.  Click that button.       Give your app a name, this will be the prefix of your NS site\u2019s URL. For example, https://yourappname.herokuapp.com    Fill out the information lines in the \u201cConfig Variables\u201d Section of that page, as shown below.  Some of the lines can stay with the default entries already provided.     API_SECRET  Create your own API_SECRET\u2026this is like the password to your NS site.  Please write it down somewhere safe or commit it to memory, you will be using it in the future.  It needs to be at least 12 characters long and should NOT use the `@` symbol.  DISPLAY_UNITS  enter either mg/dl or mmol  ENABLE  bridge loop pump iob cob basal careportal sage cage\n\n(enter all of the ENABLE words, without commas.  Just a single space between each word. Make sure autocorrect does not add space between careportal)  DISABLE  Leave blank  ALARM_TYPES  simple  BG_HIGH  enter the numeric value of BG you\u2019d like as an high urgent alarm (Red urgent alert)  BG_TARGET TOP  enter the numeric value of the top of your target BG or the value you\u2019d like NS to start to alert you to high BG values (Yellow warning alert)  BG_TARGET_BOTTOM  enter the numeric value of the bottom of your target BG or the value you\u2019d like NS to start to alert you to low BG values (Yellow warning alert)  BG_LOW  enter the numeric value of the BG you\u2019d like as an urgent low alarm (Red urgent alert)  PUSHOVER lines  Can be left blank for now.   See PUSHOVER section if you want to integrate PUSHOVER notifications with NS later.  CUSTOM_TITLE  This will be the text displayed in the upper left part of the NS website  THEME  change the them from default to colors  BRIDGE_USER_NAME  Enter your Dexcom Share Account login name.  This should be the same account name that the t1d's Share2 app is using in the account settings tab on the Share2 app.  BRIDGE_PASSWORD  Enter your Dexcom Share Account password  The remaining variables can be left at their default values.    Click the purple Deploy button at the bottom of screen     Wait a little bit while Heroku builds your NS app.  You\u2019ll see some text scroll by in the Build App box, and then finally, you will have a message that the NS app was successfully deployed.     You can verify your site\u2019s successful build by clicking View (you should see black site with a profile warning).  You will be redirected to a profile set-up page.  (If it doesn't redirect automatically, refresh your webpage).      You do not have to enter all the information in the Profile if you are using Loop (since Loop will be providing the information for IOB and COB rather than letting NS calculate them), but you do have to fill out the Basal Profile and TimeZone at a minimum in order to have your temp basals properly display.  Click Save when you have entered the information.  You will be prompted to \u201cauthenticate\u201d, if it is the first time you\u2019ve used the device to make changes in your profile.  Click on the Authenticate link at the bottom of the site, and enter your API_SECRET to complete the authentication.    Assuming your previous browser tab is still open for \"Create a new App | Heroku\", let's go back to that tab.  This time instead of choosing the \"View app\" option, we are going to select the \"Manage App\" button. Then, select the \u201csettings\u201d tab near the top of the screen on your Heroku app.     Click on \u201cReveal Config  Vars\u201d.  Scroll down the bottom of the Config Vars lines until you find the last blank one.  You are going to add several additional lines of config vars for Loop use; the DEVICESTATUS_ADVANCED is a required line, the others just make Nightscout more useful when Looping.     DEVICESTATUS_ADVANCED  true  PUMP_RETRO_FIELDS  battery reservoir clock status  PUMP_FIELDS  battery reservoir clock status  SHOW_FORECAST  loop  SHOW_PLUGINS  loop pump cob iob sage cage careportal  PUMP_ENABLE_ALERTS  true  PUMP_URGENT_BATT_U  30 \n(this is the pump battery percentage that will trigger a red, urgent alert in NS) PUMP_URGENT_BATT_V  1.25 \n(this is the pump battery voltage that will trigger a red, urgent alert in NS) PUMP_URGENT_RES  10 \n(this is the reservoir volume that will trigger a red, urgent alert in NS) PUMP_URGENT_CLOCK  30 LOOP_ENABLE_ALERTS  true  LOOP_WARN  20 \n(this is the minutes since Loop last successfully looped, the t1d will have a similar notification at this time through the Loop app.  this will be a yellow alert in NS.) LOOP_URGENT  60 \n(same as the alert above, but will be red in color and have a shorter snooze option)   Click on \u201cOpen App\u201d in the top right corner of your Heroku site.     Click on the settings (those three horizontal lines in upper right corner).  Now check  that your basal render is selected to either default or icicle (personal preference for how the temp basals show as blue lines in NS site), check the boxes that you\u2019d like pills showing for info on your NS site in the SHOW PLUGINS (usually all of them), and then press save.    Your new Nightscout site is all set-up.  Congrats!", 
            "title": "Heroku Nightscout Site Setup"
        }, 
        {
            "location": "/nightscout/azure_migration/#migrate-mlab-database", 
            "text": "If you\u2019d like to seamlessly keep all your old Azure NS data showing in your new Heroku NS site, you\u2019ll need to copy and paste your old MONGODB string from your Azure site.  Find it in either Application Settings or Connection strings in your Azure control panel and then go to Heroku\u2019s MONGODB_URI line.  Replace the content with your copied string from Azure.  Double check that your Azure collection used the \u201centries\u201d name\u2026if it doesn\u2019t, then you will need to update that variable in Heroku to match as well.", 
            "title": "Migrate mLab database"
        }, 
        {
            "location": "/nightscout/azure_migration/#event-history", 
            "text": "Don't forget to keep you Loop App's Preferred Source set to \"Event History\" if you want your NS site to smoothly integrate.  Preferred Source set to \"Reservoir Volumes\" will result in carbs not being uploaded and temp basals not being displayed.", 
            "title": "EVENT HISTORY"
        }, 
        {
            "location": "/nightscout/mlab_cleanup/", 
            "text": "mLab Database Maintenance\n\n\nRegardless of whether you are on Azure or Heroku for Nightscout, you are using an mLab database for storing your Loop data.  mLab allows you to store up to 500 MB for free.  When you hit that data cap, your NS will stop working.  Your Share Bridge will not pull data and your site will be \u201cstale\u201d.  \n\n\nThe good news?  Loop can still run just fine until you cleanout your mLab database.  The bad news?  You just won\u2019t be able to remotely monitor Loop through NS until you clear up some storage space in mLab.\n\n\nThere are two ways to cleanout some space or otherwise get into your mLab database\n\n mLab direct access\n\n Nightscout admin tools\n\n\nmLab direct access\n\n\n\n\nLogin to your mLab database.  \n\n\n\n\n\u2022   IF you setup your own Azure site and mLab database, go directly to http://mlab.com and login.\n\n\n\u2022   If you setup your own Azure site and mLab database, then setup a Heroku account and pointed back to your old mLab database (i.e., copy and pasted the MONGODB_URI from Azure), go directly to http://mlab.com and login.\n\n\n\u2022   IF you setup a Heroku site and let Heroku setup an mLab database for you (which is typical for new Heroku sites), you will access mLab through your Heroku account main page.   Login to your Heroku account and click on the mLab logo as shown below.\n\n\n\n\n\n\n(Users coming directly from a Heroku click will see the screen below.  If you had to login to mLab with a name and password, you will first see a line with your MongoDB deployment.  Click on your database name to see the screen below with all the collection names.) \n\n\n\n\nYour various collections are shown, similar to the screen shot below.  The amount of data each collection is using is listed to the far right of each collection\u2019s line.  I recommend emptying the \u201cloop\u201d collection first and then \"devicestatus\" to free up database storage.  If you need any of the information in the database, you may want to do a selective delete of data. For example, if you are headed into an endocrinologist appointment and want to print out recent Nightscout reports to take with you. Eventually you may need to empty more collections.  It should be awhile though, as the other collections are significantly smaller and will take a long time to fill.\n\n\nClick on a collection\u2019s name to open it.\n\n\n\n\u2003\n3.  Click on the button that says \u201cDelete all documents in collection\u201d and then confirm the deletion.\n\n\n\n\n\n\nYou can confirm that your cleanout has resolved the problem, by checking that your database size is below 500 MB now.  Click on the \u201cHome\u201d link in top left.  Then review the size of the database as shown.\n\n\n\n\n\n\nNightscout Admin Tools\n\n\nIf you go to your Nightscout site's settings (the three horizontal bars in the upper right of your nightscout site), you will be able to access your Admin Tools for the site.  These include some useful quick mLab actions, includig deleting documents from the devicestatus collection similar to the action we took in the steps above.  But, it's worth noting that if you have errant future data in your Nightscout site that is causing problems (usually during time changes or overseas travel), you can clean-out future entries through this portal too.", 
            "title": "mLab"
        }, 
        {
            "location": "/nightscout/mlab_cleanup/#mlab-database-maintenance", 
            "text": "Regardless of whether you are on Azure or Heroku for Nightscout, you are using an mLab database for storing your Loop data.  mLab allows you to store up to 500 MB for free.  When you hit that data cap, your NS will stop working.  Your Share Bridge will not pull data and your site will be \u201cstale\u201d.    The good news?  Loop can still run just fine until you cleanout your mLab database.  The bad news?  You just won\u2019t be able to remotely monitor Loop through NS until you clear up some storage space in mLab.  There are two ways to cleanout some space or otherwise get into your mLab database  mLab direct access  Nightscout admin tools", 
            "title": "mLab Database Maintenance"
        }, 
        {
            "location": "/nightscout/mlab_cleanup/#mlab-direct-access", 
            "text": "Login to your mLab database.     \u2022   IF you setup your own Azure site and mLab database, go directly to http://mlab.com and login.  \u2022   If you setup your own Azure site and mLab database, then setup a Heroku account and pointed back to your old mLab database (i.e., copy and pasted the MONGODB_URI from Azure), go directly to http://mlab.com and login.  \u2022   IF you setup a Heroku site and let Heroku setup an mLab database for you (which is typical for new Heroku sites), you will access mLab through your Heroku account main page.   Login to your Heroku account and click on the mLab logo as shown below.    (Users coming directly from a Heroku click will see the screen below.  If you had to login to mLab with a name and password, you will first see a line with your MongoDB deployment.  Click on your database name to see the screen below with all the collection names.)    Your various collections are shown, similar to the screen shot below.  The amount of data each collection is using is listed to the far right of each collection\u2019s line.  I recommend emptying the \u201cloop\u201d collection first and then \"devicestatus\" to free up database storage.  If you need any of the information in the database, you may want to do a selective delete of data. For example, if you are headed into an endocrinologist appointment and want to print out recent Nightscout reports to take with you. Eventually you may need to empty more collections.  It should be awhile though, as the other collections are significantly smaller and will take a long time to fill.  Click on a collection\u2019s name to open it.  \n\u2003\n3.  Click on the button that says \u201cDelete all documents in collection\u201d and then confirm the deletion.    You can confirm that your cleanout has resolved the problem, by checking that your database size is below 500 MB now.  Click on the \u201cHome\u201d link in top left.  Then review the size of the database as shown.", 
            "title": "mLab direct access"
        }, 
        {
            "location": "/nightscout/mlab_cleanup/#nightscout-admin-tools", 
            "text": "If you go to your Nightscout site's settings (the three horizontal bars in the upper right of your nightscout site), you will be able to access your Admin Tools for the site.  These include some useful quick mLab actions, includig deleting documents from the devicestatus collection similar to the action we took in the steps above.  But, it's worth noting that if you have errant future data in your Nightscout site that is causing problems (usually during time changes or overseas travel), you can clean-out future entries through this portal too.", 
            "title": "Nightscout Admin Tools"
        }, 
        {
            "location": "/nightscout/troubleshooting/", 
            "text": "Troubleshooting using Loop Pill in Nightscout\n\n\nThe Loop pill in Nightscout has a symbol displayed that helps provide information as to the status of the Loop.\n\n\nX   = error in Loop (see below for troubleshooting)\n\n\u03d5   = recommending basal, but not enacting (open loop or pump suspended)\n\n\u2301   = enacted a new temp basal\n\n\u21bb   = Loop is continuing with last temp basal, no change\n\n\u26a0   = warning (Loop has not completed since since the time set on your LOOP_WARN setting in NS)\n\n\n\n  \n\n    \n\n      \nLoop Pill message\n\n      \nPossible Cause\n\n      \nTroubleshoot\n\n    \n\n  \n\n  \n\n    \n\n      \nunknownResponse (xxxx \u201cSent Pump Message\u201d\u2026)\n\n      \nPump communications are not working\n\n      \n\u2022 Be patient, usually self-resolves within 15 minutes\n\n\u2022   Retune in RileyLink; send button press to verify\n\n\u2022   Check/change pump battery\n\n\u2022   Move RileyLink closer to the pump\n\n\u2022   Check if remote ID is on in pump settings\n\n    \n\n    \n\n      \nrF comms failure (Unable to set TempBasal)\n\n      \nPump settings are not allowing temp basal\n\n      \n\u2022 Check if max temp basal in pump > Loop\u2019s max temp basal\n\n\u2022   Check if temp basal type is set to u/hr in pump\n\n\u2022   Go through steps in \u201cunknownResponse\u201d above\n\n\n    \n\n    \n\n      \nstaleDataError\n\n      \nLoop can\u2019t complete because either the CGM or pump data are old\n\n      \n\u2022 Check the error to see which data has the older date.  \n\n\u2022   If it is pump data that is old, try fetching event history and \u201cunknownResponse\u201d steps.  Set pump date using RileyLink\n\n\u2022   If it is CGM data that is old, troubleshoot dexcom (does it have ???, did transmitter quit, did your session end, update transmitter ID in Loop if new)\n\n\n    \n\n    \n\n      \nRL timeout\n\n      \nRileyLink or iPhone's Bluetooth isn\u2019t working\n\n      \n\u2022 Toggle RL on/off switch  (physical switch)\n\n\u2022   Check battery connection in RileyLink\n\n\u2022   Charge RileyLink\n\n\u2022   Toggle iPhone's BT off and then on\n\n\n\n    \n\n  \n\n\n\n\n\nIf these steps do not resolve your problem, try shutting down Loop app and restarting", 
            "title": "Loop Pill"
        }, 
        {
            "location": "/nightscout/troubleshooting/#troubleshooting-using-loop-pill-in-nightscout", 
            "text": "The Loop pill in Nightscout has a symbol displayed that helps provide information as to the status of the Loop.  X   = error in Loop (see below for troubleshooting) \n\u03d5   = recommending basal, but not enacting (open loop or pump suspended) \n\u2301   = enacted a new temp basal \n\u21bb   = Loop is continuing with last temp basal, no change \n\u26a0   = warning (Loop has not completed since since the time set on your LOOP_WARN setting in NS)  \n   \n     \n       Loop Pill message \n       Possible Cause \n       Troubleshoot \n     \n   \n   \n     \n       unknownResponse (xxxx \u201cSent Pump Message\u201d\u2026) \n       Pump communications are not working \n       \u2022 Be patient, usually self-resolves within 15 minutes\n\n\u2022   Retune in RileyLink; send button press to verify\n\n\u2022   Check/change pump battery\n\n\u2022   Move RileyLink closer to the pump\n\n\u2022   Check if remote ID is on in pump settings \n     \n     \n       rF comms failure (Unable to set TempBasal) \n       Pump settings are not allowing temp basal \n       \u2022 Check if max temp basal in pump > Loop\u2019s max temp basal\n\n\u2022   Check if temp basal type is set to u/hr in pump\n\n\u2022   Go through steps in \u201cunknownResponse\u201d above \n     \n     \n       staleDataError \n       Loop can\u2019t complete because either the CGM or pump data are old \n       \u2022 Check the error to see which data has the older date.  \n\n\u2022   If it is pump data that is old, try fetching event history and \u201cunknownResponse\u201d steps.  Set pump date using RileyLink\n\n\u2022   If it is CGM data that is old, troubleshoot dexcom (does it have ???, did transmitter quit, did your session end, update transmitter ID in Loop if new) \n     \n     \n       RL timeout \n       RileyLink or iPhone's Bluetooth isn\u2019t working \n       \u2022 Toggle RL on/off switch  (physical switch)\n\n\u2022   Check battery connection in RileyLink\n\n\u2022   Charge RileyLink\n\n\u2022   Toggle iPhone's BT off and then on", 
            "title": "Troubleshooting using Loop Pill in Nightscout"
        }, 
        {
            "location": "/nightscout/troubleshooting/#if-these-steps-do-not-resolve-your-problem-try-shutting-down-loop-app-and-restarting", 
            "text": "", 
            "title": "If these steps do not resolve your problem, try shutting down Loop app and restarting"
        }, 
        {
            "location": "/nightscout/ifttt/", 
            "text": "IFTTT Integration\n\n\nIf This, Then That (IFTTT) is a useful Nightscout integration.  By using IFTTT, you can have single button presses that you can deploy from your iPhone to put a note in your NS site, enter low treatments, log a site change, or log a sensor change. \n\n\nIFTTT Setup for phones\n\n\n\n\nFirst we need to gather one thing called your \"hashed API Secret\". In your internet browser, open a console window while viewing your Nightscout site.  Make sure you have \"authenticated\" your site by using your API secret in the Nightscout settings area (hint: if you see a little padlock in the upper left corner of the site, you haven't authenticated it).  Refresh the site and your hashed secret key will be shown as \"apisecrethash: \"xxxxxxxxxx...\"\"  For Safari users on Mac, you can open the console window by selecting \"Develop\" from the Safari top menu, and then \"Show Page Source\" (if you do not see \"Develop\" in the top menu, activate it by going to Safari \n Preferences... \n Advanced, and checking the \"Show Develop menu in menu bar\" option).  If you're having problems seeing the apisecrethash, click the little grey triangle next to the \"status isAuthenticated\" line and the objects below it will display (see screenshot).  Your hashed API secret can be copied and pasted from that line, as shown below.  Save that somewhere easy to get to again, because you will be using it later.\n\n\n\n\n\n\n\n\nGet an \nIFTTT account\n \n\n\n\n\n\n\n\n\nLogin to your IFTTT.com account and select the \"New Applet\" button.\n\n\n\n\n\n\n\n\nIn the screen that appears, click on the blue \"+this\" part of the screen\n\n\n\n\n\n\n\n\nIn the next screen, type \"button\" in the search field and then click on the red box labelled \"ButtonWidget\"\n\n\n\n\n\n\n\n\nConnect the buttonwidget by clicking on the large red \"connect\" button (You will only have to \"connect\" the widgets for the first applet you make.  After that the widgets will already connected to your IFTTT account.)\n\n\n\n\n\n\n\n\nClick on the large red \"button press\" box \n\n\n\n\n\n\n\n\nClick on the blue \"+that\" text\n\n\n\n\n\n\n\n\nEnter \"maker\" in the search field and click on the Maker app\n\n\n\n\n\n\n\n\nConnect the Maker app\n\n\n\n\n\n\n\n\nSelect the grey \"Make a Web Request\" box\n\n\n\n\n\n\n\n\nNow you will have a blank web request template to complete.  \n\n\n\n\n\n\nThe following info should be filled in:\n\n\nURL: https://yoursite.herokuapp.com/api/v1/treatments.json (change the \"yoursite\" part to your NS info)\n\n\nMethod: POST\n\n\nContent Type: application/json\n\n\nBody:  The content of the body will depend on the action that you would like this particular button press to perform.  You can only do ONE of the actions per button.  Some sample content:\n\n\nNote\n\n\n{\nenteredBy\n: \nIFTTT-button\n, \neventType\n: \nNote\n, \nnotes\n: \nHi mom, I love you!\n, \nsecret\n: \nyour_hashed_api_goes_here!!!\n}\n\n\n\n\nLow Treatment\n\n\n{\nenteredBy\n: \nIFTTT-button\n, \nreason\n: \nlow treatment\n, \ncarbs\n: 15, \nsecret\n: \nyour_hashed_api_goes_here!!!\n}\n\n\n\n\nPump Site Change\n\n\n{\nenteredBy\n: \nIFTTT-button\n, \neventType\n: \nSite Change\n, \nduration\n: 0, \nsecret\n: \nyour_hashed_api_goes_here!!!\n}\n\n\n\n\nCGM Sensor Start\n\n\n{\nenteredBy\n: \nIFTTT-button\n, \neventType\n: \nSensor Start\n, \nduration\n: 0, \nsecret\n: \nyour_hashed_api_goes_here!!!\n}\n\n\n\n\n\n\n\n\nClick the \"Create Action\" button on the bottom of the screen when you finish.\n\n\n\n\n\n\nNow is your chance to change the title of your Applet now to something meaningful.  You can turn on notifications, too, using the slider shown.  If you turn on the notifications, you will get an alert on your phone and pebble watch when the button press has been successfully deployed.  Finish the IFTTT button by clicking on the Finish button that appears.  \n\n\n\n\n\n\n\n\n\n\nRepeat the setup for New Applets for as many automated actions as you would like to setup.\n\n\n\n\n\n\nEnable IFTTT in your Nightscout site\n\n\n\n\nFind your Maker Key by going to your IFTTT account, Services and then clicking on Maker, then Maker settings.\n\n\n\n\n\n\n\n\n\n\nYou will see your Maker Key as the last part of the URL; copy and paste that last part (the red underlined part as shown)\n\n\n\n\n\n\n\n\nLogin to your Nightscout site host (azure or heroku) and (1) add your Maker Key to the MAKER_KEY line and (2) add \"maker\" to your ENABLE line.\n\n\n\n\n\n\n\n\nInstall IFTTT app on your iPhone/Android\n\n\n\n\n\n\nDownload the IFTTT app on your phone and log in.\n\n\n\n\n\n\nYou can add homescreen quick buttons.  Click on your IFTTT app and login, click on My Applets in the bottom right corner, and then click on the applet that you'd like to work with.  From the the middle of the applet, click on the Widget Settings, and then click on the Add button for the Homescreen Icon.\n\n\n\n\n\n\n\n\n\n\nFor iPhone users, if you downswipe from the top of your iPhone screen, you will have the Today view or Notifications showing.  They are separate pages; Today view is on the left, Notifications is on the right.  You can left/right swipe to go between them.  Go into the Today view and scroll to the bottom, click \"edit\". This should show a list of existing widgets, followed by a list of \"more widgets\" with green + signs.  Click on the IFTTT's green circle and the widget will be moved to the top, active widgets area.  You can hold your finger on the three left lines of the IFTTT widget row to drag it to the top of your widget panel, if you prefer to have it as the top-most widget. \n\n\n\n\n\n\nIf you end up with more than four IFTTT applets, they will appear in reverse-order of when they were created...which may not be the same as you'd prefer them to appear on your widget bar.  If you'd like to reorder them:\n\n\n\n\ngo into your iPhone's IFTTT app\n\n\nclick on My Applets\n\n\nclick on the gear icon in upper left of screen\n\n\nclick on Widgets\n\n\nclick on the pencil icon in upper right of screen\n\n\nclick and hold the three lines that appear on the right side of the widget that you want to move.  Drag the widget to the order in the list that you'd like it to appear in your widget quickscreen.\n\n\n\n\nAlexa integration\n\n\n\n\nSince you have IFTTT/Maker requests working, you can get it to work with anything that supports IFTTT, including Alexa. You will need to add \"alexa\" to your ENABLE line in your Nightscout host settings (azure) or config vars (heroku).  And then repeat the steps above, but instead of using \"ButtonWidget\" service we started with earlier (the \"+if\" part of the setup)...you will use the \"AmazonAlexa\" service.\n\n\n\n\n\n  * Alexa requests do not need underscores, FYI.", 
            "title": "IFTTT"
        }, 
        {
            "location": "/nightscout/ifttt/#ifttt-integration", 
            "text": "If This, Then That (IFTTT) is a useful Nightscout integration.  By using IFTTT, you can have single button presses that you can deploy from your iPhone to put a note in your NS site, enter low treatments, log a site change, or log a sensor change.", 
            "title": "IFTTT Integration"
        }, 
        {
            "location": "/nightscout/ifttt/#ifttt-setup-for-phones", 
            "text": "First we need to gather one thing called your \"hashed API Secret\". In your internet browser, open a console window while viewing your Nightscout site.  Make sure you have \"authenticated\" your site by using your API secret in the Nightscout settings area (hint: if you see a little padlock in the upper left corner of the site, you haven't authenticated it).  Refresh the site and your hashed secret key will be shown as \"apisecrethash: \"xxxxxxxxxx...\"\"  For Safari users on Mac, you can open the console window by selecting \"Develop\" from the Safari top menu, and then \"Show Page Source\" (if you do not see \"Develop\" in the top menu, activate it by going to Safari   Preferences...   Advanced, and checking the \"Show Develop menu in menu bar\" option).  If you're having problems seeing the apisecrethash, click the little grey triangle next to the \"status isAuthenticated\" line and the objects below it will display (see screenshot).  Your hashed API secret can be copied and pasted from that line, as shown below.  Save that somewhere easy to get to again, because you will be using it later.     Get an  IFTTT account       Login to your IFTTT.com account and select the \"New Applet\" button.     In the screen that appears, click on the blue \"+this\" part of the screen     In the next screen, type \"button\" in the search field and then click on the red box labelled \"ButtonWidget\"     Connect the buttonwidget by clicking on the large red \"connect\" button (You will only have to \"connect\" the widgets for the first applet you make.  After that the widgets will already connected to your IFTTT account.)     Click on the large red \"button press\" box      Click on the blue \"+that\" text     Enter \"maker\" in the search field and click on the Maker app     Connect the Maker app     Select the grey \"Make a Web Request\" box     Now you will have a blank web request template to complete.      The following info should be filled in:  URL: https://yoursite.herokuapp.com/api/v1/treatments.json (change the \"yoursite\" part to your NS info)  Method: POST  Content Type: application/json  Body:  The content of the body will depend on the action that you would like this particular button press to perform.  You can only do ONE of the actions per button.  Some sample content:  Note  { enteredBy :  IFTTT-button ,  eventType :  Note ,  notes :  Hi mom, I love you! ,  secret :  your_hashed_api_goes_here!!! }  Low Treatment  { enteredBy :  IFTTT-button ,  reason :  low treatment ,  carbs : 15,  secret :  your_hashed_api_goes_here!!! }  Pump Site Change  { enteredBy :  IFTTT-button ,  eventType :  Site Change ,  duration : 0,  secret :  your_hashed_api_goes_here!!! }  CGM Sensor Start  { enteredBy :  IFTTT-button ,  eventType :  Sensor Start ,  duration : 0,  secret :  your_hashed_api_goes_here!!! }    Click the \"Create Action\" button on the bottom of the screen when you finish.    Now is your chance to change the title of your Applet now to something meaningful.  You can turn on notifications, too, using the slider shown.  If you turn on the notifications, you will get an alert on your phone and pebble watch when the button press has been successfully deployed.  Finish the IFTTT button by clicking on the Finish button that appears.        Repeat the setup for New Applets for as many automated actions as you would like to setup.", 
            "title": "IFTTT Setup for phones"
        }, 
        {
            "location": "/nightscout/ifttt/#enable-ifttt-in-your-nightscout-site", 
            "text": "Find your Maker Key by going to your IFTTT account, Services and then clicking on Maker, then Maker settings.      You will see your Maker Key as the last part of the URL; copy and paste that last part (the red underlined part as shown)     Login to your Nightscout site host (azure or heroku) and (1) add your Maker Key to the MAKER_KEY line and (2) add \"maker\" to your ENABLE line.", 
            "title": "Enable IFTTT in your Nightscout site"
        }, 
        {
            "location": "/nightscout/ifttt/#install-ifttt-app-on-your-iphoneandroid", 
            "text": "Download the IFTTT app on your phone and log in.    You can add homescreen quick buttons.  Click on your IFTTT app and login, click on My Applets in the bottom right corner, and then click on the applet that you'd like to work with.  From the the middle of the applet, click on the Widget Settings, and then click on the Add button for the Homescreen Icon.      For iPhone users, if you downswipe from the top of your iPhone screen, you will have the Today view or Notifications showing.  They are separate pages; Today view is on the left, Notifications is on the right.  You can left/right swipe to go between them.  Go into the Today view and scroll to the bottom, click \"edit\". This should show a list of existing widgets, followed by a list of \"more widgets\" with green + signs.  Click on the IFTTT's green circle and the widget will be moved to the top, active widgets area.  You can hold your finger on the three left lines of the IFTTT widget row to drag it to the top of your widget panel, if you prefer to have it as the top-most widget.     If you end up with more than four IFTTT applets, they will appear in reverse-order of when they were created...which may not be the same as you'd prefer them to appear on your widget bar.  If you'd like to reorder them:   go into your iPhone's IFTTT app  click on My Applets  click on the gear icon in upper left of screen  click on Widgets  click on the pencil icon in upper right of screen  click and hold the three lines that appear on the right side of the widget that you want to move.  Drag the widget to the order in the list that you'd like it to appear in your widget quickscreen.", 
            "title": "Install IFTTT app on your iPhone/Android"
        }, 
        {
            "location": "/nightscout/ifttt/#alexa-integration", 
            "text": "Since you have IFTTT/Maker requests working, you can get it to work with anything that supports IFTTT, including Alexa. You will need to add \"alexa\" to your ENABLE line in your Nightscout host settings (azure) or config vars (heroku).  And then repeat the steps above, but instead of using \"ButtonWidget\" service we started with earlier (the \"+if\" part of the setup)...you will use the \"AmazonAlexa\" service.   \n  * Alexa requests do not need underscores, FYI.", 
            "title": "Alexa integration"
        }, 
        {
            "location": "/nightscout/pushover/", 
            "text": "Remote notifications\n\n\npushover\n\n\nloop follow app\n\n\nbeta nightscout app\n\n\nifttt", 
            "title": "Remote Notifications"
        }, 
        {
            "location": "/nightscout/pushover/#remote-notifications", 
            "text": "", 
            "title": "Remote notifications"
        }, 
        {
            "location": "/nightscout/pushover/#pushover", 
            "text": "", 
            "title": "pushover"
        }, 
        {
            "location": "/nightscout/pushover/#loop-follow-app", 
            "text": "", 
            "title": "loop follow app"
        }, 
        {
            "location": "/nightscout/pushover/#beta-nightscout-app", 
            "text": "", 
            "title": "beta nightscout app"
        }, 
        {
            "location": "/nightscout/pushover/#ifttt", 
            "text": "", 
            "title": "ifttt"
        }, 
        {
            "location": "/nightscout/reports/", 
            "text": "Reports\n\n\nvisits to endo\n\n\ntreatments report\n\n\ndaily", 
            "title": "Reports"
        }, 
        {
            "location": "/nightscout/reports/#reports", 
            "text": "", 
            "title": "Reports"
        }, 
        {
            "location": "/nightscout/reports/#visits-to-endo", 
            "text": "", 
            "title": "visits to endo"
        }, 
        {
            "location": "/nightscout/reports/#treatments-report", 
            "text": "", 
            "title": "treatments report"
        }, 
        {
            "location": "/nightscout/reports/#daily", 
            "text": "", 
            "title": "daily"
        }
    ]
}