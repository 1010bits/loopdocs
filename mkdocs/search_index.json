{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Loop\n\n\n\n\nIntroduction\n\n\nLoop is an app template for building an automated insulin delivery system. It is a stone resting on the boulders of work done by many others.  The app is built on top of \nLoopKit\n. LoopKit is a set of frameworks that provide data storage, retrieval, and calculation, as well as boilerplate view controllers used in Loop.\n\n\nPlease understand that this project:\n\n\n\n\nIs highly experimental\n\n\nIs not approved for therapy\n\n\n\n\nLoop is an open source insulin delivery system that uses specific commercially and open source hardware and software technologies to bring together the insulin pump, continuous glucose monitor (CGM), and insulin dosing algorithm to create a continuous insulin basal dosing \u201cLoop\u201d.  This Loop predicts future glucose based on basal-rate schedules, carbohydrate intake, insulin on board, and current CGM readings.  These glucose forecasts provide Loop with the information needed to recommend a temporary basal rate to attain a targeted glucose range in the future.  The system can either operate as an \u201copen loop\u201d by making recommendations to the user for their approval before enacting or as a \u201cclosed loop\u201d by automatically setting the recommended temporary basal rate.  \nYou take full responsibility for building and running this system and do so at your own risk.\n\n\nYou should undertake this project in stages. For example, \u201copen loop\u201d first to familiarize yourself with Loop\u2019s operation. Also, investigate the code to ensure you understand what it is recommending and why. Then when you progress to \u201cclosed loop\u201d, do so safely by starting with appropriate safety limits and only progress to higher limits after several days of no lows. Please ask questions at this point about why Loop is making the recommendations it does.  It should be similar to the therapy decisions you would make yourself.  If the recommendations it makes are different than you would make, try to figure out why.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-loop", 
            "text": "", 
            "title": "Welcome to Loop"
        }, 
        {
            "location": "/#introduction", 
            "text": "Loop is an app template for building an automated insulin delivery system. It is a stone resting on the boulders of work done by many others.  The app is built on top of  LoopKit . LoopKit is a set of frameworks that provide data storage, retrieval, and calculation, as well as boilerplate view controllers used in Loop.  Please understand that this project:   Is highly experimental  Is not approved for therapy   Loop is an open source insulin delivery system that uses specific commercially and open source hardware and software technologies to bring together the insulin pump, continuous glucose monitor (CGM), and insulin dosing algorithm to create a continuous insulin basal dosing \u201cLoop\u201d.  This Loop predicts future glucose based on basal-rate schedules, carbohydrate intake, insulin on board, and current CGM readings.  These glucose forecasts provide Loop with the information needed to recommend a temporary basal rate to attain a targeted glucose range in the future.  The system can either operate as an \u201copen loop\u201d by making recommendations to the user for their approval before enacting or as a \u201cclosed loop\u201d by automatically setting the recommended temporary basal rate.   You take full responsibility for building and running this system and do so at your own risk.  You should undertake this project in stages. For example, \u201copen loop\u201d first to familiarize yourself with Loop\u2019s operation. Also, investigate the code to ensure you understand what it is recommending and why. Then when you progress to \u201cclosed loop\u201d, do so safely by starting with appropriate safety limits and only progress to higher limits after several days of no lows. Please ask questions at this point about why Loop is making the recommendations it does.  It should be similar to the therapy decisions you would make yourself.  If the recommendations it makes are different than you would make, try to figure out why.", 
            "title": "Introduction"
        }, 
        {
            "location": "/requirements/", 
            "text": "General\n\n\nLoop has both Hardware and Software requirements.  In general, to use Loop you need to have six components.\n\n\n\n\nCompatible insulin pump\n\n\nCompatible CGM\n\n\nRileyLink\n\n\nCompatible iPhone/iPod Touch\n\n\nApple computer running Mac OS X 10.11.5 or later\n\n\nXcode (a free Apple application)\n\n\n\n\nYou will need to be able to install software on your computer and possibly sign up as an Apple Developer to install the Loop app to your iPhone.  For the most part, if you are comfortable with installing software programs on your computer, you will have no problem building and running Loop. There are detailed step-by-step instructions included in this guide.  You should be doing this yourself so you can understand how to fix it WHEN it breaks. You may want to help another person get set up on Loop, and that is noble, but you will serve them much better if you support them doing the work themselves, rather than doing it for them.\n\n\nHardware\n\n\n\nThe following information is a listing of compatible hardware used with Loop.  \n\n\nInsulin Pump (Required)\n\n\nThere are a number of insulin pumps manufactured between 2006 \u2013 2012 by Medtronic which are compatible.  Compatibility has two requirements; (1) pump model and (2) firmware.\n\n\nThe Loop-compatible pumps are as follows:\n\n\n\n  \n\n    \n\n      \n\n      \nInsulin Pump\n\n    \n\n    \n\n      \nMM 515/715\n2\n\n      \nMM 522/722\n2\n\n      \nMM 523/723\n3\n\n      \nMM 554/754\n3\n\n    \n\n  \n\n  \n\n    \n\n      \nCGM\n\n      \nDexcom G4\n1\n \n\n      \n\u2705\n\n      \n\u2705\n\n      \n\u2705\n\n      \n\u2705\n\n    \n\n    \n\n      \nDexcom G5\n\n      \n\u2705\n\n      \n\u2705\n\n      \n\u2705\n\n      \n\u2705\n\n    \n\n    \n\n      \nMM CGM\n\n      \n\u2705\n\n      \n\u2705\n\n      \n\u2705\n\n      \n\u2705\n\n    \n\n  \n\n\n\n\n\n1\n. Offline access to glucose requires a Receiver with Share and the \nShare2 app\n to be running on the same device. Internet-dependent access via Share servers is also supported.\n\n2\n. Pump must have a remote ID added in the \nRemote Options\n menu.\n\n3\n. Early firmware (US \n= 2.4A, AU/EUR \n= 2.6A) is required for using Closed Loop and Bolus features.\n\n\nAll pumps MUST have a Remote ID added in the pump settings, any group of numbers will do. For x22 pumps use Main Menu -\n Utilities -\n Remote Options -\n On -\n Add ID, while for x23 pumps use Main Menu -\n Utilities -\n Connect Devices -\n Remotes -\n On -\n Add ID. 723/523/754/554 pumps should also be configured with MySentry. MySentry pairing is accomplished by following the instructions at Loop settings -\n RileyLink -\n MySentry Pair while this screen is being displayed.\n\n\nWhat model is my pump?\n\n\nTo determine your pump model, look at the back side of your pump.  There should be a sticker on the underside of the pump.  On the right hand side of the sticker it says REF MMT-XXXXXX\n\n\n\n\nIn the example above it says the pump model is:  MMT-722NAS\n\n\nMMT         Pump Manufacturer Model (MiniMed Medtronic)\n722         Pump Model Number\nNA          Pump Region (NA=North America, CA=Canada/Australia, WW=Worldwide)\nS           Pump Color (S=Smoke, L=Clear/Lucite, B=Blue, P=Pink/Purple)\n\n\n\n(Some pumps may have an \u201cL\u201d or \u201cS\u201d before the NA, e.g. a model number like MMT-LNAS.  There is at least one report of successful looping with an LNAS pump, so as far as we know LNA is equivalent to NA here, but data are limited at present.)\n\n\nThe difference between the Medtronic 500 series and the 700 series pumps is the size of the insulin reservoirs.  The 500 series pumps use a 180 unit reservoir, and the 700 series pumps use a 300 unit reservoir (or smaller 180 unit reservoir if you want).\n\n\nThe difference between the Medtronic x22 pumps and the x23 pumps is primarily three features.  The x23 pumps will allow for basal and bolus increments of 0.025 units, whereas the x22 pumps have larger increments of 0.05 units.  Loop will have the bolus delivery automatically rounded by the pump to the units available in the pump model, and any smaller adjustments (to make up for the rounding) will be made through Loop\u2019s use of temp basals.  Additionally, because of the way Loop fetches information from the pump, the x23 series of pumps are slightly better at conserving battery life through the use of the MySentry.  x22 pumps do not use MySentry.  The x23 series pumps are also somewhat faster at delivering large boluses (up to several times faster for boluses \n 10 units).\n\n\nWhat Is my pump\u2019s firmware?\n\n\nA pump\u2019s firmware is the internal software that runs your pump.  Older Medtronic firmware allows Loop to act as a \u201cremote control\u201d to set temp basals and report back pump data.  Newer firmware disabled that \u201cremote control\u201d access and therefore cannot be used with these DIY APS systems.  There is currently no ability to downgrade a pump\u2019s firmware or replace it with older firmware.  So before you buy a used pump, make sure you are getting one with compatible firmware.\n\n\nTo find your pump\u2019s firmware you will need to power it up.  If the pump has not been powered on for some time (i.e., has been in storage without a battery for awhile), it will run through a start-up count and the firmware version will appear on the bottom right of the pump\u2019s screen.  Don\u2019t turn away, as the Version number will only be displayed for a little while before the screen moves onto other information displays.  \n\n\nIf the pump has been active recently or has a reservoir installed, follow these steps:\n\n\n\n\nPress the \n button on your pump.\n\n\nScroll down with the \n button to the bottom of the status display.\n\n\nRead the bottom line of the display.\n\n\n\n\n\n\nContinuous Glucose Monitor (Required)\n\n\nA continuous glucose monitor (CGM) provides Loop with current blood glucose readings (every 5 minutes, in the case of Dexcom).  These readings allow Loop to predict what the current glucose trend is, and predict the future glucose based on carbohydrate input and basal profiles. The following are the types of CGMs compatible with Loop.\n\n\nDexcom G5 CGM \n\n\nDexcom G5 receives CGM data directly to the iPhone via bluetooth and the Dexcom G5 Mobile app on your iPhone.  It does not require the use of a G5 stand-alone receiver.  With a Dexcom G5 system, Loop can be run offline (i.e., without internet access but still needs bluetooth on).\n\n\nDexcom G4 CGM with Share Receiver \n\n\nDexcom G4 transmits CGM data to a Dexcom G4 Share Receiver.  The receiver, in turn, connects to the Dexcom Share2 app on your iPhone via Bluetooth.  The Share2 app uploads CGM data to the Dexcom servers.  With a Dexcom G4 Share system, Loop can be run offline.\n\n\nMedtronic CGM \n\n\nThe Minimed Enlite CGM, available with the Medtronic 523/723 and 554/754, wirelessly sends blood glucose readings to the pump.  Loop can read the Medtronic CGM data directly from the pump using the RileyLink.  This solution can be used with Loop offline.\n\n\nRileyLink (Required) \n\n\nThe RileyLink is an open-source hardware device that can bridge Bluetooth Low Energy (BLE) to 916MHz wireless communication. What does that mean to you? It means RileyLink is the communication highway between your insulin pump and iPhone.\n\n\n\n\nThe RileyLink is available as a set of PCB files and software, with instructions on how to build your own RileyLink hardware module.  All this can be found here: \nRileyLink Github\n\nIf you aren\u2019t up to the task of building your own RileyLink (and most of us aren\u2019t), community members periodically do a production run of RileyLinks. You can place an order here: \nRileyLink order site\n\n\nApple iPhone (Required)\n\n\nLoop will run on on any iPhone that is running iOS 10.0 or later. iPhones version 6 and up seem to have better bluetooth reliability.\n\n\nApple Watch (Not Required)\n\n\nLoop is currently supported with all released versions of the Apple Watch and Apple Watch OS3.  Cool factor is increased since the T1D can directly enter carbs and boluses straight from the watch, without needing to access the iPhone.\n\n\nThe status screen is shown in the left image and includes loop status, time since last loop, blood glucose and predicted eventual blood glucose.  Carb and bolus screen as indicated on the picture can be accessed by force touching the watch (press hard).   A loop complication exists to show BG on the watchface but the update rate is limited to ~30mins due to limitations imposed by apple to increase battery life. If constant real time monitoring is desired it is recommended to use the loop app as the main screen. This can be achieved by setting the watch to always show last opened app on wake. Loop will always have to be the last app opened for this to work.\n\n\nIf you add an apple watch after building loop you will need to pair your watch to your phone and then rebuild loop to enable the loop watch app to show up as an available watch app.\n\n\n\n\nApple Computer Running OS X 10.11.5 or later (Required)\n\n\nTo build and install Loop onto your iPhone, you will need access to an Apple computer running OS X 10.11.5 or later.   \u201cEl Capitan\u201d is OS X 10.11.  \u201cSierra\u201d is the newly released OS X 10.12.  Access is only required when you are initially installing the Loop app, updating to a newer release, or making changes to the underlying Loop code.  You do NOT need access to an Apple computer in order to troubleshoot or change Loop settings, such as basal profiles or carb ratios.\n\n\nWhere can you find your computer\u2019s OS X version?  Click on the Apple icon in the upper left corner of your Mac\u2019s display.  Select \u201cAbout This Mac\u201d from the dropdown menu, and it will display the OS X version number.\n\n\n\n\nSoftware, Licenses, and Services\n\n\nThe following software, licenses, and services are used to manage, build, compile, deploy, and log data about Loop running on your iPhone.   Not all of the items listed in this section are required, but they may improve your Loop experience This is a list of the software tools and where you can get more information about them.  Installation and configuration of the required tools is in Section 4 of this document.\n\n\nGitHub Access (Required)\n\n\nSo the most obvious thing you will need to run Loop is the \u201csource code\u201d itself.  The code resides on \nGitHub\n. You\u2019ll be downloading the Loop code from GitHub so that you can use it on your computer.  Section 4.1.3 describes how to do that. You will need to make sure you are using a computer and internet access that allows for downloading from GitHub.\n\n\nXcode (Required)\n\n\nTo build and install Loop on your iPhone, you are going to use the Xcode application on your Apple computer.  Xcode is available for free from the \nApple App Store\n.  Go ahead, download it!\n\n\nXcode 8.2.1 is the most recent version.  If your iPhone is running iOS 10.1, you must use Xcode 8.1 or newer. Xcode 8.2.1 requires an Apple computer running OSX Sierra, or OS X El Capitan 10.11.5 or later.\n\n\nLegacy versions:\n\n\n\n\nXcode 8.0 can also be used to build Loop.  Xcode 8.0 will only work with iPhones using iOS 10.0 or earlier.  Xcode 8.0, similar to Xcode 8.1, requires an Apple computer running OSX Sierra, or OS X El Capitan 10.11.5 or later.  You should use the Master branch of Loop v1.1 to build with Xcode 8.0.\n\n\nXcode 7.3 can be used but only up to Loop v0.13.  Subsequent versions of Loop require a more current version of Xcode.  \n\n\n\n\nApple Developer Program Enrollment (Not Required, but HIGHLY recommended)\n\n\nOH, how exciting is this part?  You are on the way to being an official Apple Developer.  Being an Apple Developer allows you to \u201csign\u201d the application software.  Signing tells the iPhone that the software is from a trusted source and keeps your iPhone (a little bit) safer.  Apps won\u2019t run without signing.\n\n\nIf you choose NOT to enroll in the \nApple Developer Program\n, Apple only lets you sign and develop an app for 7 days.  After that, Apple expires the app and it will need to be resigned and reinstalled in order to begin working again.  What does that mean for you?  Reinstalling your Loop app EVERY 7 DAYS to keep it working.  Sound like a royal pain in the butt?  It is.\n\n\nIf you enroll in the Apple Developer Program, the cost is $99 annually.  And your Loop won\u2019t expire for a full year.  THIS IS THE HIGHLY RECOMMENDED OPTION.\n\n\nGitter (Not Required, but Highly Recommended) \n\n\nGitter is an instant messaging/chat platform for software developers and users.  It is the easiest place to seek assistance with Loop.  To use Gitter, go to https://gitter.im/LoopKit/Loop and login with either a GitHub or Twitter account. This should be where you go for questions about your setup process.  If you\u2019re too nervous to ask, you can use the search function on Gitter to look if your question may have been answered recently as well.  However, it\u2019s a friendly group and questions are welcome.  There is a facebook group for loop (Looped)  but technical issues should primarily be resolved in the Gitter room.", 
            "title": "Requirements"
        }, 
        {
            "location": "/requirements/#general", 
            "text": "Loop has both Hardware and Software requirements.  In general, to use Loop you need to have six components.   Compatible insulin pump  Compatible CGM  RileyLink  Compatible iPhone/iPod Touch  Apple computer running Mac OS X 10.11.5 or later  Xcode (a free Apple application)   You will need to be able to install software on your computer and possibly sign up as an Apple Developer to install the Loop app to your iPhone.  For the most part, if you are comfortable with installing software programs on your computer, you will have no problem building and running Loop. There are detailed step-by-step instructions included in this guide.  You should be doing this yourself so you can understand how to fix it WHEN it breaks. You may want to help another person get set up on Loop, and that is noble, but you will serve them much better if you support them doing the work themselves, rather than doing it for them.", 
            "title": "General"
        }, 
        {
            "location": "/requirements/#hardware", 
            "text": "The following information is a listing of compatible hardware used with Loop.", 
            "title": "Hardware"
        }, 
        {
            "location": "/requirements/#insulin-pump-required", 
            "text": "There are a number of insulin pumps manufactured between 2006 \u2013 2012 by Medtronic which are compatible.  Compatibility has two requirements; (1) pump model and (2) firmware.  The Loop-compatible pumps are as follows:  \n   \n     \n       \n       Insulin Pump \n     \n     \n       MM 515/715 2 \n       MM 522/722 2 \n       MM 523/723 3 \n       MM 554/754 3 \n     \n   \n   \n     \n       CGM \n       Dexcom G4 1   \n       \u2705 \n       \u2705 \n       \u2705 \n       \u2705 \n     \n     \n       Dexcom G5 \n       \u2705 \n       \u2705 \n       \u2705 \n       \u2705 \n     \n     \n       MM CGM \n       \u2705 \n       \u2705 \n       \u2705 \n       \u2705 \n     \n     1 . Offline access to glucose requires a Receiver with Share and the  Share2 app  to be running on the same device. Internet-dependent access via Share servers is also supported. 2 . Pump must have a remote ID added in the  Remote Options  menu. 3 . Early firmware (US  = 2.4A, AU/EUR  = 2.6A) is required for using Closed Loop and Bolus features.  All pumps MUST have a Remote ID added in the pump settings, any group of numbers will do. For x22 pumps use Main Menu -  Utilities -  Remote Options -  On -  Add ID, while for x23 pumps use Main Menu -  Utilities -  Connect Devices -  Remotes -  On -  Add ID. 723/523/754/554 pumps should also be configured with MySentry. MySentry pairing is accomplished by following the instructions at Loop settings -  RileyLink -  MySentry Pair while this screen is being displayed.", 
            "title": "Insulin Pump (Required)"
        }, 
        {
            "location": "/requirements/#what-model-is-my-pump", 
            "text": "To determine your pump model, look at the back side of your pump.  There should be a sticker on the underside of the pump.  On the right hand side of the sticker it says REF MMT-XXXXXX   In the example above it says the pump model is:  MMT-722NAS  MMT         Pump Manufacturer Model (MiniMed Medtronic)\n722         Pump Model Number\nNA          Pump Region (NA=North America, CA=Canada/Australia, WW=Worldwide)\nS           Pump Color (S=Smoke, L=Clear/Lucite, B=Blue, P=Pink/Purple)  (Some pumps may have an \u201cL\u201d or \u201cS\u201d before the NA, e.g. a model number like MMT-LNAS.  There is at least one report of successful looping with an LNAS pump, so as far as we know LNA is equivalent to NA here, but data are limited at present.)  The difference between the Medtronic 500 series and the 700 series pumps is the size of the insulin reservoirs.  The 500 series pumps use a 180 unit reservoir, and the 700 series pumps use a 300 unit reservoir (or smaller 180 unit reservoir if you want).  The difference between the Medtronic x22 pumps and the x23 pumps is primarily three features.  The x23 pumps will allow for basal and bolus increments of 0.025 units, whereas the x22 pumps have larger increments of 0.05 units.  Loop will have the bolus delivery automatically rounded by the pump to the units available in the pump model, and any smaller adjustments (to make up for the rounding) will be made through Loop\u2019s use of temp basals.  Additionally, because of the way Loop fetches information from the pump, the x23 series of pumps are slightly better at conserving battery life through the use of the MySentry.  x22 pumps do not use MySentry.  The x23 series pumps are also somewhat faster at delivering large boluses (up to several times faster for boluses   10 units).", 
            "title": "What model is my pump?"
        }, 
        {
            "location": "/requirements/#what-is-my-pumps-firmware", 
            "text": "A pump\u2019s firmware is the internal software that runs your pump.  Older Medtronic firmware allows Loop to act as a \u201cremote control\u201d to set temp basals and report back pump data.  Newer firmware disabled that \u201cremote control\u201d access and therefore cannot be used with these DIY APS systems.  There is currently no ability to downgrade a pump\u2019s firmware or replace it with older firmware.  So before you buy a used pump, make sure you are getting one with compatible firmware.  To find your pump\u2019s firmware you will need to power it up.  If the pump has not been powered on for some time (i.e., has been in storage without a battery for awhile), it will run through a start-up count and the firmware version will appear on the bottom right of the pump\u2019s screen.  Don\u2019t turn away, as the Version number will only be displayed for a little while before the screen moves onto other information displays.    If the pump has been active recently or has a reservoir installed, follow these steps:   Press the   button on your pump.  Scroll down with the   button to the bottom of the status display.  Read the bottom line of the display.", 
            "title": "What Is my pump\u2019s firmware?"
        }, 
        {
            "location": "/requirements/#continuous-glucose-monitor-required", 
            "text": "A continuous glucose monitor (CGM) provides Loop with current blood glucose readings (every 5 minutes, in the case of Dexcom).  These readings allow Loop to predict what the current glucose trend is, and predict the future glucose based on carbohydrate input and basal profiles. The following are the types of CGMs compatible with Loop.", 
            "title": "Continuous Glucose Monitor (Required)"
        }, 
        {
            "location": "/requirements/#dexcom-g5-cgm", 
            "text": "Dexcom G5 receives CGM data directly to the iPhone via bluetooth and the Dexcom G5 Mobile app on your iPhone.  It does not require the use of a G5 stand-alone receiver.  With a Dexcom G5 system, Loop can be run offline (i.e., without internet access but still needs bluetooth on).", 
            "title": "Dexcom G5 CGM "
        }, 
        {
            "location": "/requirements/#dexcom-g4-cgm-with-share-receiver", 
            "text": "Dexcom G4 transmits CGM data to a Dexcom G4 Share Receiver.  The receiver, in turn, connects to the Dexcom Share2 app on your iPhone via Bluetooth.  The Share2 app uploads CGM data to the Dexcom servers.  With a Dexcom G4 Share system, Loop can be run offline.", 
            "title": "Dexcom G4 CGM with Share Receiver "
        }, 
        {
            "location": "/requirements/#medtronic-cgm", 
            "text": "The Minimed Enlite CGM, available with the Medtronic 523/723 and 554/754, wirelessly sends blood glucose readings to the pump.  Loop can read the Medtronic CGM data directly from the pump using the RileyLink.  This solution can be used with Loop offline.", 
            "title": "Medtronic CGM "
        }, 
        {
            "location": "/requirements/#rileylink-required", 
            "text": "The RileyLink is an open-source hardware device that can bridge Bluetooth Low Energy (BLE) to 916MHz wireless communication. What does that mean to you? It means RileyLink is the communication highway between your insulin pump and iPhone.   The RileyLink is available as a set of PCB files and software, with instructions on how to build your own RileyLink hardware module.  All this can be found here:  RileyLink Github \nIf you aren\u2019t up to the task of building your own RileyLink (and most of us aren\u2019t), community members periodically do a production run of RileyLinks. You can place an order here:  RileyLink order site", 
            "title": "RileyLink (Required) "
        }, 
        {
            "location": "/requirements/#apple-iphone-required", 
            "text": "Loop will run on on any iPhone that is running iOS 10.0 or later. iPhones version 6 and up seem to have better bluetooth reliability.", 
            "title": "Apple iPhone (Required)"
        }, 
        {
            "location": "/requirements/#apple-watch-not-required", 
            "text": "Loop is currently supported with all released versions of the Apple Watch and Apple Watch OS3.  Cool factor is increased since the T1D can directly enter carbs and boluses straight from the watch, without needing to access the iPhone.  The status screen is shown in the left image and includes loop status, time since last loop, blood glucose and predicted eventual blood glucose.  Carb and bolus screen as indicated on the picture can be accessed by force touching the watch (press hard).   A loop complication exists to show BG on the watchface but the update rate is limited to ~30mins due to limitations imposed by apple to increase battery life. If constant real time monitoring is desired it is recommended to use the loop app as the main screen. This can be achieved by setting the watch to always show last opened app on wake. Loop will always have to be the last app opened for this to work.  If you add an apple watch after building loop you will need to pair your watch to your phone and then rebuild loop to enable the loop watch app to show up as an available watch app.", 
            "title": "Apple Watch (Not Required)"
        }, 
        {
            "location": "/requirements/#apple-computer-running-os-x-10115-or-later-required", 
            "text": "To build and install Loop onto your iPhone, you will need access to an Apple computer running OS X 10.11.5 or later.   \u201cEl Capitan\u201d is OS X 10.11.  \u201cSierra\u201d is the newly released OS X 10.12.  Access is only required when you are initially installing the Loop app, updating to a newer release, or making changes to the underlying Loop code.  You do NOT need access to an Apple computer in order to troubleshoot or change Loop settings, such as basal profiles or carb ratios.  Where can you find your computer\u2019s OS X version?  Click on the Apple icon in the upper left corner of your Mac\u2019s display.  Select \u201cAbout This Mac\u201d from the dropdown menu, and it will display the OS X version number.", 
            "title": "Apple Computer Running OS X 10.11.5 or later (Required)"
        }, 
        {
            "location": "/requirements/#software-licenses-and-services", 
            "text": "The following software, licenses, and services are used to manage, build, compile, deploy, and log data about Loop running on your iPhone.   Not all of the items listed in this section are required, but they may improve your Loop experience This is a list of the software tools and where you can get more information about them.  Installation and configuration of the required tools is in Section 4 of this document.", 
            "title": "Software, Licenses, and Services"
        }, 
        {
            "location": "/requirements/#github-access-required", 
            "text": "So the most obvious thing you will need to run Loop is the \u201csource code\u201d itself.  The code resides on  GitHub . You\u2019ll be downloading the Loop code from GitHub so that you can use it on your computer.  Section 4.1.3 describes how to do that. You will need to make sure you are using a computer and internet access that allows for downloading from GitHub.", 
            "title": "GitHub Access (Required)"
        }, 
        {
            "location": "/requirements/#xcode-required", 
            "text": "To build and install Loop on your iPhone, you are going to use the Xcode application on your Apple computer.  Xcode is available for free from the  Apple App Store .  Go ahead, download it!  Xcode 8.2.1 is the most recent version.  If your iPhone is running iOS 10.1, you must use Xcode 8.1 or newer. Xcode 8.2.1 requires an Apple computer running OSX Sierra, or OS X El Capitan 10.11.5 or later.  Legacy versions:   Xcode 8.0 can also be used to build Loop.  Xcode 8.0 will only work with iPhones using iOS 10.0 or earlier.  Xcode 8.0, similar to Xcode 8.1, requires an Apple computer running OSX Sierra, or OS X El Capitan 10.11.5 or later.  You should use the Master branch of Loop v1.1 to build with Xcode 8.0.  Xcode 7.3 can be used but only up to Loop v0.13.  Subsequent versions of Loop require a more current version of Xcode.", 
            "title": "Xcode (Required)"
        }, 
        {
            "location": "/requirements/#apple-developer-program-enrollment-not-required-but-highly-recommended", 
            "text": "OH, how exciting is this part?  You are on the way to being an official Apple Developer.  Being an Apple Developer allows you to \u201csign\u201d the application software.  Signing tells the iPhone that the software is from a trusted source and keeps your iPhone (a little bit) safer.  Apps won\u2019t run without signing.  If you choose NOT to enroll in the  Apple Developer Program , Apple only lets you sign and develop an app for 7 days.  After that, Apple expires the app and it will need to be resigned and reinstalled in order to begin working again.  What does that mean for you?  Reinstalling your Loop app EVERY 7 DAYS to keep it working.  Sound like a royal pain in the butt?  It is.  If you enroll in the Apple Developer Program, the cost is $99 annually.  And your Loop won\u2019t expire for a full year.  THIS IS THE HIGHLY RECOMMENDED OPTION.", 
            "title": "Apple Developer Program Enrollment (Not Required, but HIGHLY recommended)"
        }, 
        {
            "location": "/requirements/#gitter-not-required-but-highly-recommended", 
            "text": "Gitter is an instant messaging/chat platform for software developers and users.  It is the easiest place to seek assistance with Loop.  To use Gitter, go to https://gitter.im/LoopKit/Loop and login with either a GitHub or Twitter account. This should be where you go for questions about your setup process.  If you\u2019re too nervous to ask, you can use the search function on Gitter to look if your question may have been answered recently as well.  However, it\u2019s a friendly group and questions are welcome.  There is a facebook group for loop (Looped)  but technical issues should primarily be resolved in the Gitter room.", 
            "title": "Gitter (Not Required, but Highly Recommended) "
        }, 
        {
            "location": "/installing/", 
            "text": "Installing Loop\n\n\nYou\u2019re ready to get to the real stuff now, right?  Excited to get Looping?  Let\u2019s do it.  Let\u2019s put that Loop on your iPhone.\n\n\nSetup your Apple Computer\n\n\nInstall Xcode\n\n\nDid you go to the \nApple App Store\n? It\u2019s an application on your Apple Computer.  Open it and search for Xcode.  Download and install it for free.  Easy peasy.  Except it takes about 20-40 minutes to download depending on your internet speed.\n\n\n\n\nInstall Carthage\n\n\nThe installation of Carthage has a few different ways it can be done, but the easiest is to download the Carthage package here:\n\n\nCarthage.pkg download\n       \n\n\nFind the downloaded \ncarthage.pkg\n in your Downloads folder (option-command-L while in Finder will bring up your Downloads folder).  Double-click the file and follow the directions to install (basically give your computer\u2019s password and it does the rest).  Done.  Nothing more needs to happen with Carthage (it runs in the background).\n\n\n\n\n\nIF you have problems with that method, you can use the \u201cHomebrew method\u201d.  And here\u2019s how it is done:\nOpen the Terminal application on your Apple computer (it is located in the Utilities application folder)\n\n\nCopy and paste the line below into the prompt in Terminal.  Press return after you paste it in.\n\n\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\n\nThere will be a prompt asking if you want to continue (press return to continue, then it may prompt for your password.  enter your computer user password.).  Wait while the script does its thing...you\u2019ll see info scroll by and then it will pause for awhile.  Eventually, it will be done and you\u2019ll see something that says \u201cInstallation successful\u201d and you\u2019ll have a ready terminal prompt again.\n\n\nType \nbrew update\n and press return.\n\n\nType \nbrew install carthage\n and press return.\n\n\nYou can close the Terminal application now.  You\u2019re done with it.  Phew.\n\n\n\n\nDownload Loop Source Code\n\n\nYou\u2019ll need to obtain the Loop\u2019s source code in order to build the app on your computer.  There are various ways of doing that; from super easy to more advanced. Pick whichever method you are comfortable with.  The first two options do not require a GitHub account.  The last option will require you to have a GitHub account.\n\n\n{Note: What\u2019s the disadvantage of the Super Easy option below?  Any customizations you do in Xcode will remain on your local computer only.  If Loop\u2019s source code updates to a new version, you will have to re-enter your customizations if/when you decide to update your Loop to subsequent versions.  However, most customizations are probably going to be fairly quick and easy to redo, just like they were the first time.}\n\n\nOption 1: Direct Download (Super Easy)\n\n\nIf you click on the link below, a copy of the Loop source code\u2019s master branch will be downloaded to your downloads folder.\n\n\nLoop Master branch\n\n\nOption 2: Clone with Terminal (Sorta easy)\n\n\nOpen Terminal Application, copy and paste the line below.  This will download a clone of the master branch to your root directory of your computer user account:\n\n\ngit clone https://github.com/LoopKit/Loop.git\n\n\nOption 3: GitHub Desktop, Fork and Pull the Repo (Advanced)\n\n\nLogin to your GitHub account and fork a copy of the \nLoop repository\n.  \n\n\nSetup a sync between your GitHub repository and your computer by installing \nGithub Desktop\n onto your computer.\n\n\nGo back to your Loop repository in GitHub and press the green \u201cClone or download\u201d button and choose \u201copen in desktop\u201d.  You will now have a copy of the selected branch in stored in your local folder.  \n\n\n\n\nYou can later go into the GitHub desktop client and commit your changes, change branches, etc as you test various configurations.  See Section 4.3.6 for further information about how to commit those changes back to your repository.\n\n\nInstall Loop using Xcode\n\n\nHere\u2019s where the fun really begins.  You\u2019re about to build your Loop app.\n\n\nIf you\u2019ve used the direct download option (super easy), go to your Downloads folder, open the Loop folder, and double click on Loop.xcodeproj.  \n\n\n\n\nIf you used another option, find the Loop folder on your computer and double click on Loop.xcodeproj\n\n\nA warning may appear asking if you really want to open it, click Open.  Xcode will open the project, and take a few moments to organize the files.\n\n\n\n\nOnce Xcode has finished indexing, the Loop project will appear in the far left column.  Click on the blue Loop icon, and then click on the file called Loop.xcconfig.  The middle portion of Xcode window will populate and this is where you will find the MAIN_APP_BUNDLE_IDENTIFIER. The default is com.loopkit\n\n\n\n\nYou need to change the MAIN_APP_BUNDLE_IDENTIFIER  to your own unique identifier.  Keep it in the reverse-domain syntax, meaning start with \u201ccom.\u201d (no quotes though).  After you enter your new MAIN_APP_BUNDLE_IDENTIFIER, save the project using Command-S, and then click on the blue \u201cLoop\u201d file in the far left column.\n\n\n\n\nThe next steps are to \u201csign\u201d the application so that Apple will allow its use on the iPhone.  You will need to select a \u201cteam\u201d.  If you already have a team from previous Xcode projects, you may see teams listed.  Use the dropdown menu to select the appropriate team.  Make sure you keep the \u201cautomatically manage signing\u201d box checked.  \n\n\nIf, however, this is your first time signing an app in Xcode, your screen may instead look like the screen to the right.  In which case, you will need to add a developer account (either free or paid) by clicking on \u201cAdd Account\u201d.  \n\n\n\n\n\u201cAdd Account\u201d will open the Xcode preferences window, as shown below.  You will need to sign in with your Apple ID (or create one, if you don\u2019t already have one).\n\n\n\n\nOnce you get signed in, your Apple ID will appear under the Accounts section as shown below.  Close that window by pressing the little red circle in the upper left corner, and you will return to the main Xcode screen again.\n\n\nNote: You may need to close Xcode and restart to see your Apple account for signing to appear in the Signing section.\n\n\n\n\n\n\nBeginning of SIDE NOTE about signing and Provisioning Profiles.\n\n\nThe 7-day free Provisioning Profiles are signed from \u201c(Personal Team)\u201d.\n\n\nThe full-year paid Provisioning Profiles do NOT have \u201c(Personal Team)\u201d\n\n\n\n\nMany people think \u201cHey I\u2019ll try to build this Loop for free and if I like it, then I\u2019ll buy the $99 Apple Developer license.\u201d  If that\u2019s you right now, please come back here when you are ready to reinstall as a paid developer account.  You will need to:\n\n\n\n\nSelect the correct team because now there will be two to choose from.  Use the one without the \u201c(Personal Team)\u201d to build apps that last a full 12 months.\n\n\nWhen you rebuild your app, choose a new MAIN_APP_BUNDLE_IDENTIFIER different than your previous one.  For example, if you used \u201ccom.yourname\u201d on the free app then choose \u201ccom.yourname2\u201d for the new paid app.  \n\n\nYou will have to re-enter your Loop settings on your new app once it is installed (hopefully, you took written notes of them from when you were running your free app..hint hint).\n\n\n\n\nEnd of SIDE NOTE\n\n\n\n\nWhen you return to the main screen, select your team name and you may see two status warnings.  The first warning may appear if you do not have an iPhone plugged into the Mac.  The \u201cfailed to create a provisioning profile\u201d has details that should alert you to plug in your device (iPhone).  Once you connect your iPhone via cable to the Mac, select your iPhone from the hidden drop down list (see red arrow below).  Your device\u2019s personal name should be at the top of the list.  Select your personal device. You may need to \u201cregister the device\u201d if this is your first time using Xcode with that iphone, follow the prompt if that\u2019s the case.\n\n\n\n\nOnce you select your device, Xcode should resolve the warnings and generate a Provisioning Profile.  If you click on the information icon (little \u201ci\u201d in the circle), for the Provisioning Profile, you can verify the signing date and mark your calendar for rebuilding in 7 days if you are using a free Apple Developer account.  If you are enrolled in the Apple Developer Program (aka paid the $99), the expiration date will be for a year from the creation date.\n\n\nFinally, you need to make sure to sign all FOUR \u201ctargets\u201d to the application; Loop, Loop Status Extension, WatchApp, and WatchApp Extension.  So far, we have only signed the Loop target.  Click on the blue \u201cLoop\u201d on the left and then the box with the vertical line to drop down the targets list.  Choose each of the remaining three targets and then select the signing team that you selected previously in the Loop target signing. Make sure you have signed all four targets.  If the \u201cloopkit\u201d still appears on the Bundle Identifier line, don\u2019t worry about it.  Xcode will update that to your chosen MAIN_APP name when it builds.  Sometimes Xcode is just slow to rename.  Just leave that Bundle Identifier line untouched.\n\n\n\n\n\n\nAt this point in the process, you should make any custom configurations to your Loop app before you finish with the installation of Loop on your iPhone.  If you want to make any of the customizations yourself, the step-by-step instructions are provided below (or by clicking on the link to the left).  When you\u2019ve completed those customizations, please return here and follow the next steps to finish the installation of Loop.\n\n\n\n\nAll done with customizations? Let\u2019s finish the installation of the Loop app onto your iPhone.  Select your device and then press the \u201cplay\u201d button (or build button) to start Xcode on its way.  [You may be prompted to add the iPhone to your Developer Account...go ahead and do so.]  You\u2019ll see the progression of the build in the status window.  If the build is successful, it will say \u201cfinished running Loop\u201d in the status bar.  If the build fails, it will show you red error alerts and you can read what the failure was.  Yellow error alerts do not cause the build to fail, those are just warnings.\n\n\n\n\nIf this is the first time you have installed an app on your iPhone using your Developer Account, you may get a warning like this.  Just follow the directions in the warning, and the issue resolves very quickly.  Click ok and you can safely disconnect your iPhone from the computer.  (If you don\u2019t get a warning and the Loop app installs but does not open, you may still need to go to Settings-\nGeneral-\nDevice Management and enable trust for your Developer Account.)\n\n\n\n\nYou can confirm Loop has installed on your phone simply by looking on the iphone.  Turn it on and check if the Loop app is running, or locating the Loop app icon.  If you don\u2019t see it, try pressing the build (play) button again.  There should be a message at the top of Xcode window indicating a successful build.  Once you get confirmation and can see Loop on your iPhone, you can simply unplug from computer.  \n\n\nCONGRATS!  YOU JUST INSTALLED LOOP!\n\n\n...\n\n\nCode Customizations\n\n\nBased on Loop users\u2019 experience, there are some customizations that you may want to incorporate ahead of building your Loop app.  These customizations must be done prior to building the Loop app onto your iPhone, they cannot be done from within the app itself.\n\n\n[Note: To help you find the Line numbers in Xcode, it may be helpful to turn them on now.  Go to Xcode Preferences, under Text Editing, click the box to Show Line Numbers.  Every effort will be made to update the line numbers as the code is updated periodically, but there may be times where the screenshots and line numbers are slightly different than the current version of Loop code.]\n\n\nDefault Carb Absorption Times\n\n\n\n\nLoop\u2019s default carb absorption times are based on the high, medium, and low glycemic index absorption curves presented in \nThink Like A Pancreas\n by Gary Scheiner.  Currently the lollipop icon is set for 120 minutes, taco icon for 180 minutes, and pizza icon for 240 minutes.  These default values may not work for everyone, you will need to find what works for you.\n\n\nYou can modify these defaults to suit your needs, however it would be best to test your own carb absorption patterns before necessarily adjusting the defaults.  You can always modify these after you\u2019ve had some Loop experience and simply reinstall the Loop.  (after all, you\u2019re a pro at that now)  Section 6 provides some examples of analyzing meal and Loop behaviors to determine if your carb absorption times are accurate.\n\n\nIf you would like to modify those defaults, you can do so in the DeviceDataManager.swift Line 1040.  Note, the times are in hours, not minutes, in the code.\n\n\n\n\nLoop Logo\n\n\nIf you want an app logo other than the default green circle for your Loop app, you can easily customize this.  To make it easy to generate the correct sizes of icons, you can use a site like \nappicon.build\n and just drag and drop your source image. The site will email you a zip file.  Double click the zip file, choose the \u201cios\u201d folder, and copy the contents of the Appicon.appiconset as shown highlighted below.\n\n\n\n\nNow navigate to the corresponding Loop folder as shown below.  Replace the contents of the Appicon.appiconset with your copied images.\n\n\n\n\nYou can confirm the successful change by looking in Xcode.  You should see your custom logo in the Appicon set now.  You will also likely see a yellow alert that there are \u201c5 unassigned children\u201d.  This alert will not prevent your app from building, it\u2019s simply because the zipfile contained more sizes of images than Loop app uses.  You can just leave the unassigned images as is.\n\n\n\n\nLoop Graph hours\n\n\nIf you want the Loop\u2019s graphs to display different time length than the default, you will go to the StatusTableViewController.swift line 181. This code keeps track of how many hours to display in total and how far into the future to display on your graphs. For total hours it does a calculation based upon your screen size and how granular to display between each segment. For how far forward to display, it currently uses your Insulin Action Duration setting to determine this (and if that number is missing for some reason it defaults to 4 hours).\n\n\nPlease note, using this will make it more difficult to see changes in other charts on your screen (like length of temp basal).\n\n\n\n\nHere are a couple of ways you could modify line 181 based on your specific wants:\n\n\nWant double the amount of total hours shown?\n\nlet historyHours = (totalHours * 2) - (dataManager.insulinActionDuration ?? TimeInterval(hours: 4)).hours\n\n\nWant 1/2 of my Insulin Action Duration to show in the future?\n\nlet historyHours = totalHours - ((dataManager.insulinActionDuration / 2) ?? TimeInterval(hours: 4)).hours\n\n\nWant 2.5 x the total time and only 2 hours forward within that?\n\nlet historyHours = (totalHours * 2.5) - (TimeInterval(hours: 2)).hours\n\n\nWorkout Range Duration\n\n\n\nIf you\u2019d like more than just the standard 1 or 2 hour duration for the Workout Range, you can add or modify the code to add another time interval or edit the existing ones.\n\n\nGo to the Loop\nExtensions\nUIAlertController.swift and modify Line 30.  The default has 1 and 2 hours as shown where the arrow is pointing in the screenshot.  You can edit those to whatever duration you want (in units of hours) and add a duration if you prefer.  If you\u2019d like 1, 2, and 3 hours options...simply edit the numbers in the brackets to read [1, 2, 3]. It is possible to enter less than 1 hour intervals such as 15min, 30 min, 45 min by editing the brackets to read [0.25, 0.5, 0.75].\n\n\n\n\nApple Watch Customizations\n\n\nRecommended Bolus Autofill\n\n\nThe Apple Watch's default is to autofill to 75% of the recommended bolus.  If you wish, you can customize so that the watch autofills a different percentage. To do this, the multiplier can be changed from 0.75 to a value of your choice. A value of 1 will autofill 100% of the recommended bolus. A value of 0 will autofill 0% of the recommended bolus.   Go to the Loop Watchapp Extension Folder, within that go to the controllers folder, within that go to BolusInterfaceController.swift. Edit the section of line 97 as indicated on the picture below.\n\n\n\n\nAdjust sensitivity of digital crown for carb and bolus entry\n\n\nThe rate of change of the carb and bolus entry pickers when using the digital crown can be altered. Navigate to the WatchApp Extension folder and within that the Controllers folder. Edit line 130 of AddCarbsInterfaceController.swift and line 161 of BolusInterfaceController.swift. The 1/24 value is the ratio of rotations of the crown to the amount of change in the value. Changing it to 1/12 would mean that twice as many turns would be needed for the same amount of carb or bolus entry.\n\n\nCommit to GitHub\n\n\nOptional Step:  If you would like to commit customizations back into your GitHub repository, you can do that quite easily IF you used the GitHub desktop client to get your Loop source code.  The advantage of doing this is that when Loop releases a new version, you can use GitHub to update your Loop\u2019s code to the new version without needing to redo your code customizations.  You will also have a copy of your customized Loop code available online if you need to do a Loop app rebuild while away from home.\n\n\nAfter you\u2019ve made your customizations to your Loop code, go to the Xcode Source Control menu and choose \u201cCommit\u201d.\n\n\n\n\nOnce you have committed the changes, you will be able to see the changes highlighted in your GitHub desktop client\n\n\n\n\nFinally, go to the same Source Control menu in Xcode that you just used to \u201cCommit\u201d and this time choose \u201cPush\u201d.  This will push your code customizations up to your GitHub repository.  You can confirm this by finding the Loop.xcconfig file and looking at the MAIN_APP_BUNDLE_IDENTIFIER.  It should no longer say \ncom.loopkit\n.", 
            "title": "Installing"
        }, 
        {
            "location": "/installing/#installing-loop", 
            "text": "You\u2019re ready to get to the real stuff now, right?  Excited to get Looping?  Let\u2019s do it.  Let\u2019s put that Loop on your iPhone.", 
            "title": "Installing Loop"
        }, 
        {
            "location": "/installing/#setup-your-apple-computer", 
            "text": "", 
            "title": "Setup your Apple Computer"
        }, 
        {
            "location": "/installing/#install-xcode", 
            "text": "Did you go to the  Apple App Store ? It\u2019s an application on your Apple Computer.  Open it and search for Xcode.  Download and install it for free.  Easy peasy.  Except it takes about 20-40 minutes to download depending on your internet speed.", 
            "title": "Install Xcode"
        }, 
        {
            "location": "/installing/#install-carthage", 
            "text": "The installation of Carthage has a few different ways it can be done, but the easiest is to download the Carthage package here:  Carthage.pkg download          Find the downloaded  carthage.pkg  in your Downloads folder (option-command-L while in Finder will bring up your Downloads folder).  Double-click the file and follow the directions to install (basically give your computer\u2019s password and it does the rest).  Done.  Nothing more needs to happen with Carthage (it runs in the background).   IF you have problems with that method, you can use the \u201cHomebrew method\u201d.  And here\u2019s how it is done:\nOpen the Terminal application on your Apple computer (it is located in the Utilities application folder)  Copy and paste the line below into the prompt in Terminal.  Press return after you paste it in.  /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"  There will be a prompt asking if you want to continue (press return to continue, then it may prompt for your password.  enter your computer user password.).  Wait while the script does its thing...you\u2019ll see info scroll by and then it will pause for awhile.  Eventually, it will be done and you\u2019ll see something that says \u201cInstallation successful\u201d and you\u2019ll have a ready terminal prompt again.  Type  brew update  and press return.  Type  brew install carthage  and press return.  You can close the Terminal application now.  You\u2019re done with it.  Phew.", 
            "title": "Install Carthage"
        }, 
        {
            "location": "/installing/#download-loop-source-code", 
            "text": "You\u2019ll need to obtain the Loop\u2019s source code in order to build the app on your computer.  There are various ways of doing that; from super easy to more advanced. Pick whichever method you are comfortable with.  The first two options do not require a GitHub account.  The last option will require you to have a GitHub account.  {Note: What\u2019s the disadvantage of the Super Easy option below?  Any customizations you do in Xcode will remain on your local computer only.  If Loop\u2019s source code updates to a new version, you will have to re-enter your customizations if/when you decide to update your Loop to subsequent versions.  However, most customizations are probably going to be fairly quick and easy to redo, just like they were the first time.}", 
            "title": "Download Loop Source Code"
        }, 
        {
            "location": "/installing/#option-1-direct-download-super-easy", 
            "text": "If you click on the link below, a copy of the Loop source code\u2019s master branch will be downloaded to your downloads folder.  Loop Master branch", 
            "title": "Option 1: Direct Download (Super Easy)"
        }, 
        {
            "location": "/installing/#option-2-clone-with-terminal-sorta-easy", 
            "text": "Open Terminal Application, copy and paste the line below.  This will download a clone of the master branch to your root directory of your computer user account:  git clone https://github.com/LoopKit/Loop.git", 
            "title": "Option 2: Clone with Terminal (Sorta easy)"
        }, 
        {
            "location": "/installing/#option-3-github-desktop-fork-and-pull-the-repo-advanced", 
            "text": "Login to your GitHub account and fork a copy of the  Loop repository .    Setup a sync between your GitHub repository and your computer by installing  Github Desktop  onto your computer.  Go back to your Loop repository in GitHub and press the green \u201cClone or download\u201d button and choose \u201copen in desktop\u201d.  You will now have a copy of the selected branch in stored in your local folder.     You can later go into the GitHub desktop client and commit your changes, change branches, etc as you test various configurations.  See Section 4.3.6 for further information about how to commit those changes back to your repository.", 
            "title": "Option 3: GitHub Desktop, Fork and Pull the Repo (Advanced)"
        }, 
        {
            "location": "/installing/#install-loop-using-xcode", 
            "text": "Here\u2019s where the fun really begins.  You\u2019re about to build your Loop app.  If you\u2019ve used the direct download option (super easy), go to your Downloads folder, open the Loop folder, and double click on Loop.xcodeproj.     If you used another option, find the Loop folder on your computer and double click on Loop.xcodeproj  A warning may appear asking if you really want to open it, click Open.  Xcode will open the project, and take a few moments to organize the files.   Once Xcode has finished indexing, the Loop project will appear in the far left column.  Click on the blue Loop icon, and then click on the file called Loop.xcconfig.  The middle portion of Xcode window will populate and this is where you will find the MAIN_APP_BUNDLE_IDENTIFIER. The default is com.loopkit   You need to change the MAIN_APP_BUNDLE_IDENTIFIER  to your own unique identifier.  Keep it in the reverse-domain syntax, meaning start with \u201ccom.\u201d (no quotes though).  After you enter your new MAIN_APP_BUNDLE_IDENTIFIER, save the project using Command-S, and then click on the blue \u201cLoop\u201d file in the far left column.   The next steps are to \u201csign\u201d the application so that Apple will allow its use on the iPhone.  You will need to select a \u201cteam\u201d.  If you already have a team from previous Xcode projects, you may see teams listed.  Use the dropdown menu to select the appropriate team.  Make sure you keep the \u201cautomatically manage signing\u201d box checked.    If, however, this is your first time signing an app in Xcode, your screen may instead look like the screen to the right.  In which case, you will need to add a developer account (either free or paid) by clicking on \u201cAdd Account\u201d.     \u201cAdd Account\u201d will open the Xcode preferences window, as shown below.  You will need to sign in with your Apple ID (or create one, if you don\u2019t already have one).   Once you get signed in, your Apple ID will appear under the Accounts section as shown below.  Close that window by pressing the little red circle in the upper left corner, and you will return to the main Xcode screen again.  Note: You may need to close Xcode and restart to see your Apple account for signing to appear in the Signing section.    Beginning of SIDE NOTE about signing and Provisioning Profiles.  The 7-day free Provisioning Profiles are signed from \u201c(Personal Team)\u201d.  The full-year paid Provisioning Profiles do NOT have \u201c(Personal Team)\u201d   Many people think \u201cHey I\u2019ll try to build this Loop for free and if I like it, then I\u2019ll buy the $99 Apple Developer license.\u201d  If that\u2019s you right now, please come back here when you are ready to reinstall as a paid developer account.  You will need to:   Select the correct team because now there will be two to choose from.  Use the one without the \u201c(Personal Team)\u201d to build apps that last a full 12 months.  When you rebuild your app, choose a new MAIN_APP_BUNDLE_IDENTIFIER different than your previous one.  For example, if you used \u201ccom.yourname\u201d on the free app then choose \u201ccom.yourname2\u201d for the new paid app.    You will have to re-enter your Loop settings on your new app once it is installed (hopefully, you took written notes of them from when you were running your free app..hint hint).   End of SIDE NOTE   When you return to the main screen, select your team name and you may see two status warnings.  The first warning may appear if you do not have an iPhone plugged into the Mac.  The \u201cfailed to create a provisioning profile\u201d has details that should alert you to plug in your device (iPhone).  Once you connect your iPhone via cable to the Mac, select your iPhone from the hidden drop down list (see red arrow below).  Your device\u2019s personal name should be at the top of the list.  Select your personal device. You may need to \u201cregister the device\u201d if this is your first time using Xcode with that iphone, follow the prompt if that\u2019s the case.   Once you select your device, Xcode should resolve the warnings and generate a Provisioning Profile.  If you click on the information icon (little \u201ci\u201d in the circle), for the Provisioning Profile, you can verify the signing date and mark your calendar for rebuilding in 7 days if you are using a free Apple Developer account.  If you are enrolled in the Apple Developer Program (aka paid the $99), the expiration date will be for a year from the creation date.  Finally, you need to make sure to sign all FOUR \u201ctargets\u201d to the application; Loop, Loop Status Extension, WatchApp, and WatchApp Extension.  So far, we have only signed the Loop target.  Click on the blue \u201cLoop\u201d on the left and then the box with the vertical line to drop down the targets list.  Choose each of the remaining three targets and then select the signing team that you selected previously in the Loop target signing. Make sure you have signed all four targets.  If the \u201cloopkit\u201d still appears on the Bundle Identifier line, don\u2019t worry about it.  Xcode will update that to your chosen MAIN_APP name when it builds.  Sometimes Xcode is just slow to rename.  Just leave that Bundle Identifier line untouched.    At this point in the process, you should make any custom configurations to your Loop app before you finish with the installation of Loop on your iPhone.  If you want to make any of the customizations yourself, the step-by-step instructions are provided below (or by clicking on the link to the left).  When you\u2019ve completed those customizations, please return here and follow the next steps to finish the installation of Loop.   All done with customizations? Let\u2019s finish the installation of the Loop app onto your iPhone.  Select your device and then press the \u201cplay\u201d button (or build button) to start Xcode on its way.  [You may be prompted to add the iPhone to your Developer Account...go ahead and do so.]  You\u2019ll see the progression of the build in the status window.  If the build is successful, it will say \u201cfinished running Loop\u201d in the status bar.  If the build fails, it will show you red error alerts and you can read what the failure was.  Yellow error alerts do not cause the build to fail, those are just warnings.   If this is the first time you have installed an app on your iPhone using your Developer Account, you may get a warning like this.  Just follow the directions in the warning, and the issue resolves very quickly.  Click ok and you can safely disconnect your iPhone from the computer.  (If you don\u2019t get a warning and the Loop app installs but does not open, you may still need to go to Settings- General- Device Management and enable trust for your Developer Account.)   You can confirm Loop has installed on your phone simply by looking on the iphone.  Turn it on and check if the Loop app is running, or locating the Loop app icon.  If you don\u2019t see it, try pressing the build (play) button again.  There should be a message at the top of Xcode window indicating a successful build.  Once you get confirmation and can see Loop on your iPhone, you can simply unplug from computer.    CONGRATS!  YOU JUST INSTALLED LOOP!  ...", 
            "title": "Install Loop using Xcode"
        }, 
        {
            "location": "/installing/#code-customizations", 
            "text": "Based on Loop users\u2019 experience, there are some customizations that you may want to incorporate ahead of building your Loop app.  These customizations must be done prior to building the Loop app onto your iPhone, they cannot be done from within the app itself.  [Note: To help you find the Line numbers in Xcode, it may be helpful to turn them on now.  Go to Xcode Preferences, under Text Editing, click the box to Show Line Numbers.  Every effort will be made to update the line numbers as the code is updated periodically, but there may be times where the screenshots and line numbers are slightly different than the current version of Loop code.]", 
            "title": "Code Customizations"
        }, 
        {
            "location": "/installing/#default-carb-absorption-times", 
            "text": "Loop\u2019s default carb absorption times are based on the high, medium, and low glycemic index absorption curves presented in  Think Like A Pancreas  by Gary Scheiner.  Currently the lollipop icon is set for 120 minutes, taco icon for 180 minutes, and pizza icon for 240 minutes.  These default values may not work for everyone, you will need to find what works for you.  You can modify these defaults to suit your needs, however it would be best to test your own carb absorption patterns before necessarily adjusting the defaults.  You can always modify these after you\u2019ve had some Loop experience and simply reinstall the Loop.  (after all, you\u2019re a pro at that now)  Section 6 provides some examples of analyzing meal and Loop behaviors to determine if your carb absorption times are accurate.  If you would like to modify those defaults, you can do so in the DeviceDataManager.swift Line 1040.  Note, the times are in hours, not minutes, in the code.", 
            "title": "Default Carb Absorption Times"
        }, 
        {
            "location": "/installing/#loop-logo", 
            "text": "If you want an app logo other than the default green circle for your Loop app, you can easily customize this.  To make it easy to generate the correct sizes of icons, you can use a site like  appicon.build  and just drag and drop your source image. The site will email you a zip file.  Double click the zip file, choose the \u201cios\u201d folder, and copy the contents of the Appicon.appiconset as shown highlighted below.   Now navigate to the corresponding Loop folder as shown below.  Replace the contents of the Appicon.appiconset with your copied images.   You can confirm the successful change by looking in Xcode.  You should see your custom logo in the Appicon set now.  You will also likely see a yellow alert that there are \u201c5 unassigned children\u201d.  This alert will not prevent your app from building, it\u2019s simply because the zipfile contained more sizes of images than Loop app uses.  You can just leave the unassigned images as is.", 
            "title": "Loop Logo"
        }, 
        {
            "location": "/installing/#loop-graph-hours", 
            "text": "If you want the Loop\u2019s graphs to display different time length than the default, you will go to the StatusTableViewController.swift line 181. This code keeps track of how many hours to display in total and how far into the future to display on your graphs. For total hours it does a calculation based upon your screen size and how granular to display between each segment. For how far forward to display, it currently uses your Insulin Action Duration setting to determine this (and if that number is missing for some reason it defaults to 4 hours).  Please note, using this will make it more difficult to see changes in other charts on your screen (like length of temp basal).   Here are a couple of ways you could modify line 181 based on your specific wants:  Want double the amount of total hours shown? let historyHours = (totalHours * 2) - (dataManager.insulinActionDuration ?? TimeInterval(hours: 4)).hours  Want 1/2 of my Insulin Action Duration to show in the future? let historyHours = totalHours - ((dataManager.insulinActionDuration / 2) ?? TimeInterval(hours: 4)).hours  Want 2.5 x the total time and only 2 hours forward within that? let historyHours = (totalHours * 2.5) - (TimeInterval(hours: 2)).hours", 
            "title": "Loop Graph hours"
        }, 
        {
            "location": "/installing/#workout-range-duration", 
            "text": "If you\u2019d like more than just the standard 1 or 2 hour duration for the Workout Range, you can add or modify the code to add another time interval or edit the existing ones.  Go to the Loop Extensions UIAlertController.swift and modify Line 30.  The default has 1 and 2 hours as shown where the arrow is pointing in the screenshot.  You can edit those to whatever duration you want (in units of hours) and add a duration if you prefer.  If you\u2019d like 1, 2, and 3 hours options...simply edit the numbers in the brackets to read [1, 2, 3]. It is possible to enter less than 1 hour intervals such as 15min, 30 min, 45 min by editing the brackets to read [0.25, 0.5, 0.75].", 
            "title": "Workout Range Duration"
        }, 
        {
            "location": "/installing/#apple-watch-customizations", 
            "text": "", 
            "title": "Apple Watch Customizations"
        }, 
        {
            "location": "/installing/#recommended-bolus-autofill", 
            "text": "The Apple Watch's default is to autofill to 75% of the recommended bolus.  If you wish, you can customize so that the watch autofills a different percentage. To do this, the multiplier can be changed from 0.75 to a value of your choice. A value of 1 will autofill 100% of the recommended bolus. A value of 0 will autofill 0% of the recommended bolus.   Go to the Loop Watchapp Extension Folder, within that go to the controllers folder, within that go to BolusInterfaceController.swift. Edit the section of line 97 as indicated on the picture below.", 
            "title": "Recommended Bolus Autofill"
        }, 
        {
            "location": "/installing/#adjust-sensitivity-of-digital-crown-for-carb-and-bolus-entry", 
            "text": "The rate of change of the carb and bolus entry pickers when using the digital crown can be altered. Navigate to the WatchApp Extension folder and within that the Controllers folder. Edit line 130 of AddCarbsInterfaceController.swift and line 161 of BolusInterfaceController.swift. The 1/24 value is the ratio of rotations of the crown to the amount of change in the value. Changing it to 1/12 would mean that twice as many turns would be needed for the same amount of carb or bolus entry.", 
            "title": "Adjust sensitivity of digital crown for carb and bolus entry"
        }, 
        {
            "location": "/installing/#commit-to-github", 
            "text": "Optional Step:  If you would like to commit customizations back into your GitHub repository, you can do that quite easily IF you used the GitHub desktop client to get your Loop source code.  The advantage of doing this is that when Loop releases a new version, you can use GitHub to update your Loop\u2019s code to the new version without needing to redo your code customizations.  You will also have a copy of your customized Loop code available online if you need to do a Loop app rebuild while away from home.  After you\u2019ve made your customizations to your Loop code, go to the Xcode Source Control menu and choose \u201cCommit\u201d.   Once you have committed the changes, you will be able to see the changes highlighted in your GitHub desktop client   Finally, go to the same Source Control menu in Xcode that you just used to \u201cCommit\u201d and this time choose \u201cPush\u201d.  This will push your code customizations up to your GitHub repository.  You can confirm this by finding the Loop.xcconfig file and looking at the MAIN_APP_BUNDLE_IDENTIFIER.  It should no longer say  com.loopkit .", 
            "title": "Commit to GitHub"
        }, 
        {
            "location": "/algorithm/overview/", 
            "text": "Overview\n\n\nLoop\u2019s algorithm for adjusting insulin delivery is oriented around making a glucose prediction.  Every five minutes, triggered by new BG data, it generates a new prediction.  Both \nbolus recommendations\n and \ntemporary basal rates\n are set based on this prediction.\n\n\nTerminology\n\n\nThis graph and legend illustrates terms commonly used in discussing Loop's algorithm,\nand shows them in the context of historical and forecasted BG in a style similar to the\nstatus screen of Loop.\n\n\n\n\n\n\nInsulin Action Duration\nA configuration value that provides an estimate of how long insulin stays active after delivery.\n\n\nTarget Range\n\n\nThis is the low and high BG values that Loop will attempt to keep you between.\n\n\nPredicted Glucose\n\n\nLoop makes a prediction of glucose values out for a length of time equal to your Insulin Action Duration.\n\n\nEventual BG\n\n\nThe last value of the prediction.\n\n\nMinimum BG\n\n\nThe lowest glucose value at any point in time within the prediction.\n\n\nMinimum BG Guard\n\n\nA configuration value below which Loop will suspend all insulin delivery.\n\n\nCGM Data\n\n\nActual glucose measurements made by a continuous glucose monitor.\n\n\nInsulin Sensitivity\n\n\nA configuration value that provides an estimate of how much blood glucose will drop given a unit of insulin.", 
            "title": "Overview"
        }, 
        {
            "location": "/algorithm/overview/#overview", 
            "text": "Loop\u2019s algorithm for adjusting insulin delivery is oriented around making a glucose prediction.  Every five minutes, triggered by new BG data, it generates a new prediction.  Both  bolus recommendations  and  temporary basal rates  are set based on this prediction.", 
            "title": "Overview"
        }, 
        {
            "location": "/algorithm/overview/#terminology", 
            "text": "This graph and legend illustrates terms commonly used in discussing Loop's algorithm,\nand shows them in the context of historical and forecasted BG in a style similar to the\nstatus screen of Loop.    Insulin Action Duration A configuration value that provides an estimate of how long insulin stays active after delivery.  Target Range  This is the low and high BG values that Loop will attempt to keep you between.  Predicted Glucose  Loop makes a prediction of glucose values out for a length of time equal to your Insulin Action Duration.  Eventual BG  The last value of the prediction.  Minimum BG  The lowest glucose value at any point in time within the prediction.  Minimum BG Guard  A configuration value below which Loop will suspend all insulin delivery.  CGM Data  Actual glucose measurements made by a continuous glucose monitor.  Insulin Sensitivity  A configuration value that provides an estimate of how much blood glucose will drop given a unit of insulin.", 
            "title": "Terminology"
        }, 
        {
            "location": "/algorithm/prediction/", 
            "text": "Glucose Prediction\n\n\nLoop makes a new glucose prediction every five minutes by computing the effects\nof insulin that has been administered from the pump, and carbohydrate records that\nhave been entered into Loop. Two additional terms, glucose momentum, and optionally\nretrospective correction will also be used.\n\n\nYou can see the individual contributions of these effects by tapping on the\npredicted glucose graph on Loop's status screen.\n\n\nThis section needs to be fleshed out with details of how insulin and carb\neffects are calculated, and how momentum and retrospective correction work. For\nnow, refer to:\n\n\n\n\nCarbStore.getGlucoseEffects()\n\n\nDoseStore.getGlucoseEffects()\n\n\nGlucoseStore.getRecentMomentumEffect()\n\n\nLoopDataManager.updateRetrospectiveGlucoseEffect()", 
            "title": "Glucose Prediction"
        }, 
        {
            "location": "/algorithm/prediction/#glucose-prediction", 
            "text": "Loop makes a new glucose prediction every five minutes by computing the effects\nof insulin that has been administered from the pump, and carbohydrate records that\nhave been entered into Loop. Two additional terms, glucose momentum, and optionally\nretrospective correction will also be used.  You can see the individual contributions of these effects by tapping on the\npredicted glucose graph on Loop's status screen.  This section needs to be fleshed out with details of how insulin and carb\neffects are calculated, and how momentum and retrospective correction work. For\nnow, refer to:   CarbStore.getGlucoseEffects()  DoseStore.getGlucoseEffects()  GlucoseStore.getRecentMomentumEffect()  LoopDataManager.updateRetrospectiveGlucoseEffect()", 
            "title": "Glucose Prediction"
        }, 
        {
            "location": "/algorithm/temp_basal/", 
            "text": "Temp Basal Adjustments\n\n\nIf blood glucose is predicted to stray outside of the desired target range, Loop will adjust the basal rate temporarily in an attempt to keep actual blood glucose in range.  To illustrate how it does this, we\u2019ll go through a few examples.\n\n\nEventual BG Above Target Range\n\n\n\n\nWhen eventual BG is predicted to go above the current target range, Loop will calculate a delta from eventual bg to the midpoint of the target range.  Using the currently scheduled insulin sensitivity factor, loop calculates a temporary basal rate above your currently scheduled basal rate that would deliver, over 30 minutes, enough insulin to bring glucose levels back into range, capped at the max basal rate.\n\n\nEventual BG Below Target Range\n\n\n\n\nWhen eventual BG is predicted to go below the current target range, Loop will calculate a delta from eventual bg to the midpoint of the target range.  Using the currently scheduled insulin sensitivity factor, loop calculates a temporary basal rate below your currently scheduled basal rate that would reduce insulin delivery, over 30 minutes, enough to bring glucose levels back into range.  It will reduce delivery to zero if needed.\n\n\nTemporary Excursion Below Range\n\n\n\n\nIf the prediction has a temporary excursion below range, but Eventual BG is in range, Loop will revert to using your normal basal schedule, as long as Minimum BG is above the guard.\n\n\nMinimum BG Below Minimum BG Guard\n\n\n\n\nIf Minimum BG drops below Minimum BG Guard, Loop will zero temp your pump regardless of where Eventual BG is.", 
            "title": "Temp Basal Adjustments"
        }, 
        {
            "location": "/algorithm/temp_basal/#temp-basal-adjustments", 
            "text": "If blood glucose is predicted to stray outside of the desired target range, Loop will adjust the basal rate temporarily in an attempt to keep actual blood glucose in range.  To illustrate how it does this, we\u2019ll go through a few examples.", 
            "title": "Temp Basal Adjustments"
        }, 
        {
            "location": "/algorithm/temp_basal/#eventual-bg-above-target-range", 
            "text": "When eventual BG is predicted to go above the current target range, Loop will calculate a delta from eventual bg to the midpoint of the target range.  Using the currently scheduled insulin sensitivity factor, loop calculates a temporary basal rate above your currently scheduled basal rate that would deliver, over 30 minutes, enough insulin to bring glucose levels back into range, capped at the max basal rate.", 
            "title": "Eventual BG Above Target Range"
        }, 
        {
            "location": "/algorithm/temp_basal/#eventual-bg-below-target-range", 
            "text": "When eventual BG is predicted to go below the current target range, Loop will calculate a delta from eventual bg to the midpoint of the target range.  Using the currently scheduled insulin sensitivity factor, loop calculates a temporary basal rate below your currently scheduled basal rate that would reduce insulin delivery, over 30 minutes, enough to bring glucose levels back into range.  It will reduce delivery to zero if needed.", 
            "title": "Eventual BG Below Target Range"
        }, 
        {
            "location": "/algorithm/temp_basal/#temporary-excursion-below-range", 
            "text": "If the prediction has a temporary excursion below range, but Eventual BG is in range, Loop will revert to using your normal basal schedule, as long as Minimum BG is above the guard.", 
            "title": "Temporary Excursion Below Range"
        }, 
        {
            "location": "/algorithm/temp_basal/#minimum-bg-below-minimum-bg-guard", 
            "text": "If Minimum BG drops below Minimum BG Guard, Loop will zero temp your pump regardless of where Eventual BG is.", 
            "title": "Minimum BG Below Minimum BG Guard"
        }, 
        {
            "location": "/algorithm/bolus/", 
            "text": "Bolus Recommendations\n\n\nLoop also uses the forecast to generate recommendations for bolus amounts. Carbs are not directly used in bolus calculations, but rather indirectly through the forecast. After carbs are entered, the forecast is updated using the carb amounts, and then a recommendation is generated using the forecast.\n\n\nThe forecast used for bolusing is slightly different than the forecast used for adjust temp basals in that positive BG momentum is not included.\n\n\nEventual BG Above Target Range\n\n\n\n\nA bolus recommendation is given if Eventual BG is above Target Range.  The delta between Eventual BG and the top of the Target Range is used, along with your current Insulin Sensitivity to calculate the recommendation.", 
            "title": "Bolus Recommendations"
        }, 
        {
            "location": "/algorithm/bolus/#bolus-recommendations", 
            "text": "Loop also uses the forecast to generate recommendations for bolus amounts. Carbs are not directly used in bolus calculations, but rather indirectly through the forecast. After carbs are entered, the forecast is updated using the carb amounts, and then a recommendation is generated using the forecast.  The forecast used for bolusing is slightly different than the forecast used for adjust temp basals in that positive BG momentum is not included.", 
            "title": "Bolus Recommendations"
        }, 
        {
            "location": "/algorithm/bolus/#eventual-bg-above-target-range", 
            "text": "A bolus recommendation is given if Eventual BG is above Target Range.  The delta between Eventual BG and the top of the Target Range is used, along with your current Insulin Sensitivity to calculate the recommendation.", 
            "title": "Eventual BG Above Target Range"
        }, 
        {
            "location": "/nightscout/overview/", 
            "text": "Overview\n\n\nNightscout (NS) is an excellent tool to remotely view Loop's actions.  It allows for easy remote monitoring of Loop activities, troubleshooting of Loop errors, history of CGM, carbs, boluses, \n temp basals, reports to analyze data trends and patterns. There is a Nightscout app in your iPhone App Store, or you can use a web browser to view the data.  Setting up Nightscout is free and fairly quick.  Once setup, the site can be accessed by anyone that you share your unique Nightscout URL with.  \n\n\nNightscout is highly recommended for Loop users, especially those using Loop as caregivers to t1ds.  Nightscout displays are often the easiest way to troubleshoot Loop settings, if you are having problems and seeking input from others.  Below is some discussion about the general Nightscout display, as well as some Loop-specific display information.\n\n\n\n\n\n\nBlood Glucose\n\n\n\nYour blood glucose (BG) readings from your CGM are shown in green, yellow, or red in the main graph area of NS.  You can adjust your high and low BG targets in NS (when NS alerts will start for high/low BGs), but those will not affect your Loop performance.  Loop only uses the BG targets given in the Loop app settings.  The main screen of BGs is displaying the time duration you have selected (in the example above, 12 hours of BG history).  The bottom of the screen shows the last 48-hours of BG trends.  You can scan backwards by dragging the bottom timeline to the left, if you want to review specific Loop actions or data in the last two days. \n\n\n\nCarbs\n\n\n\nCarbs are automatically uploaded to NS by the Loop app.  The amount of carbs on board (active carbs or COB) can be seen by clicking the Loop pill.  The size of a white carb dot on the graph is proportional to the amount of carbs entered...bigger meals get bigger dots. Loop does not read carbs from NS for use in looping caluclations, it only uploads carbs to NS that have been entered in the Loop app.\n\n\n\nBoluses\n\n\n\nInsulin boluses are also automatically uploaded to NS by the Loop app.  The bolus is shown as a filled in blue lower-half of the dot, and the specific amount of the bolus is also shown.  There may be a slight delay between when the carbs for a meal are uploaded to NS to when the meal bolus appears.  This is because depending on the pump model and size of bolus, the bolus may take a few minutes to actually be given and then Loop has to perform a pump read to verify the reservoir volume has decreased (i.e., the bolus was given).  As shown in the example above, the meal carbs have been uploaded, but the bolus delivery is still in progress.  Insulin on board (active insulin or IOB) is also shown in the Loop pill.\n\n\n\nTemp Basals\n\n\n\nWithin your NS profile, you will enter in the scheduled basal for your t1d.  This is not automatically updated when you update the Loop app or your pump; you will have to manually update your basal profile in your NS site if you change your basal profile in Loop and/or pump.  If you don't update the NS basal profile, it doesn't cause any problems in Loop function...you simply won't have accurate VISUAL representation of high/low temp basals within NS. The dashed blue line represents the scheduled basal profile (as entered in your NS profile).  The solid blue lines indicate the actual basal amounts set for a given time...so as Loop sets temp basals higher or lower than your scheduled basal rate, the solid blue line will jump above or below your dashed blue line.  There is a slight delay (up to 2-5 minutes) in the rendering of basal changes on the blue lines, so if you want the accurate current basal rate, you can check the Loop pill.\n\n\n\nPredicted BG\n\n\n\nThe purple line to the right of the BG is Loop's predicted BG.  Watching the behavior of that purple line can help you understand why Loop is making decisions regarding high or low temps.  You can read more on that topic in the Algorithm section of these docs.\n\n\n\nLoop pill\n\n\n\nThe Loop pill is the little display box which when hovered over, or clicked, will provide additional information about recent Loop activities and status.  Information included is the last time Loop ran, the temp basal set, IOB, and COB.  Looking at the Loop pill is a quick method for assessing if you loop is currently active, as well.  The small symbols to the right of the word Loop have specific meaning.  The small horizontal lightning bolt, shown in this example, is an active loop which recently enacted a temp basal.  You can read the section on Troubleshooting using the Loop Pill for additional information about the various symbols.\n\n\n\nSAGE and CAGE pills\n\n\n\nThe SAGE and CAGE pills are for Sensor Age and Cannula Age.  These optional pills track the time since your CGM sensor and Pump site were last changed.  You can set up custom alerts to remind you when it is time to change the devices, or simply use the visuals to keep track of your particular timing for site/sensor changes.", 
            "title": "Overview"
        }, 
        {
            "location": "/nightscout/overview/#overview", 
            "text": "Nightscout (NS) is an excellent tool to remotely view Loop's actions.  It allows for easy remote monitoring of Loop activities, troubleshooting of Loop errors, history of CGM, carbs, boluses,   temp basals, reports to analyze data trends and patterns. There is a Nightscout app in your iPhone App Store, or you can use a web browser to view the data.  Setting up Nightscout is free and fairly quick.  Once setup, the site can be accessed by anyone that you share your unique Nightscout URL with.    Nightscout is highly recommended for Loop users, especially those using Loop as caregivers to t1ds.  Nightscout displays are often the easiest way to troubleshoot Loop settings, if you are having problems and seeking input from others.  Below is some discussion about the general Nightscout display, as well as some Loop-specific display information.    Blood Glucose  Your blood glucose (BG) readings from your CGM are shown in green, yellow, or red in the main graph area of NS.  You can adjust your high and low BG targets in NS (when NS alerts will start for high/low BGs), but those will not affect your Loop performance.  Loop only uses the BG targets given in the Loop app settings.  The main screen of BGs is displaying the time duration you have selected (in the example above, 12 hours of BG history).  The bottom of the screen shows the last 48-hours of BG trends.  You can scan backwards by dragging the bottom timeline to the left, if you want to review specific Loop actions or data in the last two days.   Carbs  Carbs are automatically uploaded to NS by the Loop app.  The amount of carbs on board (active carbs or COB) can be seen by clicking the Loop pill.  The size of a white carb dot on the graph is proportional to the amount of carbs entered...bigger meals get bigger dots. Loop does not read carbs from NS for use in looping caluclations, it only uploads carbs to NS that have been entered in the Loop app.  Boluses  Insulin boluses are also automatically uploaded to NS by the Loop app.  The bolus is shown as a filled in blue lower-half of the dot, and the specific amount of the bolus is also shown.  There may be a slight delay between when the carbs for a meal are uploaded to NS to when the meal bolus appears.  This is because depending on the pump model and size of bolus, the bolus may take a few minutes to actually be given and then Loop has to perform a pump read to verify the reservoir volume has decreased (i.e., the bolus was given).  As shown in the example above, the meal carbs have been uploaded, but the bolus delivery is still in progress.  Insulin on board (active insulin or IOB) is also shown in the Loop pill.  Temp Basals  Within your NS profile, you will enter in the scheduled basal for your t1d.  This is not automatically updated when you update the Loop app or your pump; you will have to manually update your basal profile in your NS site if you change your basal profile in Loop and/or pump.  If you don't update the NS basal profile, it doesn't cause any problems in Loop function...you simply won't have accurate VISUAL representation of high/low temp basals within NS. The dashed blue line represents the scheduled basal profile (as entered in your NS profile).  The solid blue lines indicate the actual basal amounts set for a given time...so as Loop sets temp basals higher or lower than your scheduled basal rate, the solid blue line will jump above or below your dashed blue line.  There is a slight delay (up to 2-5 minutes) in the rendering of basal changes on the blue lines, so if you want the accurate current basal rate, you can check the Loop pill.  Predicted BG  The purple line to the right of the BG is Loop's predicted BG.  Watching the behavior of that purple line can help you understand why Loop is making decisions regarding high or low temps.  You can read more on that topic in the Algorithm section of these docs.  Loop pill  The Loop pill is the little display box which when hovered over, or clicked, will provide additional information about recent Loop activities and status.  Information included is the last time Loop ran, the temp basal set, IOB, and COB.  Looking at the Loop pill is a quick method for assessing if you loop is currently active, as well.  The small symbols to the right of the word Loop have specific meaning.  The small horizontal lightning bolt, shown in this example, is an active loop which recently enacted a temp basal.  You can read the section on Troubleshooting using the Loop Pill for additional information about the various symbols.  SAGE and CAGE pills  The SAGE and CAGE pills are for Sensor Age and Cannula Age.  These optional pills track the time since your CGM sensor and Pump site were last changed.  You can set up custom alerts to remind you when it is time to change the devices, or simply use the visuals to keep track of your particular timing for site/sensor changes.", 
            "title": "Overview"
        }, 
        {
            "location": "/nightscout/new_user/", 
            "text": "New Nightscout Users\n\n\nTwo options exist for easy hosting of NS; Azure or Heroku. Both hosting services are free.  However,  Azure has data quotas monthly and shorter term CPU quotas.  If you exceed those quotas, you may be facing a monthly data-use bill or being locked out of NS for about 12 hours until the quotas reset.  As you start to use NS more intensively for alarms, pebble watches, etc\u2026it is possible that you may exceed your monthly data cap on Azure.  Many Loop users have transitioned their old sites from Azure over to Heroku and have found the hosting change to be beneficial.  Heroku also has some memory limits, but those limits have been more than adequate for Loop users.  Therefore, we recommend new users start with Heroku.\n\n\nHEROKU NIGHTSCOUT SET-UP\n\n\n\n\nCreate an account at \nHeroku\n and choose the Primary Development Language to be Node.js when you create your account.  You\u2019re going to use a free account, but you will still need to enter credit card information for your account setup.  Don\u2019t forget to check your email to confirm your Heroku account.\n\n\n\n\n\n\n\n\n\n\nCreate an account at \nGitHub\n\n\n\n\n\n\nGo to the \nNightscout cgm-remote-monitor repository\n\n\n\n\n\n\nClick the \u201cFork\u201d button in the upper right corner\n\n\n\n\n\n\n\n\n\n\nScroll down until you see the purple \u201cdeploy to Heroku\u201d button.  Click that button.\n\n\n\n\n\n\n\n\n\n\nGive your app a name, this will be the prefix of your NS site\u2019s URL. For example, https://yourappname.herokuapp.com\n\n\n\n\n\n\nFill out the information lines in the \u201cConfig Variables\u201d Section of that page, as shown below.  Some of the lines can stay with the default entries already provided.\n\n\n\n\n\n\n\n\nAPI_SECRET\n\n\nCreate your own API_SECRET\u2026this is like the password to your NS site.  Please write it down somewhere safe or commit it to memory, you will be using it in the future.  It needs to be at least 12 characters long and should NOT use the `@` symbol.\n\n\n\nDISPLAY_UNITS\n\n\nenter either mg/dl or mmol\n\n\n\nENABLE\n\n\nbridge loop pump iob cob basal careportal sage cage\n\n(enter all of the ENABLE words, without commas.  Just a single space between each word. Make sure autocorrect does not add space between careportal)\n\n\n\nDISABLE\n\n\nLeave blank\n\n\n\nALARM_TYPES\n\n\nsimple\n\n\n\nBG_HIGH\n\n\nenter the numeric value of BG you\u2019d like as an high urgent alarm (Red urgent alert)\n\n\n\nBG_TARGET TOP\n\n\nenter the numeric value of the top of your target BG or the value you\u2019d like NS to start to alert you to high BG values (Yellow warning alert)\n\n\n\nBG_TARGET_BOTTOM\n\n\nenter the numeric value of the bottom of your target BG or the value you\u2019d like NS to start to alert you to low BG values (Yellow warning alert)\n\n\n\nBG_LOW\n\n\nenter the numeric value of the BG you\u2019d like as an urgent low alarm (Red urgent alert)\n\n\n\nPUSHOVER lines\n\n\nCan be left blank for now.   See PUSHOVER section if you want to integrate PUSHOVER notifications with NS later.\n\n\n\nCUSTOM_TITLE\n\n\nThis will be the text displayed in the upper left part of the NS website\n\n\n\nTHEME\n\n\nchange the them from default to colors\n\n\n\nBRIDGE_USER_NAME\n\n\nEnter your Dexcom Share Account login name.  This should be the same account name that the t1d's Share2 app is using in the account settings tab on the Share2 app.\n\n\n\nBRIDGE_PASSWORD\n\n\nEnter your Dexcom Share Account password\n\n\n\nThe remaining variables can be left at their default values.\n\n\n\n\n\n\n\nClick the purple Deploy button at the bottom of screen\n\n\n\n\n\n\n\n\nWait a little bit while Heroku builds your NS app.  You\u2019ll see some text scroll by in the Build App box, and then finally, you will have a message that the NS app was successfully deployed.\n\n\n\n\n\n\n\n\nYou can verify your site\u2019s successful build by clicking View (you should see black site with a profile warning).  You will be redirected to a profile set-up page.  (If it doesn't redirect automatically, refresh your webpage).  \n\n\n\n\n\n\nYou do not have to enter all the information in the Profile if you are using Loop (since Loop will be providing the information for IOB and COB rather than letting NS calculate them), but you do have to fill out the Basal Profile and TimeZone at a minimum in order to have your temp basals properly display.  Click Save when you have entered the information.  You will be prompted to \u201cauthenticate\u201d, if it is the first time you\u2019ve used the device to make changes in your profile.  Click on the Authenticate link at the bottom of the site, and enter your API_SECRET to complete the authentication.\n\n\n\n\n\n\nAssuming your previous browser tab is still open for \"Create a new App | Heroku\", let's go back to that tab.  This time instead of choosing the \"View app\" option, we are going to select the \"Manage App\" button. Then, select the \u201csettings\u201d tab near the top of the screen on your Heroku app.\n\n\n\n\n\n\n\n\nClick on \u201cReveal Config  Vars\u201d.  Scroll down the bottom of the Config Vars lines until you find the last blank one.  You are going to add several additional lines of config vars for Loop use; the DEVICESTATUS_ADVANCED is a required line, the others just make Nightscout more useful when Looping.\n\n\n\n\n\n\n\n\nDEVICESTATUS_ADVANCED\n\n\ntrue\n\n\n\nPUMP_RETRO_FIELDS\n\n\nbattery reservoir clock status\n\n\n\nPUMP_FIELDS\n\n\nbattery reservoir clock status\n\n\n\nSHOW_FORECAST\n\n\nloop\n\n\n\nSHOW_PLUGINS\n\n\nloop pump cob iob sage cage careportal\n\n\n\nPUMP_ENABLE_ALERTS\n\n\ntrue\n\n\n\nPUMP_URGENT_BATT_U\n\n\n30\n\n(this is the pump battery percentage that will trigger a red, urgent alert in NS)\n\n\nPUMP_URGENT_BATT_V\n\n\n1.25\n\n(this is the pump battery voltage that will trigger a red, urgent alert in NS)\n\n\nPUMP_URGENT_RES\n\n\n10\n\n(this is the reservoir volume that will trigger a red, urgent alert in NS)\n\n\nPUMP_URGENT_CLOCK\n\n\n30\n\n\nLOOP_ENABLE_ALERTS\n\n\ntrue\n\n\n\nLOOP_WARN\n\n\n20\n\n(this is the minutes since Loop last successfully looped, the t1d will have a similar notification at this time through the Loop app.  this will be a yellow alert in NS.)\n\n\nLOOP_URGENT\n\n\n60\n\n(same as the alert above, but will be red in color and have a shorter snooze option)\n\n\n\n\n\n\nClick on \u201cOpen App\u201d in the top right corner of your Heroku site.\n\n\n\n\n\n\n\n\nClick on the settings (those three horizontal lines in upper right corner).  Now check  that your basal render is selected to either default or icicle (personal preference for how the temp basals show as blue lines in NS site), check the boxes that you\u2019d like pills showing for info on your NS site in the SHOW PLUGINS (usually all of them), and then press save.\n\n\n\n\n\n\nYour NIGHTSCOUT site is all set-up.  Congrats!\n\n\nEVENT HISTORY\n\n\nDon't forget to keep you Loop App's Preferred Source set to \"Event History\" if you want your NS site to smoothly integrate.  Preferred Source set to \"Reservoir Volumes\" will result in carbs not being uploaded and temp basals not being displayed.", 
            "title": "Setup New Site"
        }, 
        {
            "location": "/nightscout/new_user/#new-nightscout-users", 
            "text": "Two options exist for easy hosting of NS; Azure or Heroku. Both hosting services are free.  However,  Azure has data quotas monthly and shorter term CPU quotas.  If you exceed those quotas, you may be facing a monthly data-use bill or being locked out of NS for about 12 hours until the quotas reset.  As you start to use NS more intensively for alarms, pebble watches, etc\u2026it is possible that you may exceed your monthly data cap on Azure.  Many Loop users have transitioned their old sites from Azure over to Heroku and have found the hosting change to be beneficial.  Heroku also has some memory limits, but those limits have been more than adequate for Loop users.  Therefore, we recommend new users start with Heroku.", 
            "title": "New Nightscout Users"
        }, 
        {
            "location": "/nightscout/new_user/#heroku-nightscout-set-up", 
            "text": "Create an account at  Heroku  and choose the Primary Development Language to be Node.js when you create your account.  You\u2019re going to use a free account, but you will still need to enter credit card information for your account setup.  Don\u2019t forget to check your email to confirm your Heroku account.      Create an account at  GitHub    Go to the  Nightscout cgm-remote-monitor repository    Click the \u201cFork\u201d button in the upper right corner      Scroll down until you see the purple \u201cdeploy to Heroku\u201d button.  Click that button.      Give your app a name, this will be the prefix of your NS site\u2019s URL. For example, https://yourappname.herokuapp.com    Fill out the information lines in the \u201cConfig Variables\u201d Section of that page, as shown below.  Some of the lines can stay with the default entries already provided.     API_SECRET  Create your own API_SECRET\u2026this is like the password to your NS site.  Please write it down somewhere safe or commit it to memory, you will be using it in the future.  It needs to be at least 12 characters long and should NOT use the `@` symbol.  DISPLAY_UNITS  enter either mg/dl or mmol  ENABLE  bridge loop pump iob cob basal careportal sage cage\n\n(enter all of the ENABLE words, without commas.  Just a single space between each word. Make sure autocorrect does not add space between careportal)  DISABLE  Leave blank  ALARM_TYPES  simple  BG_HIGH  enter the numeric value of BG you\u2019d like as an high urgent alarm (Red urgent alert)  BG_TARGET TOP  enter the numeric value of the top of your target BG or the value you\u2019d like NS to start to alert you to high BG values (Yellow warning alert)  BG_TARGET_BOTTOM  enter the numeric value of the bottom of your target BG or the value you\u2019d like NS to start to alert you to low BG values (Yellow warning alert)  BG_LOW  enter the numeric value of the BG you\u2019d like as an urgent low alarm (Red urgent alert)  PUSHOVER lines  Can be left blank for now.   See PUSHOVER section if you want to integrate PUSHOVER notifications with NS later.  CUSTOM_TITLE  This will be the text displayed in the upper left part of the NS website  THEME  change the them from default to colors  BRIDGE_USER_NAME  Enter your Dexcom Share Account login name.  This should be the same account name that the t1d's Share2 app is using in the account settings tab on the Share2 app.  BRIDGE_PASSWORD  Enter your Dexcom Share Account password  The remaining variables can be left at their default values.    Click the purple Deploy button at the bottom of screen     Wait a little bit while Heroku builds your NS app.  You\u2019ll see some text scroll by in the Build App box, and then finally, you will have a message that the NS app was successfully deployed.     You can verify your site\u2019s successful build by clicking View (you should see black site with a profile warning).  You will be redirected to a profile set-up page.  (If it doesn't redirect automatically, refresh your webpage).      You do not have to enter all the information in the Profile if you are using Loop (since Loop will be providing the information for IOB and COB rather than letting NS calculate them), but you do have to fill out the Basal Profile and TimeZone at a minimum in order to have your temp basals properly display.  Click Save when you have entered the information.  You will be prompted to \u201cauthenticate\u201d, if it is the first time you\u2019ve used the device to make changes in your profile.  Click on the Authenticate link at the bottom of the site, and enter your API_SECRET to complete the authentication.    Assuming your previous browser tab is still open for \"Create a new App | Heroku\", let's go back to that tab.  This time instead of choosing the \"View app\" option, we are going to select the \"Manage App\" button. Then, select the \u201csettings\u201d tab near the top of the screen on your Heroku app.     Click on \u201cReveal Config  Vars\u201d.  Scroll down the bottom of the Config Vars lines until you find the last blank one.  You are going to add several additional lines of config vars for Loop use; the DEVICESTATUS_ADVANCED is a required line, the others just make Nightscout more useful when Looping.     DEVICESTATUS_ADVANCED  true  PUMP_RETRO_FIELDS  battery reservoir clock status  PUMP_FIELDS  battery reservoir clock status  SHOW_FORECAST  loop  SHOW_PLUGINS  loop pump cob iob sage cage careportal  PUMP_ENABLE_ALERTS  true  PUMP_URGENT_BATT_U  30 \n(this is the pump battery percentage that will trigger a red, urgent alert in NS) PUMP_URGENT_BATT_V  1.25 \n(this is the pump battery voltage that will trigger a red, urgent alert in NS) PUMP_URGENT_RES  10 \n(this is the reservoir volume that will trigger a red, urgent alert in NS) PUMP_URGENT_CLOCK  30 LOOP_ENABLE_ALERTS  true  LOOP_WARN  20 \n(this is the minutes since Loop last successfully looped, the t1d will have a similar notification at this time through the Loop app.  this will be a yellow alert in NS.) LOOP_URGENT  60 \n(same as the alert above, but will be red in color and have a shorter snooze option)   Click on \u201cOpen App\u201d in the top right corner of your Heroku site.     Click on the settings (those three horizontal lines in upper right corner).  Now check  that your basal render is selected to either default or icicle (personal preference for how the temp basals show as blue lines in NS site), check the boxes that you\u2019d like pills showing for info on your NS site in the SHOW PLUGINS (usually all of them), and then press save.    Your NIGHTSCOUT site is all set-up.  Congrats!", 
            "title": "HEROKU NIGHTSCOUT SET-UP"
        }, 
        {
            "location": "/nightscout/new_user/#event-history", 
            "text": "Don't forget to keep you Loop App's Preferred Source set to \"Event History\" if you want your NS site to smoothly integrate.  Preferred Source set to \"Reservoir Volumes\" will result in carbs not being uploaded and temp basals not being displayed.", 
            "title": "EVENT HISTORY"
        }, 
        {
            "location": "/nightscout/update_user/", 
            "text": "UPDATING NIGHTSCOUT SITE\n\n\nIf you are new to Loop and haven\u2019t updated your NS site since before December 1, 2016, you will want to update your NS site.  You can run either the \"master\" or \"dev\" branches of cgm-remote-monitor with Loop.  To check what version your Nightscout site is running, go to your Nightscout site and pull open the site settings by clicking on the three horizontal lines at the top right of the screen.  Scroll down and see if you are running 0.9.2-dev-20161201 or newer for \"dev\" branch.  Notice the \u201cdev\u201d branch is date stamped 0.9.x-dev-YYYMMDD; or you\u2019ll see version 0.9.2 for \"master\" branch deployments.\n\n\nIf you are a current NS user and simply want to update your site, this procedure will work as well.\n\n\nUpdating your repository in GitHub\n\n\n\n\nCopy, paste, and goto the one of the following links depending on which branch of cgm-remote-monitor you are currently running (replace \"yourgithubname\" with your actual GitHub user name)\n\n\n\n\nFor dev branch deployments:\n\n\nhttps://github.com/yourgithubname/cgm-remote-monitor/compare/dev...nightscout:dev\n\n\nor for master branch deployments:\n\n\nhttps://github.com/yourgithubname/cgm-remote-monitor/compare/master...nightscout:master\n\n\n\n\nClick the big green \"create pull request\" button. Another screen will appear, fill in a title and click button to create the pull request, and then you can \"Merge Pull Request\", and finally \"confirm merge\".\n\u2003\n\n\n\n\n\n\n\nIf you don\u2019t have your Heroku set-up to automatically update when your repository is updated, you may have to go into your Heroku \u201cdeploy\u201d section and manually deploy your branch now that your repository has been updated.  Make sure you are connected to your GitHub cgm-remote-monitor repository.\n\n\n\n\nNew Loopers Variables\n\n\nFor new Loopers (but old Nightscout users), you will need to add some variables to your Heroku site to Loop.  \n\n\n\n\nLogin to your Heroku site, select the \u201csettings\u201d tab near the top of the screen on your Heroku app.\n\n\n\n\n\n\n\n\nClick on \u201cReveal Config  Vars\u201d.  Scroll down the bottom of the Config Vars lines until you find the last blank one.  You are going to add several additional lines of config vars for Loop use; the DEVICESTATUS_ADVANCED and ENABLE lines are required, the others just make Nightscout more useful when Looping.\n\n\n\n\n\n\n\n\nDEVICESTATUS_ADVANCED\n\n\ntrue\n\n\n\nENABLE\n\n\nloop pump careportal bridge basal iob cob sage cage\n\n\n\nSHOW_FORECAST\n\n\nloop\n\n\n\nPUMP_RETRO_FIELDS\n\n\nbattery reservoir clock status\n\n\n\nPUMP_FIELDS\n\n\nbattery reservoir clock status\n\n\n\nSHOW_FORECAST\n\n\nloop\n\n\n\nSHOW_PLUGINS\n\n\nloop pump cob iob sage cage careportal\n\n\n\nPUMP_ENABLE_ALERTS\n\n\ntrue\n\n\n\nPUMP_URGENT_BATT_U\n\n\n30\n\n(this is the pump battery percentage that will trigger a red, urgent alert in NS)\n\n\nPUMP_URGENT_BATT_V\n\n\n1.25\n\n(this is the pump battery voltage that will trigger a red, urgent alert in NS)\n\n\nPUMP_URGENT_RES\n\n\n10\n\n(this is the reservoir volume that will trigger a red, urgent alert in NS)\n\n\nPUMP_URGENT_CLOCK\n\n\n30\n\n\nLOOP_ENABLE_ALERTS\n\n\ntrue\n\n\n\nLOOP_WARN\n\n\n20\n\n(this is the minutes since Loop last successfully looped, the t1d will have a similar notification at this time through the Loop app.  this will be a yellow alert in NS.)\n\n\nLOOP_URGENT\n\n\n60\n\n(same as the alert above, but will be red in color and have a shorter snooze option)\n\n\n\n\n\n\nClick on \u201cOpen App\u201d in the top right corner of your Heroku site.\n\n\n\n\n\n\n\n\nClick on the settings (those three horizontal lines in upper right corner).  Now check  that your basal render is selected to either default or icicle (personal preference for how the temp basals show as blue lines in NS site), check the boxes that you\u2019d like pills showing for info on your NS site in the SHOW PLUGINS (usually all of them), and then press save.\n\n\n\n\n\n\n\n\nDouble check that your NS Profile settings are current and that you have a basal profile entered, if you want to see the temp basals that Loop is setting.\n\n\n\n\nYour NIGHTSCOUT site is all set-up.  Congrats!\n\n\nEVENT HISTORY\n\n\nDon't forget to keep you Loop App's Preferred Source set to \"Event History\" if you want your NS site to smoothly integrate.  Preferred Source set to \"Reservoir Volumes\" will result in carbs not being uploaded and temp basals not being displayed.", 
            "title": "Update Site"
        }, 
        {
            "location": "/nightscout/update_user/#updating-nightscout-site", 
            "text": "If you are new to Loop and haven\u2019t updated your NS site since before December 1, 2016, you will want to update your NS site.  You can run either the \"master\" or \"dev\" branches of cgm-remote-monitor with Loop.  To check what version your Nightscout site is running, go to your Nightscout site and pull open the site settings by clicking on the three horizontal lines at the top right of the screen.  Scroll down and see if you are running 0.9.2-dev-20161201 or newer for \"dev\" branch.  Notice the \u201cdev\u201d branch is date stamped 0.9.x-dev-YYYMMDD; or you\u2019ll see version 0.9.2 for \"master\" branch deployments.  If you are a current NS user and simply want to update your site, this procedure will work as well.", 
            "title": "UPDATING NIGHTSCOUT SITE"
        }, 
        {
            "location": "/nightscout/update_user/#updating-your-repository-in-github", 
            "text": "Copy, paste, and goto the one of the following links depending on which branch of cgm-remote-monitor you are currently running (replace \"yourgithubname\" with your actual GitHub user name)   For dev branch deployments:  https://github.com/yourgithubname/cgm-remote-monitor/compare/dev...nightscout:dev  or for master branch deployments:  https://github.com/yourgithubname/cgm-remote-monitor/compare/master...nightscout:master   Click the big green \"create pull request\" button. Another screen will appear, fill in a title and click button to create the pull request, and then you can \"Merge Pull Request\", and finally \"confirm merge\".\n\u2003    If you don\u2019t have your Heroku set-up to automatically update when your repository is updated, you may have to go into your Heroku \u201cdeploy\u201d section and manually deploy your branch now that your repository has been updated.  Make sure you are connected to your GitHub cgm-remote-monitor repository.", 
            "title": "Updating your repository in GitHub"
        }, 
        {
            "location": "/nightscout/update_user/#new-loopers-variables", 
            "text": "For new Loopers (but old Nightscout users), you will need to add some variables to your Heroku site to Loop.     Login to your Heroku site, select the \u201csettings\u201d tab near the top of the screen on your Heroku app.     Click on \u201cReveal Config  Vars\u201d.  Scroll down the bottom of the Config Vars lines until you find the last blank one.  You are going to add several additional lines of config vars for Loop use; the DEVICESTATUS_ADVANCED and ENABLE lines are required, the others just make Nightscout more useful when Looping.     DEVICESTATUS_ADVANCED  true  ENABLE  loop pump careportal bridge basal iob cob sage cage  SHOW_FORECAST  loop  PUMP_RETRO_FIELDS  battery reservoir clock status  PUMP_FIELDS  battery reservoir clock status  SHOW_FORECAST  loop  SHOW_PLUGINS  loop pump cob iob sage cage careportal  PUMP_ENABLE_ALERTS  true  PUMP_URGENT_BATT_U  30 \n(this is the pump battery percentage that will trigger a red, urgent alert in NS) PUMP_URGENT_BATT_V  1.25 \n(this is the pump battery voltage that will trigger a red, urgent alert in NS) PUMP_URGENT_RES  10 \n(this is the reservoir volume that will trigger a red, urgent alert in NS) PUMP_URGENT_CLOCK  30 LOOP_ENABLE_ALERTS  true  LOOP_WARN  20 \n(this is the minutes since Loop last successfully looped, the t1d will have a similar notification at this time through the Loop app.  this will be a yellow alert in NS.) LOOP_URGENT  60 \n(same as the alert above, but will be red in color and have a shorter snooze option)   Click on \u201cOpen App\u201d in the top right corner of your Heroku site.     Click on the settings (those three horizontal lines in upper right corner).  Now check  that your basal render is selected to either default or icicle (personal preference for how the temp basals show as blue lines in NS site), check the boxes that you\u2019d like pills showing for info on your NS site in the SHOW PLUGINS (usually all of them), and then press save.     Double check that your NS Profile settings are current and that you have a basal profile entered, if you want to see the temp basals that Loop is setting.   Your NIGHTSCOUT site is all set-up.  Congrats!", 
            "title": "New Loopers Variables"
        }, 
        {
            "location": "/nightscout/update_user/#event-history", 
            "text": "Don't forget to keep you Loop App's Preferred Source set to \"Event History\" if you want your NS site to smoothly integrate.  Preferred Source set to \"Reservoir Volumes\" will result in carbs not being uploaded and temp basals not being displayed.", 
            "title": "EVENT HISTORY"
        }, 
        {
            "location": "/nightscout/azure_migration/", 
            "text": "Migrating from Azure to Heroku\n\n\nIf you are a current Azure user who wants to move to Heroku, but not lose all your old NS data, you will need do the following steps:\n\n\n\n\nupdate your repository in GitHub\n\n\ncreate a new heroku nightscout site\n\n\nmigrate your mLab database to new site\n\n\n\n\nUpdating your repository in GitHub\n\n\n\n\nCopy, paste, and goto one of the following links, depending on which branch of cgm-remote-monitor you want to use for your Nightscout site. If you are unsure, use the master branch. (replace \"yourgithubname\" with your actual GitHub user name)\n\n\n\n\nFor dev branch deployments:\n\n\nhttps://github.com/yourgithubname/cgm-remote-monitor/compare/dev...nightscout:dev\n\n\nor for master branch deployments:\n\n\nhttps://github.com/yourgithubname/cgm-remote-monitor/compare/master...nightscout:master\n\n\n\n\n\n\nClick the big green \"create pull request\" button. Another screen will appear, fill in a title and click button to create the pull request, and then you can \"Merge Pull Request\", and finally \"confirm merge\".\n\u2003\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYour cgm-remote-monitor repository is now up-to-date.  Nice work.\n\n\n\n\nHeroku Nightscout Site Setup\n\n\n\n\nCreate an account at \nHeroku\n and choose the Primary Development Language to be Node.js when you create your account.  You\u2019re going to use a free account, but you will still need to enter credit card information for your account setup.  Don\u2019t forget to check your email to confirm your Heroku account.\n\n\n\n\n\n\n\n\n\n\nGo to your Nightscout cgm-remote-monitor repository in GitHub (https://github.com/yourGitHubname/cgm-remote-monitor)\n\n\n\n\n\n\nScroll down until you see the purple \u201cdeploy to Heroku\u201d button.  Click that button.\n\n\n\n\n\n\n\n\n\n\n\n\nGive your app a name, this will be the prefix of your NS site\u2019s URL. For example, https://yourappname.herokuapp.com\n\n\n\n\n\n\nFill out the information lines in the \u201cConfig Variables\u201d Section of that page, as shown below.  Some of the lines can stay with the default entries already provided.\n\n\n\n\n\n\n\n\nAPI_SECRET\n\n\nCreate your own API_SECRET\u2026this is like the password to your NS site.  Please write it down somewhere safe or commit it to memory, you will be using it in the future.  It needs to be at least 12 characters long and should NOT use the `@` symbol.\n\n\n\nDISPLAY_UNITS\n\n\nenter either mg/dl or mmol\n\n\n\nENABLE\n\n\nbridge loop pump iob cob basal careportal sage cage\n\n(enter all of the ENABLE words, without commas.  Just a single space between each word. Make sure autocorrect does not add space between careportal)\n\n\n\nDISABLE\n\n\nLeave blank\n\n\n\nALARM_TYPES\n\n\nsimple\n\n\n\nBG_HIGH\n\n\nenter the numeric value of BG you\u2019d like as an high urgent alarm (Red urgent alert)\n\n\n\nBG_TARGET TOP\n\n\nenter the numeric value of the top of your target BG or the value you\u2019d like NS to start to alert you to high BG values (Yellow warning alert)\n\n\n\nBG_TARGET_BOTTOM\n\n\nenter the numeric value of the bottom of your target BG or the value you\u2019d like NS to start to alert you to low BG values (Yellow warning alert)\n\n\n\nBG_LOW\n\n\nenter the numeric value of the BG you\u2019d like as an urgent low alarm (Red urgent alert)\n\n\n\nPUSHOVER lines\n\n\nCan be left blank for now.   See PUSHOVER section if you want to integrate PUSHOVER notifications with NS later.\n\n\n\nCUSTOM_TITLE\n\n\nThis will be the text displayed in the upper left part of the NS website\n\n\n\nTHEME\n\n\nchange the them from default to colors\n\n\n\nBRIDGE_USER_NAME\n\n\nEnter your Dexcom Share Account login name.  This should be the same account name that the t1d's Share2 app is using in the account settings tab on the Share2 app.\n\n\n\nBRIDGE_PASSWORD\n\n\nEnter your Dexcom Share Account password\n\n\n\nThe remaining variables can be left at their default values.\n\n\n\n\n\n\n\nClick the purple Deploy button at the bottom of screen\n\n\n\n\n\n\n\n\nWait a little bit while Heroku builds your NS app.  You\u2019ll see some text scroll by in the Build App box, and then finally, you will have a message that the NS app was successfully deployed.\n\n\n\n\n\n\n\n\nYou can verify your site\u2019s successful build by clicking View (you should see black site with a profile warning).  You will be redirected to a profile set-up page.  (If it doesn't redirect automatically, refresh your webpage).  \n\n\n\n\n\n\nYou do not have to enter all the information in the Profile if you are using Loop (since Loop will be providing the information for IOB and COB rather than letting NS calculate them), but you do have to fill out the Basal Profile and TimeZone at a minimum in order to have your temp basals properly display.  Click Save when you have entered the information.  You will be prompted to \u201cauthenticate\u201d, if it is the first time you\u2019ve used the device to make changes in your profile.  Click on the Authenticate link at the bottom of the site, and enter your API_SECRET to complete the authentication.\n\n\n\n\n\n\nAssuming your previous browser tab is still open for \"Create a new App | Heroku\", let's go back to that tab.  This time instead of choosing the \"View app\" option, we are going to select the \"Manage App\" button. Then, select the \u201csettings\u201d tab near the top of the screen on your Heroku app.\n\n\n\n\n\n\n\n\nClick on \u201cReveal Config  Vars\u201d.  Scroll down the bottom of the Config Vars lines until you find the last blank one.  You are going to add several additional lines of config vars for Loop use; the DEVICESTATUS_ADVANCED is a required line, the others just make Nightscout more useful when Looping.\n\n\n\n\n\n\n\n\nDEVICESTATUS_ADVANCED\n\n\ntrue\n\n\n\nPUMP_RETRO_FIELDS\n\n\nbattery reservoir clock status\n\n\n\nPUMP_FIELDS\n\n\nbattery reservoir clock status\n\n\n\nSHOW_FORECAST\n\n\nloop\n\n\n\nSHOW_PLUGINS\n\n\nloop pump cob iob sage cage careportal\n\n\n\nPUMP_ENABLE_ALERTS\n\n\ntrue\n\n\n\nPUMP_URGENT_BATT_U\n\n\n30\n\n(this is the pump battery percentage that will trigger a red, urgent alert in NS)\n\n\nPUMP_URGENT_BATT_V\n\n\n1.25\n\n(this is the pump battery voltage that will trigger a red, urgent alert in NS)\n\n\nPUMP_URGENT_RES\n\n\n10\n\n(this is the reservoir volume that will trigger a red, urgent alert in NS)\n\n\nPUMP_URGENT_CLOCK\n\n\n30\n\n\nLOOP_ENABLE_ALERTS\n\n\ntrue\n\n\n\nLOOP_WARN\n\n\n20\n\n(this is the minutes since Loop last successfully looped, the t1d will have a similar notification at this time through the Loop app.  this will be a yellow alert in NS.)\n\n\nLOOP_URGENT\n\n\n60\n\n(same as the alert above, but will be red in color and have a shorter snooze option)\n\n\n\n\n\n\nClick on \u201cOpen App\u201d in the top right corner of your Heroku site.\n\n\n\n\n\n\n\n\nClick on the settings (those three horizontal lines in upper right corner).  Now check  that your basal render is selected to either default or icicle (personal preference for how the temp basals show as blue lines in NS site), check the boxes that you\u2019d like pills showing for info on your NS site in the SHOW PLUGINS (usually all of them), and then press save.\n\n\n\n\n\n\nYour new Nightscout site is all set-up.  Congrats!\n\n\nMigrate mLab database\n\n\nIf you\u2019d like to seamlessly keep all your old Azure NS data showing in your new Heroku NS site, you\u2019ll need to copy and paste your old MONGODB string from your Azure site.  Find it in either Application Settings or Connection strings in your Azure control panel and then go to Heroku\u2019s MONGODB_URI line.  Replace the content with your copied string from Azure.  Double check that your Azure collection used the \u201centries\u201d name\u2026if it doesn\u2019t, then you will need to update that variable in Heroku to match as well.\n\n\n\n\nEVENT HISTORY\n\n\nDon't forget to keep you Loop App's Preferred Source set to \"Event History\" if you want your NS site to smoothly integrate.  Preferred Source set to \"Reservoir Volumes\" will result in carbs not being uploaded and temp basals not being displayed.", 
            "title": "Azure to Heroku"
        }, 
        {
            "location": "/nightscout/azure_migration/#migrating-from-azure-to-heroku", 
            "text": "If you are a current Azure user who wants to move to Heroku, but not lose all your old NS data, you will need do the following steps:   update your repository in GitHub  create a new heroku nightscout site  migrate your mLab database to new site", 
            "title": "Migrating from Azure to Heroku"
        }, 
        {
            "location": "/nightscout/azure_migration/#updating-your-repository-in-github", 
            "text": "Copy, paste, and goto one of the following links, depending on which branch of cgm-remote-monitor you want to use for your Nightscout site. If you are unsure, use the master branch. (replace \"yourgithubname\" with your actual GitHub user name)   For dev branch deployments:  https://github.com/yourgithubname/cgm-remote-monitor/compare/dev...nightscout:dev  or for master branch deployments:  https://github.com/yourgithubname/cgm-remote-monitor/compare/master...nightscout:master    Click the big green \"create pull request\" button. Another screen will appear, fill in a title and click button to create the pull request, and then you can \"Merge Pull Request\", and finally \"confirm merge\".\n\u2003         Your cgm-remote-monitor repository is now up-to-date.  Nice work.", 
            "title": "Updating your repository in GitHub"
        }, 
        {
            "location": "/nightscout/azure_migration/#heroku-nightscout-site-setup", 
            "text": "Create an account at  Heroku  and choose the Primary Development Language to be Node.js when you create your account.  You\u2019re going to use a free account, but you will still need to enter credit card information for your account setup.  Don\u2019t forget to check your email to confirm your Heroku account.      Go to your Nightscout cgm-remote-monitor repository in GitHub (https://github.com/yourGitHubname/cgm-remote-monitor)    Scroll down until you see the purple \u201cdeploy to Heroku\u201d button.  Click that button.       Give your app a name, this will be the prefix of your NS site\u2019s URL. For example, https://yourappname.herokuapp.com    Fill out the information lines in the \u201cConfig Variables\u201d Section of that page, as shown below.  Some of the lines can stay with the default entries already provided.     API_SECRET  Create your own API_SECRET\u2026this is like the password to your NS site.  Please write it down somewhere safe or commit it to memory, you will be using it in the future.  It needs to be at least 12 characters long and should NOT use the `@` symbol.  DISPLAY_UNITS  enter either mg/dl or mmol  ENABLE  bridge loop pump iob cob basal careportal sage cage\n\n(enter all of the ENABLE words, without commas.  Just a single space between each word. Make sure autocorrect does not add space between careportal)  DISABLE  Leave blank  ALARM_TYPES  simple  BG_HIGH  enter the numeric value of BG you\u2019d like as an high urgent alarm (Red urgent alert)  BG_TARGET TOP  enter the numeric value of the top of your target BG or the value you\u2019d like NS to start to alert you to high BG values (Yellow warning alert)  BG_TARGET_BOTTOM  enter the numeric value of the bottom of your target BG or the value you\u2019d like NS to start to alert you to low BG values (Yellow warning alert)  BG_LOW  enter the numeric value of the BG you\u2019d like as an urgent low alarm (Red urgent alert)  PUSHOVER lines  Can be left blank for now.   See PUSHOVER section if you want to integrate PUSHOVER notifications with NS later.  CUSTOM_TITLE  This will be the text displayed in the upper left part of the NS website  THEME  change the them from default to colors  BRIDGE_USER_NAME  Enter your Dexcom Share Account login name.  This should be the same account name that the t1d's Share2 app is using in the account settings tab on the Share2 app.  BRIDGE_PASSWORD  Enter your Dexcom Share Account password  The remaining variables can be left at their default values.    Click the purple Deploy button at the bottom of screen     Wait a little bit while Heroku builds your NS app.  You\u2019ll see some text scroll by in the Build App box, and then finally, you will have a message that the NS app was successfully deployed.     You can verify your site\u2019s successful build by clicking View (you should see black site with a profile warning).  You will be redirected to a profile set-up page.  (If it doesn't redirect automatically, refresh your webpage).      You do not have to enter all the information in the Profile if you are using Loop (since Loop will be providing the information for IOB and COB rather than letting NS calculate them), but you do have to fill out the Basal Profile and TimeZone at a minimum in order to have your temp basals properly display.  Click Save when you have entered the information.  You will be prompted to \u201cauthenticate\u201d, if it is the first time you\u2019ve used the device to make changes in your profile.  Click on the Authenticate link at the bottom of the site, and enter your API_SECRET to complete the authentication.    Assuming your previous browser tab is still open for \"Create a new App | Heroku\", let's go back to that tab.  This time instead of choosing the \"View app\" option, we are going to select the \"Manage App\" button. Then, select the \u201csettings\u201d tab near the top of the screen on your Heroku app.     Click on \u201cReveal Config  Vars\u201d.  Scroll down the bottom of the Config Vars lines until you find the last blank one.  You are going to add several additional lines of config vars for Loop use; the DEVICESTATUS_ADVANCED is a required line, the others just make Nightscout more useful when Looping.     DEVICESTATUS_ADVANCED  true  PUMP_RETRO_FIELDS  battery reservoir clock status  PUMP_FIELDS  battery reservoir clock status  SHOW_FORECAST  loop  SHOW_PLUGINS  loop pump cob iob sage cage careportal  PUMP_ENABLE_ALERTS  true  PUMP_URGENT_BATT_U  30 \n(this is the pump battery percentage that will trigger a red, urgent alert in NS) PUMP_URGENT_BATT_V  1.25 \n(this is the pump battery voltage that will trigger a red, urgent alert in NS) PUMP_URGENT_RES  10 \n(this is the reservoir volume that will trigger a red, urgent alert in NS) PUMP_URGENT_CLOCK  30 LOOP_ENABLE_ALERTS  true  LOOP_WARN  20 \n(this is the minutes since Loop last successfully looped, the t1d will have a similar notification at this time through the Loop app.  this will be a yellow alert in NS.) LOOP_URGENT  60 \n(same as the alert above, but will be red in color and have a shorter snooze option)   Click on \u201cOpen App\u201d in the top right corner of your Heroku site.     Click on the settings (those three horizontal lines in upper right corner).  Now check  that your basal render is selected to either default or icicle (personal preference for how the temp basals show as blue lines in NS site), check the boxes that you\u2019d like pills showing for info on your NS site in the SHOW PLUGINS (usually all of them), and then press save.    Your new Nightscout site is all set-up.  Congrats!", 
            "title": "Heroku Nightscout Site Setup"
        }, 
        {
            "location": "/nightscout/azure_migration/#migrate-mlab-database", 
            "text": "If you\u2019d like to seamlessly keep all your old Azure NS data showing in your new Heroku NS site, you\u2019ll need to copy and paste your old MONGODB string from your Azure site.  Find it in either Application Settings or Connection strings in your Azure control panel and then go to Heroku\u2019s MONGODB_URI line.  Replace the content with your copied string from Azure.  Double check that your Azure collection used the \u201centries\u201d name\u2026if it doesn\u2019t, then you will need to update that variable in Heroku to match as well.", 
            "title": "Migrate mLab database"
        }, 
        {
            "location": "/nightscout/azure_migration/#event-history", 
            "text": "Don't forget to keep you Loop App's Preferred Source set to \"Event History\" if you want your NS site to smoothly integrate.  Preferred Source set to \"Reservoir Volumes\" will result in carbs not being uploaded and temp basals not being displayed.", 
            "title": "EVENT HISTORY"
        }, 
        {
            "location": "/nightscout/mlab_cleanup/", 
            "text": "mLab Database Maintenance\n\n\nRegardless of whether you are on Azure or Heroku for Nightscout, you are using an mLab database for storing your Loop data.  mLab allows you to store up to 500 MB for free.  When you hit that data cap, your NS will stop working.  Your Share Bridge will not pull data and your site will be \u201cstale\u201d.  \n\n\nThe good news?  Loop can still run just fine until you cleanout your mLab database.  The bad news?  You just won\u2019t be able to remotely monitor Loop through NS until you clear up some storage space in mLab.\n\n\nThere are two ways to cleanout some space or otherwise get into your mLab database\n\n mLab direct access\n\n Nightscout admin tools\n\n\nmLab direct access\n\n\n\n\nLogin to your mLab database.  \n\n\n\n\n\u2022   IF you setup your own Azure site and mLab database, go directly to http://mlab.com and login.\n\n\n\u2022   If you setup your own Azure site and mLab database, then setup a Heroku account and pointed back to your old mLab database (i.e., copy and pasted the MONGODB_URI from Azure), go directly to http://mlab.com and login.\n\n\n\u2022   IF you setup a Heroku site and let Heroku setup an mLab database for you (which is typical for new Heroku sites), you will access mLab through your Heroku account main page.   Login to your Heroku account and click on the mLab logo as shown below.\n\n\n\n\n\n\n(Users coming directly from a Heroku click will see the screen below.  If you had to login to mLab with a name and password, you will first see a line with your MongoDB deployment.  Click on your database name to see the screen below with all the collection names.) \n\n\n\n\nYour various collections are shown, similar to the screen shot below.  The amount of data each collection is using is listed to the far right of each collection\u2019s line.  I recommend emptying the \u201cloop\u201d collection first and then \"devicestatus\" to free up database storage.  If you need any of the information in the database, you may want to do a selective delete of data. For example, if you are headed into an endocrinologist appointment and want to print out recent Nightscout reports to take with you. Eventually you may need to empty more collections.  It should be awhile though, as the other collections are significantly smaller and will take a long time to fill.\n\n\nClick on a collection\u2019s name to open it.\n\n\n\n\u2003\n3.  Click on the button that says \u201cDelete all documents in collection\u201d and then confirm the deletion.\n\n\n\n\n\n\nYou can confirm that your cleanout has resolved the problem, by checking that your database size is below 500 MB now.  Click on the \u201cHome\u201d link in top left.  Then review the size of the database as shown.\n\n\n\n\n\n\nNightscout Admin Tools\n\n\nIf you go to your Nightscout site's settings (the three horizontal bars in the upper right of your nightscout site), you will be able to access your Admin Tools for the site.  These include some useful quick mLab actions, includig deleting documents from the devicestatus collection similar to the action we took in the steps above.  But, it's worth noting that if you have errant future data in your Nightscout site that is causing problems (usually during time changes or overseas travel), you can clean-out future entries through this portal too.", 
            "title": "mLab"
        }, 
        {
            "location": "/nightscout/mlab_cleanup/#mlab-database-maintenance", 
            "text": "Regardless of whether you are on Azure or Heroku for Nightscout, you are using an mLab database for storing your Loop data.  mLab allows you to store up to 500 MB for free.  When you hit that data cap, your NS will stop working.  Your Share Bridge will not pull data and your site will be \u201cstale\u201d.    The good news?  Loop can still run just fine until you cleanout your mLab database.  The bad news?  You just won\u2019t be able to remotely monitor Loop through NS until you clear up some storage space in mLab.  There are two ways to cleanout some space or otherwise get into your mLab database  mLab direct access  Nightscout admin tools", 
            "title": "mLab Database Maintenance"
        }, 
        {
            "location": "/nightscout/mlab_cleanup/#mlab-direct-access", 
            "text": "Login to your mLab database.     \u2022   IF you setup your own Azure site and mLab database, go directly to http://mlab.com and login.  \u2022   If you setup your own Azure site and mLab database, then setup a Heroku account and pointed back to your old mLab database (i.e., copy and pasted the MONGODB_URI from Azure), go directly to http://mlab.com and login.  \u2022   IF you setup a Heroku site and let Heroku setup an mLab database for you (which is typical for new Heroku sites), you will access mLab through your Heroku account main page.   Login to your Heroku account and click on the mLab logo as shown below.    (Users coming directly from a Heroku click will see the screen below.  If you had to login to mLab with a name and password, you will first see a line with your MongoDB deployment.  Click on your database name to see the screen below with all the collection names.)    Your various collections are shown, similar to the screen shot below.  The amount of data each collection is using is listed to the far right of each collection\u2019s line.  I recommend emptying the \u201cloop\u201d collection first and then \"devicestatus\" to free up database storage.  If you need any of the information in the database, you may want to do a selective delete of data. For example, if you are headed into an endocrinologist appointment and want to print out recent Nightscout reports to take with you. Eventually you may need to empty more collections.  It should be awhile though, as the other collections are significantly smaller and will take a long time to fill.  Click on a collection\u2019s name to open it.  \n\u2003\n3.  Click on the button that says \u201cDelete all documents in collection\u201d and then confirm the deletion.    You can confirm that your cleanout has resolved the problem, by checking that your database size is below 500 MB now.  Click on the \u201cHome\u201d link in top left.  Then review the size of the database as shown.", 
            "title": "mLab direct access"
        }, 
        {
            "location": "/nightscout/mlab_cleanup/#nightscout-admin-tools", 
            "text": "If you go to your Nightscout site's settings (the three horizontal bars in the upper right of your nightscout site), you will be able to access your Admin Tools for the site.  These include some useful quick mLab actions, includig deleting documents from the devicestatus collection similar to the action we took in the steps above.  But, it's worth noting that if you have errant future data in your Nightscout site that is causing problems (usually during time changes or overseas travel), you can clean-out future entries through this portal too.", 
            "title": "Nightscout Admin Tools"
        }, 
        {
            "location": "/nightscout/troubleshooting/", 
            "text": "Troubleshooting using Loop Pill in Nightscout\n\n\nThe Loop pill in Nightscout has a symbol displayed that helps provide information as to the status of the Loop.\n\n\nX   = error in Loop (see below for troubleshooting)\n\n\u03d5   = recommending basal, but not enacting (open loop or pump suspended)\n\n\u2301   = enacted a new temp basal\n\n\u21bb   = Loop is continuing with last temp basal, no change\n\n\u26a0   = warning (Loop has not completed since since the time set on your LOOP_WARN setting in NS)\n\n\n\n  \n\n    \n\n      \nLoop Pill message\n\n      \nPossible Cause\n\n      \nTroubleshoot\n\n    \n\n  \n\n  \n\n    \n\n      \nunknownResponse (xxxx \u201cSent Pump Message\u201d\u2026)\n\n      \nPump communications are not working\n\n      \n\u2022 Be patient, usually self-resolves within 15 minutes\n\n\u2022   Retune in RileyLink; send button press to verify\n\n\u2022   Check/change pump battery\n\n\u2022   Move RileyLink closer to the pump\n\n\u2022   Check if remote ID is on in pump settings\n\n    \n\n    \n\n      \nrF comms failure (Unable to set TempBasal)\n\n      \nPump settings are not allowing temp basal\n\n      \n\u2022 Check if max temp basal in pump > Loop\u2019s max temp basal\n\n\u2022   Check if temp basal type is set to u/hr in pump\n\n\u2022   Go through steps in \u201cunknownResponse\u201d above\n\n\n    \n\n    \n\n      \nstaleDataError\n\n      \nLoop can\u2019t complete because either the CGM or pump data are old\n\n      \n\u2022 Check the error to see which data has the older date.  \n\n\u2022   If it is pump data that is old, try fetching event history and \u201cunknownResponse\u201d steps.  Set pump date using RileyLink\n\n\u2022   If it is CGM data that is old, troubleshoot dexcom (does it have ???, did transmitter quit, did your session end, update transmitter ID in Loop if new)\n\n\n    \n\n    \n\n      \nRL timeout\n\n      \nRileyLink or iPhone's Bluetooth isn\u2019t working\n\n      \n\u2022 Toggle RL on/off switch  (physical switch)\n\n\u2022   Check battery connection in RileyLink\n\n\u2022   Charge RileyLink\n\n\u2022   Toggle iPhone's BT off and then on\n\n\n\n    \n\n  \n\n\n\n\n\nIf these steps do not resolve your problem, try shutting down Loop app and restarting", 
            "title": "Loop Pill"
        }, 
        {
            "location": "/nightscout/troubleshooting/#troubleshooting-using-loop-pill-in-nightscout", 
            "text": "The Loop pill in Nightscout has a symbol displayed that helps provide information as to the status of the Loop.  X   = error in Loop (see below for troubleshooting) \n\u03d5   = recommending basal, but not enacting (open loop or pump suspended) \n\u2301   = enacted a new temp basal \n\u21bb   = Loop is continuing with last temp basal, no change \n\u26a0   = warning (Loop has not completed since since the time set on your LOOP_WARN setting in NS)  \n   \n     \n       Loop Pill message \n       Possible Cause \n       Troubleshoot \n     \n   \n   \n     \n       unknownResponse (xxxx \u201cSent Pump Message\u201d\u2026) \n       Pump communications are not working \n       \u2022 Be patient, usually self-resolves within 15 minutes\n\n\u2022   Retune in RileyLink; send button press to verify\n\n\u2022   Check/change pump battery\n\n\u2022   Move RileyLink closer to the pump\n\n\u2022   Check if remote ID is on in pump settings \n     \n     \n       rF comms failure (Unable to set TempBasal) \n       Pump settings are not allowing temp basal \n       \u2022 Check if max temp basal in pump > Loop\u2019s max temp basal\n\n\u2022   Check if temp basal type is set to u/hr in pump\n\n\u2022   Go through steps in \u201cunknownResponse\u201d above \n     \n     \n       staleDataError \n       Loop can\u2019t complete because either the CGM or pump data are old \n       \u2022 Check the error to see which data has the older date.  \n\n\u2022   If it is pump data that is old, try fetching event history and \u201cunknownResponse\u201d steps.  Set pump date using RileyLink\n\n\u2022   If it is CGM data that is old, troubleshoot dexcom (does it have ???, did transmitter quit, did your session end, update transmitter ID in Loop if new) \n     \n     \n       RL timeout \n       RileyLink or iPhone's Bluetooth isn\u2019t working \n       \u2022 Toggle RL on/off switch  (physical switch)\n\n\u2022   Check battery connection in RileyLink\n\n\u2022   Charge RileyLink\n\n\u2022   Toggle iPhone's BT off and then on", 
            "title": "Troubleshooting using Loop Pill in Nightscout"
        }, 
        {
            "location": "/nightscout/troubleshooting/#if-these-steps-do-not-resolve-your-problem-try-shutting-down-loop-app-and-restarting", 
            "text": "", 
            "title": "If these steps do not resolve your problem, try shutting down Loop app and restarting"
        }
    ]
}